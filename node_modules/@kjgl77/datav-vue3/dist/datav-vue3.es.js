import './style.css';
import { openBlock as le, createElementBlock as se, createElementVNode as ne, createStaticVNode as Bt, defineComponent as Le, useCssVars as pt, unref as i, computed as be, createBlock as Ta, resolveDynamicComponent as Fa, renderSlot as Ge, getCurrentScope as Na, onScopeDispose as Wa, watch as ke, ref as me, onMounted as Re, onUnmounted as Tt, nextTick as Ft, reactive as Pe, Fragment as Ae, renderList as Se, toDisplayString as We, createCommentVNode as _e, onBeforeUnmount as ja, normalizeStyle as Me, getCurrentInstance as ma, pushScopeId as Ea, popScopeId as za, createVNode as J, normalizeClass as qa, toRef as je, h as Ia } from "vue";
var ya = /* @__PURE__ */ ((e) => (e.transparent = "rgba(0,0,0,0)", e.black = "#000000", e.silver = "#C0C0C0", e.gray = "#808080", e.white = "#FFFFFF", e.maroon = "#800000", e.red = "#FF0000", e.purple = "#800080", e.fuchsia = "#FF00FF", e.green = "#008000", e.lime = "#00FF00", e.olive = "#808000", e.yellow = "#FFFF00", e.navy = "#000080", e.blue = "#0000FF", e.teal = "#008080", e.aqua = "#00FFFF", e.aliceblue = "#f0f8ff", e.antiquewhite = "#faebd7", e.aquamarine = "#7fffd4", e.azure = "#f0ffff", e.beige = "#f5f5dc", e.bisque = "#ffe4c4", e.blanchedalmond = "#ffebcd", e.blueviolet = "#8a2be2", e.brown = "#a52a2a", e.burlywood = "#deb887", e.cadetblue = "#5f9ea0", e.chartreuse = "#7fff00", e.chocolate = "#d2691e", e.coral = "#ff7f50", e.cornflowerblue = "#6495ed", e.cornsilk = "#fff8dc", e.crimson = "#dc143c", e.cyan = "#00ffff", e.darkblue = "#00008b", e.darkcyan = "#008b8b", e.darkgoldenrod = "#b8860b", e.darkgray = "#a9a9a9", e.darkgreen = "#006400", e.darkgrey = "#a9a9a9", e.darkkhaki = "#bdb76b", e.darkmagenta = "#8b008b", e.darkolivegreen = "#556b2f", e.darkorange = "#ff8c00", e.darkorchid = "#9932cc", e.darkred = "#8b0000", e.darksalmon = "#e9967a", e.darkseagreen = "#8fbc8f", e.darkslateblue = "#483d8b", e.darkslategray = "#2f4f4f", e.darkslategrey = "#2f4f4f", e.darkturquoise = "#00ced1", e.darkviolet = "#9400d3", e.deeppink = "#ff1493", e.deepskyblue = "#00bfff", e.dimgray = "#696969", e.dimgrey = "#696969", e.dodgerblue = "#1e90ff", e.firebrick = "#b22222", e.floralwhite = "#fffaf0", e.forestgreen = "#228b22", e.gainsboro = "#dcdcdc", e.ghostwhite = "#f8f8ff", e.gold = "#ffd700", e.goldenrod = "#daa520", e.greenyellow = "#adff2f", e.grey = "#808080", e.honeydew = "#f0fff0", e.hotpink = "#ff69b4", e.indianred = "#cd5c5c", e.indigo = "#4b0082", e.ivory = "#fffff0", e.khaki = "#f0e68c", e.lavender = "#e6e6fa", e.lavenderblush = "#fff0f5", e.lawngreen = "#7cfc00", e.lemonchiffon = "#fffacd", e.lightblue = "#add8e6", e.lightcoral = "#f08080", e.lightcyan = "#e0ffff", e.lightgoldenrodyellow = "#fafad2", e.lightgray = "#d3d3d3", e.lightgreen = "#90ee90", e.lightgrey = "#d3d3d3", e.lightpink = "#ffb6c1", e.lightsalmon = "#ffa07a", e.lightseagreen = "#20b2aa", e.lightskyblue = "#87cefa", e.lightslategray = "#778899", e.lightslategrey = "#778899", e.lightsteelblue = "#b0c4de", e.lightyellow = "#ffffe0", e.limegreen = "#32cd32", e.linen = "#faf0e6", e.magenta = "#ff00ff", e.mediumaquamarine = "#66cdaa", e.mediumblue = "#0000cd", e.mediumorchid = "#ba55d3", e.mediumpurple = "#9370db", e.mediumseagreen = "#3cb371", e.mediumslateblue = "#7b68ee", e.mediumspringgreen = "#00fa9a", e.mediumturquoise = "#48d1cc", e.mediumvioletred = "#c71585", e.midnightblue = "#191970", e.mintcream = "#f5fffa", e.mistyrose = "#ffe4e1", e.moccasin = "#ffe4b5", e.navajowhite = "#ffdead", e.oldlace = "#fdf5e6", e.olivedrab = "#6b8e23", e.orange = "#ffa500", e.orangered = "#ff4500", e.orchid = "#da70d6", e.palegoldenrod = "#eee8aa", e.palegreen = "#98fb98", e.paleturquoise = "#afeeee", e.palevioletred = "#db7093", e.papayawhip = "#ffefd5", e.peachpuff = "#ffdab9", e.peru = "#cd853f", e.pink = "#ffc0cb", e.plum = "#dda0dd", e.powderblue = "#b0e0e6", e.rosybrown = "#bc8f8f", e.royalblue = "#4169e1", e.saddlebrown = "#8b4513", e.salmon = "#fa8072", e.sandybrown = "#f4a460", e.seagreen = "#2e8b57", e.seashell = "#fff5ee", e.sienna = "#a0522d", e.skyblue = "#87ceeb", e.slateblue = "#6a5acd", e.slategray = "#708090", e.snow = "#fffafa", e.springgreen = "#00ff7f", e.steelblue = "#4682b4", e.tan = "#d2b48c", e.thistle = "#d8bfd8", e.tomato = "#ff6347", e.turquoise = "#40e0d0", e.violet = "#ee82ee", e.wheat = "#f5deb3", e.whitesmoke = "#f5f5f5", e.yellowgreen = "#9acd32", e))(ya || {});
function Nt(e) {
  return typeof e != "string" ? !1 : (e = e.toLowerCase(), /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(e));
}
function Ha(e) {
  return typeof e != "string" ? !1 : (e = e.toLowerCase(), /^(rgb\(|RGB\()/.test(e));
}
function ba(e) {
  return typeof e != "string" ? !1 : (e = e.toLowerCase(), /^(rgba|RGBA)/.test(e));
}
function xa(e) {
  return /^(rgb|rgba|RGB|RGBA)/.test(e);
}
function Va(e) {
  return ya[e];
}
function Ca(e) {
  if (Nt(e) || xa(e))
    return e;
  const r = Va(e);
  if (!r)
    throw new Error(`Color: Invalid Input of ${e}`);
  return r;
}
function Ua(e) {
  e = e.replace("#", ""), e.length === 3 && (e = Array.from(e).map((n) => n + n).join(""));
  const r = e.split("");
  return new Array(3).fill(0).map((n, t) => parseInt(`0x${r[t * 2]}${r[t * 2 + 1]}`));
}
function Xa(e) {
  return e.replace(/rgb\(|rgba\(|\)/g, "").split(",").slice(0, 3).map((r) => parseInt(r));
}
function gt(e) {
  const r = Ca(e).toLowerCase();
  return Nt(r) ? Ua(r) : Xa(r);
}
function _a(e) {
  const r = Ca(e);
  return ba(r) ? Number(
    r.toLowerCase().split(",").slice(-1)[0].replace(/[)|\s]/g, "")
  ) : 1;
}
function ln(e) {
  const r = gt(e);
  return r && [...r, _a(e)];
}
function Qa(e, r) {
  const n = gt(e);
  return typeof r == "number" ? `rgba(${n.join(",")},${r})` : `rgb(${n.join(",")})`;
}
function Ya(e) {
  if (Nt(e))
    return e;
  const r = gt(e), n = (t) => Number(t).toString(16).padStart(2, "0");
  return `#${r.map(n).join("")}`;
}
function Wt(e) {
  if (!Array.isArray(e))
    throw new Error(`getColorFromRgbValue: ${e} is not an array`);
  const { length: r } = e;
  if (r !== 3 && r !== 4)
    throw new Error("getColorFromRgbValue: value length should be 3 or 4");
  return (r === 3 ? "rgb(" : "rgba(") + e.join(",") + ")";
}
function Ka(e, r = 0) {
  let n = ln(e);
  return n = n.map((t, a) => a === 3 ? t : t - Math.ceil(2.55 * r)).map((t) => t < 0 ? 0 : t), Wt(n);
}
function an(e, r = 0) {
  let n = ln(e);
  return n = n.map((t, a) => a === 3 ? t : t + Math.ceil(2.55 * r)).map((t) => t > 255 ? 255 : t), Wt(n);
}
function De(e, r = 100) {
  const n = gt(e);
  return Wt([...n, r / 100]);
}
const Ja = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  darken: Ka,
  fade: De,
  getColorFromRgbValue: Wt,
  getOpacity: _a,
  getRgbValue: gt,
  getRgbaValue: ln,
  isHex: Nt,
  isRgb: Ha,
  isRgbOrRgba: xa,
  isRgba: ba,
  lighten: an,
  toHex: Ya,
  toRgb: Qa
}, Symbol.toStringTag, { value: "Module" })), Ke = (e, r) => {
  const n = e.__vccOpts || e;
  for (const [t, a] of r)
    n[t] = a;
  return n;
}, Za = {}, ei = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
}, ti = /* @__PURE__ */ ne("g", { style: { transform: "translate(2px, 2px)" } }, [
  /* @__PURE__ */ ne("g", null, [
    /* @__PURE__ */ ne("path", {
      "data-type": "shape",
      d: "M0,0 L0,34 L168,34 L183,19 L183,0",
      class: "dv-button-svg-bg"
    })
  ]),
  /* @__PURE__ */ ne("path", {
    "data-type": "polyline",
    d: "M0,34 L168,34 L183,19",
    class: "dv-button-svg-line"
  })
], -1), ri = [
  ti
];
function ni(e, r) {
  return le(), se("svg", ei, ri);
}
const ai = /* @__PURE__ */ Ke(Za, [["render", ni]]), ii = {}, oi = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
}, li = /* @__PURE__ */ Bt('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M0,0 L0,34 L163,34 L163,0" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L164.1,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L163,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,34 L0,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M1.1,34 L1.1,0" class="dv-button-svg-line"></path></g>', 1), si = [
  li
];
function ui(e, r) {
  return le(), se("svg", oi, si);
}
const ci = /* @__PURE__ */ Ke(ii, [["render", ui]]), fi = {}, di = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
}, hi = /* @__PURE__ */ Bt('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M1,1 L1,33 L162,33 L162,1" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L0,10" class="dv-button-svg-line"></path><path data-type="polyline" d="M-1.1,0 L10,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,0 L153,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L163,10" class="dv-button-svg-line"></path><path data-type="polyline" d="M164.1,34 L153,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,34 L163,24" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,34 L0,24" class="dv-button-svg-line"></path><path data-type="polyline" d="M-1.1,34 L10,34" class="dv-button-svg-line"></path></g>', 1), vi = [
  hi
];
function pi(e, r) {
  return le(), se("svg", di, vi);
}
const gi = /* @__PURE__ */ Ke(fi, [["render", pi]]), mi = {}, yi = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
}, bi = /* @__PURE__ */ ne("g", { style: { transform: "translate(2px, 2px)" } }, [
  /* @__PURE__ */ ne("g", null, [
    /* @__PURE__ */ ne("path", {
      "data-type": "shape",
      d: "M0,34 L168,34 L183,19 L183,0 L0,0",
      class: "dv-button-svg-bg"
    })
  ]),
  /* @__PURE__ */ ne("path", {
    "data-type": "polyline",
    d: "M0,34 L168,34 L183,19 L183,0",
    class: "dv-button-svg-line"
  }),
  /* @__PURE__ */ ne("path", {
    "data-type": "polyline",
    d: "M184.1,0 L0,0 L0,34.7",
    class: "dv-button-svg-line"
  })
], -1), xi = [
  bi
];
function Ci(e, r) {
  return le(), se("svg", yi, xi);
}
const _i = /* @__PURE__ */ Ke(mi, [["render", Ci]]), $i = {}, Pi = {
  viewBox: "0 0 187 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
}, wi = /* @__PURE__ */ ne("g", { style: { transform: "translate(2px, 2px)" } }, [
  /* @__PURE__ */ ne("g", null, [
    /* @__PURE__ */ ne("path", {
      "data-type": "shape",
      d: "M0,34 L168,34 L183,19 L183,0 L15,0 L0,15",
      class: "dv-button-svg-bg"
    })
  ]),
  /* @__PURE__ */ ne("path", {
    "data-type": "polyline",
    d: "M0,34 L168,34 L183,19 L183,0",
    class: "dv-button-svg-line"
  }),
  /* @__PURE__ */ ne("path", {
    "data-type": "polyline",
    d: "M183,0 L15,0 L0,15 L0,34",
    class: "dv-button-svg-line"
  })
], -1), ki = [
  wi
];
function Ai(e, r) {
  return le(), se("svg", Pi, ki);
}
const Li = /* @__PURE__ */ Ke($i, [["render", Ai]]), Si = {}, Oi = {
  viewBox: "0 0 167 38",
  preserveAspectRatio: "none",
  class: "dv-button-svg"
}, Gi = /* @__PURE__ */ Bt('<g style="transform:translate(2px, 2px);"><g><path data-type="shape" d="M0,0 L0,34 L163,34 L163,0" class="dv-button-svg-bg"></path></g><path data-type="polyline" d="M0,0 L81.6,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,0 L81.4,0" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,34 L81.6,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,34 L81.4,34" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,1 L10,1" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,1 L153,1" class="dv-button-svg-line"></path><path data-type="polyline" d="M0,33 L10,33" class="dv-button-svg-line"></path><path data-type="polyline" d="M163,33 L153,33" class="dv-button-svg-line"></path></g>', 1), Mi = [
  Gi
];
function Ri(e, r) {
  return le(), se("svg", Oi, Mi);
}
const Di = /* @__PURE__ */ Ke(Si, [["render", Ri]]), Bi = { class: "dv-button-wrapper" }, Ti = { class: "dv-button" }, Fi = { class: "dv-button-svg-container" }, Ni = { class: "dv-button-text" }, Wi = /* @__PURE__ */ Le({
  components: {
    Border1: ai,
    Border2: ci,
    Border3: gi,
    Border4: _i,
    Border5: Li,
    Border6: Di
  },
  __name: "index",
  props: {
    color: { default: "#2058c7" },
    fontColor: { default: "" },
    bg: { type: Boolean, default: !0 },
    border: { type: [String, Object, Function], default: "Border1" },
    fontSize: { default: 14 }
  },
  setup(e) {
    const r = e;
    pt((c) => ({
      "3b09a6e4": i(l),
      "5f757885": c.color,
      "505f902a": i(t),
      "714af7a5": i(n),
      ea6738d4: i(a),
      "1e0a24df": i(o)
    }));
    const n = be(() => an(r.color, 40)), t = be(() => r.fontColor === "" ? r.color : r.fontColor), a = be(() => an(t.value, 40)), o = be(() => r.bg ? 0.1 : 0), l = be(() => `${r.fontSize}px`);
    return (c, z) => (le(), se("div", Bi, [
      ne("button", Ti, [
        ne("div", Fi, [
          (le(), Ta(Fa(c.border)))
        ]),
        ne("div", Ni, [
          Ge(c.$slots, "default")
        ])
      ])
    ]));
  }
});
const zt = {
  install(e) {
    e.component("DvButton", Wi);
  }
};
function ji(e) {
  return Na() ? (Wa(e), !0) : !1;
}
function Rt(e) {
  return typeof e == "function" ? e() : i(e);
}
const Ei = typeof window < "u" && typeof document < "u", zi = Object.prototype.toString, qi = (e) => zi.call(e) === "[object Object]", on = () => {
};
function Ii(e, r) {
  function n(...t) {
    return new Promise((a, o) => {
      Promise.resolve(e(() => r.apply(this, t), { fn: r, thisArg: this, args: t })).then(a).catch(o);
    });
  }
  return n;
}
function Hi(e, r = {}) {
  let n, t, a = on;
  const o = (c) => {
    clearTimeout(c), a(), a = on;
  };
  return (c) => {
    const z = Rt(e), q = Rt(r.maxWait);
    return n && o(n), z <= 0 || q !== void 0 && q <= 0 ? (t && (o(t), t = null), Promise.resolve(c())) : new Promise((N, X) => {
      a = r.rejectOnCancel ? X : N, q && !t && (t = setTimeout(() => {
        n && o(n), t = null, N(c());
      }, q)), n = setTimeout(() => {
        t && o(t), t = null, N(c());
      }, z);
    });
  };
}
function Vi(e, r = 200, n = {}) {
  return Ii(
    Hi(r, n),
    e
  );
}
function Ui(e) {
  var r;
  const n = Rt(e);
  return (r = n == null ? void 0 : n.$el) != null ? r : n;
}
const Xi = Ei ? window : void 0;
function Qi(...e) {
  let r, n, t, a;
  if (typeof e[0] == "string" || Array.isArray(e[0]) ? ([n, t, a] = e, r = Xi) : [r, n, t, a] = e, !r)
    return on;
  Array.isArray(n) || (n = [n]), Array.isArray(t) || (t = [t]);
  const o = [], l = () => {
    o.forEach((N) => N()), o.length = 0;
  }, c = (N, X, F, A) => (N.addEventListener(X, F, A), () => N.removeEventListener(X, F, A)), z = ke(
    () => [Ui(r), Rt(a)],
    ([N, X]) => {
      if (l(), !N)
        return;
      const F = qi(X) ? { ...X } : X;
      o.push(
        ...n.flatMap((A) => t.map((v) => c(N, A, v, F)))
      );
    },
    { immediate: !0, flush: "post" }
  ), q = () => {
    z(), l();
  };
  return ji(q), q;
}
function ht(e, r) {
  return arguments.length === 1 ? parseInt((Math.random() * e + 1).toString(), 10) : parseInt((Math.random() * (r - e + 1) + e).toString(), 10);
}
function Yi(e, r) {
  const n = window.MutationObserver, t = new n(r);
  return t.observe(e, { attributes: !0, attributeFilter: ["style"], attributeOldValue: !0 }), t;
}
function Dt(e, r) {
  const n = Math.abs(e[0] - r[0]), t = Math.abs(e[1] - r[1]);
  return Math.sqrt(n * n + t * t);
}
function et(e, r, n, t) {
  return [e + Math.cos(t) * n, r + Math.sin(t) * n];
}
function Ki(e) {
  return e.filter((r) => typeof r == "number");
}
function Ji(e) {
  return e = Ki(e), e.reduce((r, n) => r + n, 0);
}
function Zi(e, r) {
  const n = Math.abs(e.x - r.x), t = Math.abs(e.y - r.y);
  return Math.sqrt(n * n + t * t);
}
function fn(e) {
  const n = new Array(e.length - 1).fill(0).map((t, a) => [e[a], e[a + 1]]).map((t) => Zi(t[0], t[1]));
  return Ji(n);
}
function eo(e) {
  return `${e.x},${e.y}`;
}
function dn(e) {
  return e.map(eo).join(" ");
}
function He(e) {
  return (e ? "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx" : "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx").replace(/[xy]/g, (r) => {
    const n = Math.random() * 16 | 0;
    return (r === "x" ? n : n & 3 | 8).toString(16);
  });
}
function Ce(e, r) {
  for (const n in r) {
    if (e[n] && typeof e[n] == "object") {
      Ce(e[n], r[n]);
      continue;
    }
    if (typeof r[n] == "object") {
      e[n] = $e(r[n], !0);
      continue;
    }
    e[n] = r[n];
  }
  return e;
}
function $e(e, r) {
  if (!e)
    return e;
  const { parse: n, stringify: t } = JSON;
  if (!r)
    return n(t(e));
  const a = Array.isArray(e) ? [] : {};
  if (e && typeof e == "object")
    for (const o in e)
      Object.prototype.hasOwnProperty.call(e, o) && (e[o] && typeof e[o] == "object" ? a[o] = $e(e[o], !0) : a[o] = e[o]);
  return a;
}
const xe = (e, r, n) => {
  const t = me(0), a = me(0);
  let o, l = null, c = null;
  const z = (A = !0) => new Promise((v) => {
    Ft(() => {
      c = e.value, t.value = e.value ? e.value.clientWidth : 0, a.value = e.value ? e.value.clientHeight : 0, e.value ? (!t.value || !a.value) && console.warn("DataV: Component width or height is 0px, rendering abnormality may occur!") : console.warn("DataV: Failed to get dom node, component rendering may be abnormal!"), typeof r == "function" && A && r(), v(!0);
    });
  }), q = () => {
    o = Vi(z, 200);
  }, N = () => {
    l = Yi(c, o), Qi(window, "resize", o);
  }, X = () => {
    l && (l.disconnect(), l.takeRecords(), l = null);
  }, F = async () => {
    await z(!1), q(), N(), typeof n == "function" && n();
  };
  return Re(() => {
    F();
  }), Tt(() => {
    X();
  }), {
    width: t,
    height: a,
    initWH: z
  };
};
const to = ["width", "height"], ro = ["d", "fill"], no = ["fill", "x", "y"], ao = ["xlink:href", "width", "height", "x", "y"], io = ["fill", "x", "y"], oo = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e;
    pt((A) => ({
      "5914205c": i(l)
    }));
    const n = me(null), { width: t, height: a } = xe(n, z, c), o = Pe({
      defaultConfig: {
        /**
             * @description Chart data
             * @type {Array<Object>}
             * @default data = []
             */
        data: [],
        /**
             * @description Chart img
             * @type {Array<String>}
             * @default img = []
             */
        img: [],
        /**
             * @description Chart font size
             * @type {Number}
             * @default fontSize = 12
             */
        fontSize: 12,
        /**
             * @description Img side length
             * @type {Number}
             * @default imgSideLength = 30
             */
        imgSideLength: 30,
        /**
             * @description Column color
             * @type {String}
             * @default columnColor = 'rgba(0, 194, 255, 0.4)'
             */
        columnColor: "rgba(0, 194, 255, 0.4)",
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Show value
             * @type {Boolean}
             * @default showValue = false
             */
        showValue: !1,
        /**
             * @description Auto sort by value
             * @type {Boolean}
             * @default sort = true
             */
        sort: !0
      },
      mergedConfig: null,
      column: []
    }), l = be(() => `${r.config.fontSize ? r.config.fontSize : o.defaultConfig.fontSize}px`);
    ke(() => r.config, () => {
      q();
    }, {
      deep: !0
    });
    function c() {
      q();
    }
    function z() {
      q();
    }
    function q() {
      N(), X(), F();
    }
    function N() {
      o.mergedConfig = Ce($e(o.defaultConfig, !0), r.config || {});
    }
    function X() {
      let { data: A } = o.mergedConfig;
      const { sort: v } = o.mergedConfig;
      A = $e(A, !0), v && A.sort(({ value: B }, { value: I }) => B > I ? -1 : B < I ? 1 : 0);
      const M = Math.max(...A.map((B) => B.value));
      A = A.map((B) => ({
        ...B,
        percent: M === 0 ? 0 : B.value / M
      })), o.mergedConfig.data = A;
    }
    function F() {
      const { imgSideLength: A, fontSize: v, data: M } = o.mergedConfig, B = M.length, I = t.value / (B + 1), W = a.value - A - v - 5, b = a.value - v - 5;
      o.column = M.map(($, f) => {
        const { percent: _ } = $, O = I * (f + 1), m = I * f, C = I * (f + 2), d = b - W * _, G = W * _ * 0.6 + d, L = `
          M${m}, ${b}
          Q${O}, ${G} ${O},${d}
          M${O},${d}
          Q${O}, ${G} ${C},${b}
          L${m}, ${b}
          Z
        `, g = (b + d) / 2 + v / 2;
        return {
          ...$,
          d: L,
          x: O,
          y: d,
          textY: g
        };
      });
    }
    return (A, v) => (le(), se("div", {
      ref_key: "conicalColumnChart",
      ref: n,
      class: "dv-conical-column-chart"
    }, [
      (le(), se("svg", {
        width: i(t),
        height: i(a)
      }, [
        (le(!0), se(Ae, null, Se(i(o).column, (M, B) => (le(), se("g", { key: B }, [
          ne("path", {
            d: M.d,
            fill: i(o).mergedConfig.columnColor
          }, null, 8, ro),
          ne("text", {
            fill: i(o).mergedConfig.textColor,
            x: M.x,
            y: i(a) - 4
          }, We(M.name), 9, no),
          i(o).mergedConfig.img.length ? (le(), se("image", {
            key: 0,
            "xlink:href": i(o).mergedConfig.img[B % i(o).mergedConfig.img.length],
            width: i(o).mergedConfig.imgSideLength,
            height: i(o).mergedConfig.imgSideLength,
            x: M.x - i(o).mergedConfig.imgSideLength / 2,
            y: M.y - i(o).mergedConfig.imgSideLength
          }, null, 8, ao)) : _e("", !0),
          i(o).mergedConfig.showValue ? (le(), se("text", {
            key: 1,
            fill: i(o).mergedConfig.textColor,
            x: M.x,
            y: M.textY
          }, We(M.value), 9, io)) : _e("", !0)
        ]))), 128))
      ], 8, to))
    ], 512));
  }
}, qt = {
  install(e) {
    e.component("DvConicalColumnChart", oo);
  }
};
const lo = ["id"], so = ["offset", "stop-color"], uo = ["id", "x2"], co = ["offset", "stop-color"], fo = ["x", "y", "rx", "ry", "stroke-width", "stroke", "width", "height"], ho = ["stroke-width", "stroke-dasharray", "stroke", "points"], vo = ["stroke", "fill", "x", "y"], po = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e, n = He(), t = me(null), a = Pe({
      gradientId1: `percent-pond-gradientId1-${n}`,
      gradientId2: `percent-pond-gradientId2-${n}`,
      width: 0,
      height: 0,
      defaultConfig: {
        /**
             * @description Value
             * @type {Number}
             * @default value = 0
             */
        value: 0,
        /**
             * @description Colors (hex|rgb|rgba|color keywords)
             * @type {Array<String>}
             * @default colors = ['#00BAFF', '#3DE7C9']
             * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
             */
        colors: ["#3DE7C9", "#00BAFF"],
        /**
             * @description Border width
             * @type {Number}
             * @default borderWidth = 3
             */
        borderWidth: 3,
        /**
             * @description Gap between border and pond
             * @type {Number}
             * @default borderGap = 3
             */
        borderGap: 3,
        /**
             * @description Line dash
             * @type {Array<Number>}
             * @default lineDash = [5, 1]
             */
        lineDash: [5, 1],
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Border radius
             * @type {Number}
             * @default borderRadius = 5
             */
        borderRadius: 5,
        /**
             * @description Local Gradient
             * @type {Boolean}
             * @default localGradient = false
             * @example localGradient = false | true
             */
        localGradient: !1,
        /**
             * @description Formatter
             * @type {String}
             * @default formatter = '{value}%'
             */
        formatter: "{value}%"
      },
      mergedConfig: null
    }), o = be(() => {
      if (!a.mergedConfig)
        return 0;
      const { borderWidth: B } = a.mergedConfig;
      return a.width - B;
    }), l = be(() => {
      if (!a.mergedConfig)
        return 0;
      const { borderWidth: B } = a.mergedConfig;
      return a.height - B;
    }), c = be(() => {
      const B = a.height / 2;
      if (!a.mergedConfig)
        return `0, ${B} 0, ${B}`;
      const { borderWidth: I, borderGap: W, value: b } = a.mergedConfig, $ = (a.width - (I + W) * 2) / 100 * b;
      return `
        ${I + W}, ${B}
        ${I + W + $}, ${B + 1e-3}
      `;
    }), z = be(() => {
      if (!a.mergedConfig)
        return 0;
      const { borderWidth: B, borderGap: I } = a.mergedConfig;
      return a.height - (B + I) * 2;
    }), q = be(() => {
      if (!a.mergedConfig)
        return [];
      const { colors: B } = a.mergedConfig, W = 100 / (B.length - 1);
      return B.map((b, $) => [W * $, b]);
    }), N = be(() => a.mergedConfig && a.mergedConfig.localGradient ? a.gradientId1 : a.gradientId2), X = be(() => {
      if (!a.mergedConfig)
        return "100%";
      const { value: B } = a.mergedConfig;
      return `${200 - B}%`;
    }), F = be(() => {
      if (!a.mergedConfig)
        return "";
      const { value: B, formatter: I } = a.mergedConfig;
      return I.replace("{value}", B);
    });
    ke(() => r.config, () => {
      M();
    }, {
      deep: !0
    }), Re(() => {
      A();
    });
    async function A() {
      await v(), r.config && M();
    }
    async function v() {
      await Ft();
      const { clientWidth: B, clientHeight: I } = t.value;
      a.width = B, a.height = I;
    }
    function M() {
      a.mergedConfig = Ce($e(a.defaultConfig, !0), r.config || {});
    }
    return (B, I) => (le(), se("div", {
      ref_key: "percentPond",
      ref: t,
      class: "dv-percent-pond"
    }, [
      (le(), se("svg", null, [
        ne("defs", null, [
          ne("linearGradient", {
            id: i(a).gradientId1,
            x1: "0%",
            y1: "0%",
            x2: "100%",
            y2: "0%"
          }, [
            (le(!0), se(Ae, null, Se(i(q), (W) => (le(), se("stop", {
              key: W[0],
              offset: `${W[0]}%`,
              "stop-color": W[1]
            }, null, 8, so))), 128))
          ], 8, lo),
          ne("linearGradient", {
            id: i(a).gradientId2,
            x1: "0%",
            y1: "0%",
            x2: i(X),
            y2: "0%"
          }, [
            (le(!0), se(Ae, null, Se(i(q), (W) => (le(), se("stop", {
              key: W[0],
              offset: `${W[0]}%`,
              "stop-color": W[1]
            }, null, 8, co))), 128))
          ], 8, uo)
        ]),
        ne("rect", {
          x: i(a).mergedConfig ? i(a).mergedConfig.borderWidth / 2 : "0",
          y: i(a).mergedConfig ? i(a).mergedConfig.borderWidth / 2 : "0",
          rx: i(a).mergedConfig ? i(a).mergedConfig.borderRadius : "0",
          ry: i(a).mergedConfig ? i(a).mergedConfig.borderRadius : "0",
          fill: "transparent",
          "stroke-width": i(a).mergedConfig ? i(a).mergedConfig.borderWidth : "0",
          stroke: `url(#${i(a).gradientId1})`,
          width: i(o) > 0 ? i(o) : 0,
          height: i(l) > 0 ? i(l) : 0
        }, null, 8, fo),
        ne("polyline", {
          "stroke-width": i(z),
          "stroke-dasharray": i(a).mergedConfig ? i(a).mergedConfig.lineDash.join(",") : "0",
          stroke: `url(#${i(N)})`,
          points: i(c)
        }, null, 8, ho),
        ne("text", {
          stroke: i(a).mergedConfig ? i(a).mergedConfig.textColor : "#fff",
          fill: i(a).mergedConfig ? i(a).mergedConfig.textColor : "#fff",
          x: i(a).width / 2,
          y: i(a).height / 2
        }, We(i(F)), 9, vo)
      ]))
    ], 512));
  }
}, It = {
  install(e) {
    e.component("DvPercentPond", po);
  }
};
function $a(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function go(e) {
  if (e.__esModule)
    return e;
  var r = e.default;
  if (typeof r == "function") {
    var n = function t() {
      return this instanceof t ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);
    };
    n.prototype = r.prototype;
  } else
    n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(e).forEach(function(t) {
    var a = Object.getOwnPropertyDescriptor(e, t);
    Object.defineProperty(n, t, a.get ? a : {
      enumerable: !0,
      get: function() {
        return e[t];
      }
    });
  }), n;
}
var jt = {}, Pa = { exports: {} };
(function(e) {
  function r(n) {
    return n && n.__esModule ? n : {
      default: n
    };
  }
  e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
})(Pa);
var we = Pa.exports, Ht = {}, Vt = { exports: {} }, hn;
function Ve() {
  return hn || (hn = 1, function(e) {
    function r(n, t, a) {
      return t in n ? Object.defineProperty(n, t, {
        value: a,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : n[t] = a, n;
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Vt)), Vt.exports;
}
var Ut = { exports: {} }, Xt = { exports: {} }, Qt = { exports: {} }, vn;
function wa() {
  return vn || (vn = 1, function(e) {
    function r(n, t) {
      (t == null || t > n.length) && (t = n.length);
      for (var a = 0, o = new Array(t); a < t; a++)
        o[a] = n[a];
      return o;
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Qt)), Qt.exports;
}
var pn;
function mo() {
  return pn || (pn = 1, function(e) {
    var r = wa();
    function n(t) {
      if (Array.isArray(t))
        return r(t);
    }
    e.exports = n, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Xt)), Xt.exports;
}
var Yt = { exports: {} }, gn;
function yo() {
  return gn || (gn = 1, function(e) {
    function r(n) {
      if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null)
        return Array.from(n);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Yt)), Yt.exports;
}
var Kt = { exports: {} }, mn;
function ka() {
  return mn || (mn = 1, function(e) {
    var r = wa();
    function n(t, a) {
      if (t) {
        if (typeof t == "string")
          return r(t, a);
        var o = Object.prototype.toString.call(t).slice(8, -1);
        if (o === "Object" && t.constructor && (o = t.constructor.name), o === "Map" || o === "Set")
          return Array.from(t);
        if (o === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))
          return r(t, a);
      }
    }
    e.exports = n, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Kt)), Kt.exports;
}
var Jt = { exports: {} }, yn;
function bo() {
  return yn || (yn = 1, function(e) {
    function r() {
      throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Jt)), Jt.exports;
}
var bn;
function Be() {
  return bn || (bn = 1, function(e) {
    var r = mo(), n = yo(), t = ka(), a = bo();
    function o(l) {
      return r(l) || n(l) || t(l) || a();
    }
    e.exports = o, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Ut)), Ut.exports;
}
var Zt = { exports: {} }, xn;
function mt() {
  return xn || (xn = 1, function(e) {
    function r(n, t) {
      if (!(n instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(Zt)), Zt.exports;
}
const yt = /* @__PURE__ */ go(Ja);
var er = {}, tr = {}, rr = { exports: {} }, nr = { exports: {} }, Cn;
function xo() {
  return Cn || (Cn = 1, function(e) {
    function r(n) {
      if (Array.isArray(n))
        return n;
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(nr)), nr.exports;
}
var ar = { exports: {} }, _n;
function Co() {
  return _n || (_n = 1, function(e) {
    function r(n, t) {
      var a = n == null ? null : typeof Symbol < "u" && n[Symbol.iterator] || n["@@iterator"];
      if (a != null) {
        var o = [], l = !0, c = !1, z, q;
        try {
          for (a = a.call(n); !(l = (z = a.next()).done) && (o.push(z.value), !(t && o.length === t)); l = !0)
            ;
        } catch (N) {
          c = !0, q = N;
        } finally {
          try {
            !l && a.return != null && a.return();
          } finally {
            if (c)
              throw q;
          }
        }
        return o;
      }
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(ar)), ar.exports;
}
var ir = { exports: {} }, $n;
function _o() {
  return $n || ($n = 1, function(e) {
    function r() {
      throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(ir)), ir.exports;
}
var Pn;
function Fe() {
  return Pn || (Pn = 1, function(e) {
    var r = xo(), n = Co(), t = ka(), a = _o();
    function o(l, c) {
      return r(l) || n(l, c) || t(l, c) || a();
    }
    e.exports = o, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(rr)), rr.exports;
}
var wn;
function $o() {
  return wn || (wn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.bezierCurveToPolyline = I, e.getBezierCurveLength = W, e.default = void 0;
    var n = r(Fe()), t = r(Be()), a = Math.sqrt, o = Math.pow, l = Math.ceil, c = Math.abs, z = 50;
    function q($) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5, _ = $.length - 1, O = $[0], m = $[_][2], C = $.slice(1), d = C.map(function(V, U) {
        var Z = U === 0 ? O : C[U - 1][2];
        return N.apply(void 0, [Z].concat((0, t.default)(V)));
      }), G = new Array(_).fill(z), L = v(d, G), g = B(L, d, C, f);
      return g.segmentPoints.push(m), g;
    }
    function N($, f, _, O) {
      return function(m) {
        var C = 1 - m, d = o(C, 3), G = o(C, 2), L = o(m, 3), g = o(m, 2);
        return [$[0] * d + 3 * f[0] * m * G + 3 * _[0] * g * C + O[0] * L, $[1] * d + 3 * f[1] * m * G + 3 * _[1] * g * C + O[1] * L];
      };
    }
    function X($, f) {
      var _ = (0, n.default)($, 2), O = _[0], m = _[1], C = (0, n.default)(f, 2), d = C[0], G = C[1];
      return a(o(O - d, 2) + o(m - G, 2));
    }
    function F($) {
      return $.reduce(function(f, _) {
        return f + _;
      }, 0);
    }
    function A($) {
      return $.map(function(f, _) {
        return new Array(f.length - 1).fill(0).map(function(O, m) {
          return X(f[m], f[m + 1]);
        });
      });
    }
    function v($, f) {
      return $.map(function(_, O) {
        var m = 1 / f[O];
        return new Array(f[O]).fill("").map(function(C, d) {
          return _(d * m);
        });
      });
    }
    function M($, f) {
      return $.map(function(_) {
        return _.map(function(O) {
          return c(O - f);
        });
      }).map(function(_) {
        return F(_);
      }).reduce(function(_, O) {
        return _ + O;
      }, 0);
    }
    function B($, f, _, O) {
      var m = 4, C = 1, d = function() {
        var g = $.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0);
        $.forEach(function(ee, ae) {
          return ee.push(_[ae][2]);
        });
        var V = A($), U = V.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0), Z = V.map(function(ee) {
          return F(ee);
        }), u = F(Z), y = u / U, h = M(V, y);
        if (h <= O)
          return "break";
        g = l(y / O * g * 1.1);
        var P = Z.map(function(ee) {
          return l(ee / u * g);
        });
        $ = v(f, P), g = $.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0);
        var E = JSON.parse(JSON.stringify($));
        E.forEach(function(ee, ae) {
          return ee.push(_[ae][2]);
        }), V = A(E), U = V.reduce(function(ee, ae) {
          return ee + ae.length;
        }, 0), Z = V.map(function(ee) {
          return F(ee);
        }), u = F(Z), y = u / U;
        var K = 1 / g / 10;
        f.forEach(function(ee, ae) {
          for (var oe = P[ae], ve = new Array(oe).fill("").map(function(k, S) {
            return S / P[ae];
          }), Q = 0; Q < m; Q++)
            for (var ie = A([$[ae]])[0], ce = ie.map(function(k) {
              return k - y;
            }), fe = 0, T = 0; T < oe; T++) {
              if (T === 0)
                return;
              fe += ce[T - 1], ve[T] -= K * fe, ve[T] > 1 && (ve[T] = 1), ve[T] < 0 && (ve[T] = 0), $[ae][T] = ee(ve[T]);
            }
        }), m *= 4, C++;
      };
      do {
        var G = d();
        if (G === "break")
          break;
      } while (m <= 1025);
      return $ = $.reduce(function(L, g) {
        return L.concat(g);
      }, []), {
        segmentPoints: $,
        cycles: C,
        rounds: m
      };
    }
    function I($) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      if (!$)
        return console.error("bezierCurveToPolyline: Missing parameters!"), !1;
      if (!($ instanceof Array))
        return console.error("bezierCurveToPolyline: Parameter bezierCurve must be an array!"), !1;
      if (typeof f != "number")
        return console.error("bezierCurveToPolyline: Parameter precision must be a number!"), !1;
      var _ = q($, f), O = _.segmentPoints;
      return O;
    }
    function W($) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      if (!$)
        return console.error("getBezierCurveLength: Missing parameters!"), !1;
      if (!($ instanceof Array))
        return console.error("getBezierCurveLength: Parameter bezierCurve must be an array!"), !1;
      if (typeof f != "number")
        return console.error("getBezierCurveLength: Parameter precision must be a number!"), !1;
      var _ = q($, f), O = _.segmentPoints, m = A([O])[0], C = F(m);
      return C;
    }
    var b = I;
    e.default = b;
  }(tr)), tr;
}
var or = {}, kn;
function Po() {
  return kn || (kn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var n = r(Fe()), t = r(Be());
    function a(q) {
      var N = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, X = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.25, F = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25;
      if (!(q instanceof Array))
        return console.error("polylineToBezierCurve: Parameter polyline must be an array!"), !1;
      if (q.length <= 2)
        return console.error("polylineToBezierCurve: Converting to a curve requires at least 3 points!"), !1;
      var A = q[0], v = q.length - 1, M = new Array(v).fill(0).map(function(B, I) {
        return [].concat((0, t.default)(o(q, I, N, X, F)), [q[I + 1]]);
      });
      return N && l(M, A), M.unshift(q[0]), M;
    }
    function o(q, N) {
      var X = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, F = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25, A = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.25, v = q.length;
      if (!(v < 3 || N >= v)) {
        var M = N - 1;
        M < 0 && (M = X ? v + M : 0);
        var B = N + 1;
        B >= v && (B = X ? B - v : v - 1);
        var I = N + 2;
        I >= v && (I = X ? I - v : v - 1);
        var W = q[M], b = q[N], $ = q[B], f = q[I];
        return [[b[0] + F * ($[0] - W[0]), b[1] + F * ($[1] - W[1])], [$[0] - A * (f[0] - b[0]), $[1] - A * (f[1] - b[1])]];
      }
    }
    function l(q, N) {
      var X = q[0], F = q.slice(-1)[0];
      return q.push([c(F[1], F[2]), c(X[0], N), N]), q;
    }
    function c(q, N) {
      var X = (0, n.default)(q, 2), F = X[0], A = X[1], v = (0, n.default)(N, 2), M = v[0], B = v[1], I = M - F, W = B - A;
      return [M + I, B + W];
    }
    var z = a;
    e.default = z;
  }(or)), or;
}
var An;
function sn() {
  return An || (An = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), Object.defineProperty(e, "bezierCurveToPolyline", {
      enumerable: !0,
      get: function() {
        return n.bezierCurveToPolyline;
      }
    }), Object.defineProperty(e, "getBezierCurveLength", {
      enumerable: !0,
      get: function() {
        return n.getBezierCurveLength;
      }
    }), Object.defineProperty(e, "polylineToBezierCurve", {
      enumerable: !0,
      get: function() {
        return t.default;
      }
    }), e.default = void 0;
    var n = $o(), t = r(Po()), a = {
      bezierCurveToPolyline: n.bezierCurveToPolyline,
      getBezierCurveLength: n.getBezierCurveLength,
      polylineToBezierCurve: t.default
    };
    e.default = a;
  }(er)), er;
}
var lr = {}, sr = { exports: {} }, Ln;
function Ee() {
  return Ln || (Ln = 1, function(e) {
    function r(n) {
      "@babel/helpers - typeof";
      return e.exports = r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
        return typeof t;
      } : function(t) {
        return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
      }, e.exports.__esModule = !0, e.exports.default = e.exports, r(n);
    }
    e.exports = r, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(sr)), sr.exports;
}
var Sn;
function Te() {
  return Sn || (Sn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.deepClone = F, e.eliminateBlur = A, e.checkPointIsInCircle = v, e.getTwoPointDistance = M, e.checkPointIsInPolygon = B, e.checkPointIsInSector = I, e.checkPointIsNearPolyline = b, e.checkPointIsInRect = $, e.getRotatePointPos = f, e.getScalePointPos = _, e.getTranslatePointPos = O, e.getDistanceBetweenPointAndLine = m, e.getCircleRadianPoint = C, e.getRegularPolygonPoints = d, e.default = void 0;
    var n = r(Be()), t = r(Fe()), a = r(Ee()), o = Math.abs, l = Math.sqrt, c = Math.sin, z = Math.cos, q = Math.max, N = Math.min, X = Math.PI;
    function F(L) {
      var g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      if (!L)
        return L;
      var V = JSON.parse, U = JSON.stringify;
      if (!g)
        return V(U(L));
      var Z = L instanceof Array ? [] : {};
      if (L && (0, a.default)(L) === "object")
        for (var u in L)
          L.hasOwnProperty(u) && (L[u] && (0, a.default)(L[u]) === "object" ? Z[u] = F(L[u], !0) : Z[u] = L[u]);
      return Z;
    }
    function A(L) {
      return L.map(function(g) {
        var V = (0, t.default)(g, 2), U = V[0], Z = V[1];
        return [parseInt(U) + 0.5, parseInt(Z) + 0.5];
      });
    }
    function v(L, g, V, U) {
      return M(L, [g, V]) <= U;
    }
    function M(L, g) {
      var V = (0, t.default)(L, 2), U = V[0], Z = V[1], u = (0, t.default)(g, 2), y = u[0], h = u[1], P = o(U - y), E = o(Z - h);
      return l(P * P + E * E);
    }
    function B(L, g) {
      for (var V = 0, U = (0, t.default)(L, 2), Z = U[0], u = U[1], y = g.length, h = 1, P = g[0]; h <= y; h++) {
        var E = g[h % y];
        if (Z > N(P[0], E[0]) && Z <= q(P[0], E[0]) && u <= q(P[1], E[1]) && P[0] !== E[0]) {
          var K = (Z - P[0]) * (E[1] - P[1]) / (E[0] - P[0]) + P[1];
          (P[1] === E[1] || u <= K) && V++;
        }
        P = E;
      }
      return V % 2 === 1;
    }
    function I(L, g, V, U, Z, u, y) {
      if (!L || M(L, [g, V]) > U)
        return !1;
      if (!y) {
        var h = F([u, Z]), P = (0, t.default)(h, 2);
        Z = P[0], u = P[1];
      }
      var E = Z > u;
      if (E) {
        var K = [u, Z];
        Z = K[0], u = K[1];
      }
      var ee = u - Z;
      if (ee >= X * 2)
        return !0;
      var ae = (0, t.default)(L, 2), oe = ae[0], ve = ae[1], Q = C(g, V, U, Z), ie = (0, t.default)(Q, 2), ce = ie[0], fe = ie[1], T = C(g, V, U, u), k = (0, t.default)(T, 2), S = k[0], D = k[1], H = [oe - g, ve - V], te = [ce - g, fe - V], p = [S - g, D - V], j = ee > X;
      if (j) {
        var s = F([p, te]), x = (0, t.default)(s, 2);
        te = x[0], p = x[1];
      }
      var w = W(te, H) && !W(p, H);
      return j && (w = !w), E && (w = !w), w;
    }
    function W(L, g) {
      var V = (0, t.default)(L, 2), U = V[0], Z = V[1], u = (0, t.default)(g, 2), y = u[0], h = u[1];
      return -Z * y + U * h > 0;
    }
    function b(L, g, V) {
      var U = V / 2, Z = g.map(function(h) {
        var P = (0, t.default)(h, 2), E = P[0], K = P[1];
        return [E, K - U];
      }), u = g.map(function(h) {
        var P = (0, t.default)(h, 2), E = P[0], K = P[1];
        return [E, K + U];
      }), y = [].concat((0, n.default)(Z), (0, n.default)(u.reverse()));
      return B(L, y);
    }
    function $(L, g, V, U, Z) {
      var u = (0, t.default)(L, 2), y = u[0], h = u[1];
      return !(y < g || h < V || y > g + U || h > V + Z);
    }
    function f() {
      var L = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, g = arguments.length > 1 ? arguments[1] : void 0, V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [0, 0];
      if (!g)
        return !1;
      if (L % 360 === 0)
        return g;
      var U = (0, t.default)(g, 2), Z = U[0], u = U[1], y = (0, t.default)(V, 2), h = y[0], P = y[1];
      return L *= X / 180, [(Z - h) * z(L) - (u - P) * c(L) + h, (Z - h) * c(L) + (u - P) * z(L) + P];
    }
    function _() {
      var L = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [1, 1], g = arguments.length > 1 ? arguments[1] : void 0, V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [0, 0];
      if (!g)
        return !1;
      if (L === 1)
        return g;
      var U = (0, t.default)(g, 2), Z = U[0], u = U[1], y = (0, t.default)(V, 2), h = y[0], P = y[1], E = (0, t.default)(L, 2), K = E[0], ee = E[1], ae = Z - h, oe = u - P;
      return [ae * K + h, oe * ee + P];
    }
    function O(L, g) {
      if (!L || !g)
        return !1;
      var V = (0, t.default)(g, 2), U = V[0], Z = V[1], u = (0, t.default)(L, 2), y = u[0], h = u[1];
      return [U + y, Z + h];
    }
    function m(L, g, V) {
      if (!L || !g || !V)
        return !1;
      var U = (0, t.default)(L, 2), Z = U[0], u = U[1], y = (0, t.default)(g, 2), h = y[0], P = y[1], E = (0, t.default)(V, 2), K = E[0], ee = E[1], ae = ee - P, oe = h - K, ve = P * (K - h) - h * (ee - P), Q = o(ae * Z + oe * u + ve), ie = l(ae * ae + oe * oe);
      return Q / ie;
    }
    function C(L, g, V, U) {
      return [L + z(U) * V, g + c(U) * V];
    }
    function d(L, g, V, U) {
      var Z = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : X * -0.5, u = X * 2 / U, y = new Array(U).fill("").map(function(h, P) {
        return P * u + Z;
      });
      return y.map(function(h) {
        return C(L, g, V, h);
      });
    }
    var G = {
      deepClone: F,
      eliminateBlur: A,
      checkPointIsInCircle: v,
      checkPointIsInPolygon: B,
      checkPointIsInSector: I,
      checkPointIsNearPolyline: b,
      getTwoPointDistance: M,
      getRotatePointPos: f,
      getScalePointPos: _,
      getTranslatePointPos: O,
      getCircleRadianPoint: C,
      getRegularPolygonPoints: d,
      getDistanceBetweenPointAndLine: m
    };
    e.default = G;
  }(lr)), lr;
}
var ur = {}, cr = {}, On;
function wo() {
  return On || (On = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.drawPolylinePath = t, e.drawBezierCurvePath = a, e.default = void 0;
    var n = r(Be());
    function t(l, c) {
      var z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, q = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      if (!l || c.length < 2)
        return !1;
      z && l.beginPath(), c.forEach(function(N, X) {
        return N && (X === 0 ? l.moveTo.apply(l, (0, n.default)(N)) : l.lineTo.apply(l, (0, n.default)(N)));
      }), q && l.closePath();
    }
    function a(l, c) {
      var z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, q = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, N = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
      if (!l || !c)
        return !1;
      q && l.beginPath(), z && l.moveTo.apply(l, (0, n.default)(z)), c.forEach(function(X) {
        return X && l.bezierCurveTo.apply(l, (0, n.default)(X[0]).concat((0, n.default)(X[1]), (0, n.default)(X[2])));
      }), N && l.closePath();
    }
    var o = {
      drawPolylinePath: t,
      drawBezierCurvePath: a
    };
    e.default = o;
  }(cr)), cr;
}
var Gn;
function un() {
  return Gn || (Gn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.extendNewGraph = _, e.default = e.text = e.bezierCurve = e.smoothline = e.polyline = e.regPolygon = e.sector = e.arc = e.ring = e.rect = e.ellipse = e.circle = void 0;
    var n = r(Be()), t = r(Fe()), a = r(sn()), o = Te(), l = wo(), c = a.default.polylineToBezierCurve, z = a.default.bezierCurveToPolyline, q = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0
      },
      validator: function(m) {
        var C = m.shape, d = C.rx, G = C.ry, L = C.r;
        return typeof d != "number" || typeof G != "number" || typeof L != "number" ? (console.error("Circle shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape;
        d.beginPath();
        var L = G.rx, g = G.ry, V = G.r;
        d.arc(L, g, V > 0 ? V : 0.01, 0, Math.PI * 2), d.fill(), d.stroke(), d.closePath();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = d.rx, L = d.ry, g = d.r;
        return (0, o.checkPointIsInCircle)(m, G, L, g);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry;
        G.graphCenter = [L, g];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape;
        this.attr("shape", {
          rx: L.rx + d,
          ry: L.ry + G
        });
      }
    };
    e.circle = q;
    var N = {
      shape: {
        rx: 0,
        ry: 0,
        hr: 0,
        vr: 0
      },
      validator: function(m) {
        var C = m.shape, d = C.rx, G = C.ry, L = C.hr, g = C.vr;
        return typeof d != "number" || typeof G != "number" || typeof L != "number" || typeof g != "number" ? (console.error("Ellipse shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape;
        d.beginPath();
        var L = G.rx, g = G.ry, V = G.hr, U = G.vr;
        d.ellipse(L, g, V > 0 ? V : 0.01, U > 0 ? U : 0.01, 0, 0, Math.PI * 2), d.fill(), d.stroke(), d.closePath();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = d.rx, L = d.ry, g = d.hr, V = d.vr, U = Math.max(g, V), Z = Math.min(g, V), u = Math.sqrt(U * U - Z * Z), y = [G - u, L], h = [G + u, L], P = (0, o.getTwoPointDistance)(m, y) + (0, o.getTwoPointDistance)(m, h);
        return P <= 2 * U;
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry;
        G.graphCenter = [L, g];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape;
        this.attr("shape", {
          rx: L.rx + d,
          ry: L.ry + G
        });
      }
    };
    e.ellipse = N;
    var X = {
      shape: {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      },
      validator: function(m) {
        var C = m.shape, d = C.x, G = C.y, L = C.w, g = C.h;
        return typeof d != "number" || typeof G != "number" || typeof L != "number" || typeof g != "number" ? (console.error("Rect shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape;
        d.beginPath();
        var L = G.x, g = G.y, V = G.w, U = G.h;
        d.rect(L, g, V, U), d.fill(), d.stroke(), d.closePath();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = d.x, L = d.y, g = d.w, V = d.h;
        return (0, o.checkPointIsInRect)(m, G, L, g, V);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.x, g = d.y, V = d.w, U = d.h;
        G.graphCenter = [L + V / 2, g + U / 2];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape;
        this.attr("shape", {
          x: L.x + d,
          y: L.y + G
        });
      }
    };
    e.rect = X;
    var F = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0
      },
      validator: function(m) {
        var C = m.shape, d = C.rx, G = C.ry, L = C.r;
        return typeof d != "number" || typeof G != "number" || typeof L != "number" ? (console.error("Ring shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape;
        d.beginPath();
        var L = G.rx, g = G.ry, V = G.r;
        d.arc(L, g, V > 0 ? V : 0.01, 0, Math.PI * 2), d.stroke(), d.closePath();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry, V = d.r, U = G.lineWidth, Z = U / 2, u = V - Z, y = V + Z, h = (0, o.getTwoPointDistance)(m, [L, g]);
        return h >= u && h <= y;
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry;
        G.graphCenter = [L, g];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape;
        this.attr("shape", {
          rx: L.rx + d,
          ry: L.ry + G
        });
      }
    };
    e.ring = F;
    var A = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockWise: !0
      },
      validator: function(m) {
        var C = m.shape, d = ["rx", "ry", "r", "startAngle", "endAngle"];
        return d.find(function(G) {
          return typeof C[G] != "number";
        }) ? (console.error("Arc shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape;
        d.beginPath();
        var L = G.rx, g = G.ry, V = G.r, U = G.startAngle, Z = G.endAngle, u = G.clockWise;
        d.arc(L, g, V > 0 ? V : 1e-3, U, Z, !u), d.stroke(), d.closePath();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry, V = d.r, U = d.startAngle, Z = d.endAngle, u = d.clockWise, y = G.lineWidth, h = y / 2, P = V - h, E = V + h;
        return !(0, o.checkPointIsInSector)(m, L, g, P, U, Z, u) && (0, o.checkPointIsInSector)(m, L, g, E, U, Z, u);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry;
        G.graphCenter = [L, g];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape;
        this.attr("shape", {
          rx: L.rx + d,
          ry: L.ry + G
        });
      }
    };
    e.arc = A;
    var v = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        startAngle: 0,
        endAngle: 0,
        clockWise: !0
      },
      validator: function(m) {
        var C = m.shape, d = ["rx", "ry", "r", "startAngle", "endAngle"];
        return d.find(function(G) {
          return typeof C[G] != "number";
        }) ? (console.error("Sector shape configuration is abnormal!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape;
        d.beginPath();
        var L = G.rx, g = G.ry, V = G.r, U = G.startAngle, Z = G.endAngle, u = G.clockWise;
        d.arc(L, g, V > 0 ? V : 0.01, U, Z, !u), d.lineTo(L, g), d.closePath(), d.stroke(), d.fill();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = d.rx, L = d.ry, g = d.r, V = d.startAngle, U = d.endAngle, Z = d.clockWise;
        return (0, o.checkPointIsInSector)(m, G, L, g, V, U, Z);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry;
        G.graphCenter = [L, g];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape, g = L.rx, V = L.ry;
        this.attr("shape", {
          rx: g + d,
          ry: V + G
        });
      }
    };
    e.sector = v;
    var M = {
      shape: {
        rx: 0,
        ry: 0,
        r: 0,
        side: 0
      },
      validator: function(m) {
        var C = m.shape, d = C.side, G = ["rx", "ry", "r", "side"];
        return G.find(function(L) {
          return typeof C[L] != "number";
        }) ? (console.error("RegPolygon shape configuration is abnormal!"), !1) : d < 3 ? (console.error("RegPolygon at least trigon!"), !1) : !0;
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape, L = C.cache;
        d.beginPath();
        var g = G.rx, V = G.ry, U = G.r, Z = G.side;
        if (!L.points || L.rx !== g || L.ry !== V || L.r !== U || L.side !== Z) {
          var u = (0, o.getRegularPolygonPoints)(g, V, U, Z);
          Object.assign(L, {
            points: u,
            rx: g,
            ry: V,
            r: U,
            side: Z
          });
        }
        var y = L.points;
        (0, l.drawPolylinePath)(d, y), d.closePath(), d.stroke(), d.fill();
      },
      hoverCheck: function(m, C) {
        var d = C.cache, G = d.points;
        return (0, o.checkPointIsInPolygon)(m, G);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.rx, g = d.ry;
        G.graphCenter = [L, g];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape, g = C.cache, V = L.rx, U = L.ry;
        g.rx += d, g.ry += G, this.attr("shape", {
          rx: V + d,
          ry: U + G
        }), g.points = g.points.map(function(Z) {
          var u = (0, t.default)(Z, 2), y = u[0], h = u[1];
          return [y + d, h + G];
        });
      }
    };
    e.regPolygon = M;
    var B = {
      shape: {
        points: [],
        close: !1
      },
      validator: function(m) {
        var C = m.shape, d = C.points;
        return d instanceof Array ? !0 : (console.error("Polyline points should be an array!"), !1);
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape, L = C.style.lineWidth;
        d.beginPath();
        var g = G.points, V = G.close;
        L === 1 && (g = (0, o.eliminateBlur)(g)), (0, l.drawPolylinePath)(d, g), V && (d.closePath(), d.fill()), d.stroke();
      },
      hoverCheck: function(m, C) {
        var d = C.shape, G = C.style, L = d.points, g = d.close, V = G.lineWidth;
        return g ? (0, o.checkPointIsInPolygon)(m, L) : (0, o.checkPointIsNearPolyline)(m, L, V);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.points;
        G.graphCenter = L[0];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape, g = L.points, V = g.map(function(U) {
          var Z = (0, t.default)(U, 2), u = Z[0], y = Z[1];
          return [u + d, y + G];
        });
        this.attr("shape", {
          points: V
        });
      }
    };
    e.polyline = B;
    var I = {
      shape: {
        points: [],
        close: !1
      },
      validator: function(m) {
        var C = m.shape, d = C.points;
        return d instanceof Array ? !0 : (console.error("Smoothline points should be an array!"), !1);
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape, L = C.cache, g = G.points, V = G.close;
        if (!L.points || L.points.toString() !== g.toString()) {
          var U = c(g, V), Z = z(U);
          Object.assign(L, {
            points: (0, o.deepClone)(g, !0),
            bezierCurve: U,
            hoverPoints: Z
          });
        }
        var u = L.bezierCurve;
        d.beginPath(), (0, l.drawBezierCurvePath)(d, u.slice(1), u[0]), V && (d.closePath(), d.fill()), d.stroke();
      },
      hoverCheck: function(m, C) {
        var d = C.cache, G = C.shape, L = C.style, g = d.hoverPoints, V = G.close, U = L.lineWidth;
        return V ? (0, o.checkPointIsInPolygon)(m, g) : (0, o.checkPointIsNearPolyline)(m, g, U);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.points;
        G.graphCenter = L[0];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape, g = C.cache, V = L.points, U = V.map(function(P) {
          var E = (0, t.default)(P, 2), K = E[0], ee = E[1];
          return [K + d, ee + G];
        });
        g.points = U;
        var Z = (0, t.default)(g.bezierCurve[0], 2), u = Z[0], y = Z[1], h = g.bezierCurve.slice(1);
        g.bezierCurve = [[u + d, y + G]].concat((0, n.default)(h.map(function(P) {
          return P.map(function(E) {
            var K = (0, t.default)(E, 2), ee = K[0], ae = K[1];
            return [ee + d, ae + G];
          });
        }))), g.hoverPoints = g.hoverPoints.map(function(P) {
          var E = (0, t.default)(P, 2), K = E[0], ee = E[1];
          return [K + d, ee + G];
        }), this.attr("shape", {
          points: U
        });
      }
    };
    e.smoothline = I;
    var W = {
      shape: {
        points: [],
        close: !1
      },
      validator: function(m) {
        var C = m.shape, d = C.points;
        return d instanceof Array ? !0 : (console.error("BezierCurve points should be an array!"), !1);
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape, L = C.cache, g = G.points, V = G.close;
        if (!L.points || L.points.toString() !== g.toString()) {
          var U = z(g, 20);
          Object.assign(L, {
            points: (0, o.deepClone)(g, !0),
            hoverPoints: U
          });
        }
        d.beginPath(), (0, l.drawBezierCurvePath)(d, g.slice(1), g[0]), V && (d.closePath(), d.fill()), d.stroke();
      },
      hoverCheck: function(m, C) {
        var d = C.cache, G = C.shape, L = C.style, g = d.hoverPoints, V = G.close, U = L.lineWidth;
        return V ? (0, o.checkPointIsInPolygon)(m, g) : (0, o.checkPointIsNearPolyline)(m, g, U);
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.points;
        G.graphCenter = L[0];
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape, g = C.cache, V = L.points, U = (0, t.default)(V[0], 2), Z = U[0], u = U[1], y = V.slice(1), h = [[Z + d, u + G]].concat((0, n.default)(y.map(function(P) {
          return P.map(function(E) {
            var K = (0, t.default)(E, 2), ee = K[0], ae = K[1];
            return [ee + d, ae + G];
          });
        })));
        g.points = h, g.hoverPoints = g.hoverPoints.map(function(P) {
          var E = (0, t.default)(P, 2), K = E[0], ee = E[1];
          return [K + d, ee + G];
        }), this.attr("shape", {
          points: h
        });
      }
    };
    e.bezierCurve = W;
    var b = {
      shape: {
        content: "",
        position: [],
        maxWidth: void 0,
        rowGap: 0
      },
      validator: function(m) {
        var C = m.shape, d = C.content, G = C.position, L = C.rowGap;
        return typeof d != "string" ? (console.error("Text content should be a string!"), !1) : G instanceof Array ? typeof L != "number" ? (console.error("Text rowGap should be a number!"), !1) : !0 : (console.error("Text position should be an array!"), !1);
      },
      draw: function(m, C) {
        var d = m.ctx, G = C.shape, L = G.content, g = G.position, V = G.maxWidth, U = G.rowGap, Z = d.textBaseline, u = d.font, y = parseInt(u.replace(/\D/g, "")), h = g, P = (0, t.default)(h, 2), E = P[0], K = P[1];
        L = L.split(`
`);
        var ee = L.length, ae = y + U, oe = ee * ae - U, ve = 0;
        Z === "middle" && (ve = oe / 2, K += y / 2), Z === "bottom" && (ve = oe, K += y), g = new Array(ee).fill(0).map(function(Q, ie) {
          return [E, K + ie * ae - ve];
        }), d.beginPath(), L.forEach(function(Q, ie) {
          d.fillText.apply(d, [Q].concat((0, n.default)(g[ie]), [V])), d.strokeText.apply(d, [Q].concat((0, n.default)(g[ie]), [V]));
        }), d.closePath();
      },
      hoverCheck: function(m, C) {
        return C.shape, C.style, !1;
      },
      setGraphCenter: function(m, C) {
        var d = C.shape, G = C.style, L = d.position;
        G.graphCenter = (0, n.default)(L);
      },
      move: function(m, C) {
        var d = m.movementX, G = m.movementY, L = C.shape, g = (0, t.default)(L.position, 2), V = g[0], U = g[1];
        this.attr("shape", {
          position: [V + d, U + G]
        });
      }
    };
    e.text = b;
    var $ = /* @__PURE__ */ new Map([["circle", q], ["ellipse", N], ["rect", X], ["ring", F], ["arc", A], ["sector", v], ["regPolygon", M], ["polyline", B], ["smoothline", I], ["bezierCurve", W], ["text", b]]), f = $;
    e.default = f;
    function _(O, m) {
      if (!O || !m) {
        console.error("ExtendNewGraph Missing Parameters!");
        return;
      }
      if (!m.shape) {
        console.error("Required attribute of shape to extendNewGraph!");
        return;
      }
      if (!m.validator) {
        console.error("Required function of validator to extendNewGraph!");
        return;
      }
      if (!m.draw) {
        console.error("Required function of draw to extendNewGraph!");
        return;
      }
      $.set(O, m);
    }
  }(ur)), ur;
}
var fr = {}, dr = { exports: {} }, Mn;
function ko() {
  return Mn || (Mn = 1, function(e) {
    var r = function(n) {
      var t = Object.prototype, a = t.hasOwnProperty, o, l = typeof Symbol == "function" ? Symbol : {}, c = l.iterator || "@@iterator", z = l.asyncIterator || "@@asyncIterator", q = l.toStringTag || "@@toStringTag";
      function N(y, h, P) {
        return Object.defineProperty(y, h, {
          value: P,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), y[h];
      }
      try {
        N({}, "");
      } catch {
        N = function(h, P, E) {
          return h[P] = E;
        };
      }
      function X(y, h, P, E) {
        var K = h && h.prototype instanceof W ? h : W, ee = Object.create(K.prototype), ae = new U(E || []);
        return ee._invoke = G(y, P, ae), ee;
      }
      n.wrap = X;
      function F(y, h, P) {
        try {
          return { type: "normal", arg: y.call(h, P) };
        } catch (E) {
          return { type: "throw", arg: E };
        }
      }
      var A = "suspendedStart", v = "suspendedYield", M = "executing", B = "completed", I = {};
      function W() {
      }
      function b() {
      }
      function $() {
      }
      var f = {};
      N(f, c, function() {
        return this;
      });
      var _ = Object.getPrototypeOf, O = _ && _(_(Z([])));
      O && O !== t && a.call(O, c) && (f = O);
      var m = $.prototype = W.prototype = Object.create(f);
      b.prototype = $, N(m, "constructor", $), N($, "constructor", b), b.displayName = N(
        $,
        q,
        "GeneratorFunction"
      );
      function C(y) {
        ["next", "throw", "return"].forEach(function(h) {
          N(y, h, function(P) {
            return this._invoke(h, P);
          });
        });
      }
      n.isGeneratorFunction = function(y) {
        var h = typeof y == "function" && y.constructor;
        return h ? h === b || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (h.displayName || h.name) === "GeneratorFunction" : !1;
      }, n.mark = function(y) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(y, $) : (y.__proto__ = $, N(y, q, "GeneratorFunction")), y.prototype = Object.create(m), y;
      }, n.awrap = function(y) {
        return { __await: y };
      };
      function d(y, h) {
        function P(ee, ae, oe, ve) {
          var Q = F(y[ee], y, ae);
          if (Q.type === "throw")
            ve(Q.arg);
          else {
            var ie = Q.arg, ce = ie.value;
            return ce && typeof ce == "object" && a.call(ce, "__await") ? h.resolve(ce.__await).then(function(fe) {
              P("next", fe, oe, ve);
            }, function(fe) {
              P("throw", fe, oe, ve);
            }) : h.resolve(ce).then(function(fe) {
              ie.value = fe, oe(ie);
            }, function(fe) {
              return P("throw", fe, oe, ve);
            });
          }
        }
        var E;
        function K(ee, ae) {
          function oe() {
            return new h(function(ve, Q) {
              P(ee, ae, ve, Q);
            });
          }
          return E = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          E ? E.then(
            oe,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            oe
          ) : oe();
        }
        this._invoke = K;
      }
      C(d.prototype), N(d.prototype, z, function() {
        return this;
      }), n.AsyncIterator = d, n.async = function(y, h, P, E, K) {
        K === void 0 && (K = Promise);
        var ee = new d(
          X(y, h, P, E),
          K
        );
        return n.isGeneratorFunction(h) ? ee : ee.next().then(function(ae) {
          return ae.done ? ae.value : ee.next();
        });
      };
      function G(y, h, P) {
        var E = A;
        return function(ee, ae) {
          if (E === M)
            throw new Error("Generator is already running");
          if (E === B) {
            if (ee === "throw")
              throw ae;
            return u();
          }
          for (P.method = ee, P.arg = ae; ; ) {
            var oe = P.delegate;
            if (oe) {
              var ve = L(oe, P);
              if (ve) {
                if (ve === I)
                  continue;
                return ve;
              }
            }
            if (P.method === "next")
              P.sent = P._sent = P.arg;
            else if (P.method === "throw") {
              if (E === A)
                throw E = B, P.arg;
              P.dispatchException(P.arg);
            } else
              P.method === "return" && P.abrupt("return", P.arg);
            E = M;
            var Q = F(y, h, P);
            if (Q.type === "normal") {
              if (E = P.done ? B : v, Q.arg === I)
                continue;
              return {
                value: Q.arg,
                done: P.done
              };
            } else
              Q.type === "throw" && (E = B, P.method = "throw", P.arg = Q.arg);
          }
        };
      }
      function L(y, h) {
        var P = y.iterator[h.method];
        if (P === o) {
          if (h.delegate = null, h.method === "throw") {
            if (y.iterator.return && (h.method = "return", h.arg = o, L(y, h), h.method === "throw"))
              return I;
            h.method = "throw", h.arg = new TypeError(
              "The iterator does not provide a 'throw' method"
            );
          }
          return I;
        }
        var E = F(P, y.iterator, h.arg);
        if (E.type === "throw")
          return h.method = "throw", h.arg = E.arg, h.delegate = null, I;
        var K = E.arg;
        if (!K)
          return h.method = "throw", h.arg = new TypeError("iterator result is not an object"), h.delegate = null, I;
        if (K.done)
          h[y.resultName] = K.value, h.next = y.nextLoc, h.method !== "return" && (h.method = "next", h.arg = o);
        else
          return K;
        return h.delegate = null, I;
      }
      C(m), N(m, q, "Generator"), N(m, c, function() {
        return this;
      }), N(m, "toString", function() {
        return "[object Generator]";
      });
      function g(y) {
        var h = { tryLoc: y[0] };
        1 in y && (h.catchLoc = y[1]), 2 in y && (h.finallyLoc = y[2], h.afterLoc = y[3]), this.tryEntries.push(h);
      }
      function V(y) {
        var h = y.completion || {};
        h.type = "normal", delete h.arg, y.completion = h;
      }
      function U(y) {
        this.tryEntries = [{ tryLoc: "root" }], y.forEach(g, this), this.reset(!0);
      }
      n.keys = function(y) {
        var h = [];
        for (var P in y)
          h.push(P);
        return h.reverse(), function E() {
          for (; h.length; ) {
            var K = h.pop();
            if (K in y)
              return E.value = K, E.done = !1, E;
          }
          return E.done = !0, E;
        };
      };
      function Z(y) {
        if (y) {
          var h = y[c];
          if (h)
            return h.call(y);
          if (typeof y.next == "function")
            return y;
          if (!isNaN(y.length)) {
            var P = -1, E = function K() {
              for (; ++P < y.length; )
                if (a.call(y, P))
                  return K.value = y[P], K.done = !1, K;
              return K.value = o, K.done = !0, K;
            };
            return E.next = E;
          }
        }
        return { next: u };
      }
      n.values = Z;
      function u() {
        return { value: o, done: !0 };
      }
      return U.prototype = {
        constructor: U,
        reset: function(y) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = o, this.done = !1, this.delegate = null, this.method = "next", this.arg = o, this.tryEntries.forEach(V), !y)
            for (var h in this)
              h.charAt(0) === "t" && a.call(this, h) && !isNaN(+h.slice(1)) && (this[h] = o);
        },
        stop: function() {
          this.done = !0;
          var y = this.tryEntries[0], h = y.completion;
          if (h.type === "throw")
            throw h.arg;
          return this.rval;
        },
        dispatchException: function(y) {
          if (this.done)
            throw y;
          var h = this;
          function P(ve, Q) {
            return ee.type = "throw", ee.arg = y, h.next = ve, Q && (h.method = "next", h.arg = o), !!Q;
          }
          for (var E = this.tryEntries.length - 1; E >= 0; --E) {
            var K = this.tryEntries[E], ee = K.completion;
            if (K.tryLoc === "root")
              return P("end");
            if (K.tryLoc <= this.prev) {
              var ae = a.call(K, "catchLoc"), oe = a.call(K, "finallyLoc");
              if (ae && oe) {
                if (this.prev < K.catchLoc)
                  return P(K.catchLoc, !0);
                if (this.prev < K.finallyLoc)
                  return P(K.finallyLoc);
              } else if (ae) {
                if (this.prev < K.catchLoc)
                  return P(K.catchLoc, !0);
              } else if (oe) {
                if (this.prev < K.finallyLoc)
                  return P(K.finallyLoc);
              } else
                throw new Error("try statement without catch or finally");
            }
          }
        },
        abrupt: function(y, h) {
          for (var P = this.tryEntries.length - 1; P >= 0; --P) {
            var E = this.tryEntries[P];
            if (E.tryLoc <= this.prev && a.call(E, "finallyLoc") && this.prev < E.finallyLoc) {
              var K = E;
              break;
            }
          }
          K && (y === "break" || y === "continue") && K.tryLoc <= h && h <= K.finallyLoc && (K = null);
          var ee = K ? K.completion : {};
          return ee.type = y, ee.arg = h, K ? (this.method = "next", this.next = K.finallyLoc, I) : this.complete(ee);
        },
        complete: function(y, h) {
          if (y.type === "throw")
            throw y.arg;
          return y.type === "break" || y.type === "continue" ? this.next = y.arg : y.type === "return" ? (this.rval = this.arg = y.arg, this.method = "return", this.next = "end") : y.type === "normal" && h && (this.next = h), I;
        },
        finish: function(y) {
          for (var h = this.tryEntries.length - 1; h >= 0; --h) {
            var P = this.tryEntries[h];
            if (P.finallyLoc === y)
              return this.complete(P.completion, P.afterLoc), V(P), I;
          }
        },
        catch: function(y) {
          for (var h = this.tryEntries.length - 1; h >= 0; --h) {
            var P = this.tryEntries[h];
            if (P.tryLoc === y) {
              var E = P.completion;
              if (E.type === "throw") {
                var K = E.arg;
                V(P);
              }
              return K;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(y, h, P) {
          return this.delegate = {
            iterator: Z(y),
            resultName: h,
            nextLoc: P
          }, this.method === "next" && (this.arg = o), I;
        }
      }, n;
    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      e.exports
    );
    try {
      regeneratorRuntime = r;
    } catch {
      typeof globalThis == "object" ? globalThis.regeneratorRuntime = r : Function("r", "regeneratorRuntime = r")(r);
    }
  }(dr)), dr.exports;
}
var hr, Rn;
function Ao() {
  return Rn || (Rn = 1, hr = ko()), hr;
}
var vr = { exports: {} }, Dn;
function Lo() {
  return Dn || (Dn = 1, function(e) {
    function r(t, a, o, l, c, z, q) {
      try {
        var N = t[z](q), X = N.value;
      } catch (F) {
        o(F);
        return;
      }
      N.done ? a(X) : Promise.resolve(X).then(l, c);
    }
    function n(t) {
      return function() {
        var a = this, o = arguments;
        return new Promise(function(l, c) {
          var z = t.apply(a, o);
          function q(X) {
            r(z, l, c, q, N, "next", X);
          }
          function N(X) {
            r(z, l, c, q, N, "throw", X);
          }
          q(void 0);
        });
      };
    }
    e.exports = n, e.exports.__esModule = !0, e.exports.default = e.exports;
  }(vr)), vr.exports;
}
var pr = {}, Bn;
function So() {
  return Bn || (Bn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var n = r(Be()), t = r(mt()), a = yt, o = Te(), l = function A(v) {
      (0, t.default)(this, A), this.colorProcessor(v);
      var M = {
        /**
         * @description Rgba value of graph fill color
         * @type {Array}
         * @default fill = [0, 0, 0, 1]
         */
        fill: [0, 0, 0, 1],
        /**
         * @description Rgba value of graph stroke color
         * @type {Array}
         * @default stroke = [0, 0, 0, 1]
         */
        stroke: [0, 0, 0, 0],
        /**
         * @description Opacity of graph
         * @type {Number}
         * @default opacity = 1
         */
        opacity: 1,
        /**
         * @description LineCap of Ctx
         * @type {String}
         * @default lineCap = null
         * @example lineCap = 'butt'|'round'|'square'
         */
        lineCap: null,
        /**
         * @description Linejoin of Ctx
         * @type {String}
         * @default lineJoin = null
         * @example lineJoin = 'round'|'bevel'|'miter'
         */
        lineJoin: null,
        /**
         * @description LineDash of Ctx
         * @type {Array}
         * @default lineDash = null
         * @example lineDash = [10, 10]
         */
        lineDash: null,
        /**
         * @description LineDashOffset of Ctx
         * @type {Number}
         * @default lineDashOffset = null
         * @example lineDashOffset = 10
         */
        lineDashOffset: null,
        /**
         * @description ShadowBlur of Ctx
         * @type {Number}
         * @default shadowBlur = 0
         */
        shadowBlur: 0,
        /**
         * @description Rgba value of graph shadow color
         * @type {Array}
         * @default shadowColor = [0, 0, 0, 0]
         */
        shadowColor: [0, 0, 0, 0],
        /**
         * @description ShadowOffsetX of Ctx
         * @type {Number}
         * @default shadowOffsetX = 0
         */
        shadowOffsetX: 0,
        /**
         * @description ShadowOffsetY of Ctx
         * @type {Number}
         * @default shadowOffsetY = 0
         */
        shadowOffsetY: 0,
        /**
         * @description LineWidth of Ctx
         * @type {Number}
         * @default lineWidth = 0
         */
        lineWidth: 0,
        /**
         * @description Center point of the graph
         * @type {Array}
         * @default graphCenter = null
         * @example graphCenter = [10, 10]
         */
        graphCenter: null,
        /**
         * @description Graph scale
         * @type {Array}
         * @default scale = null
         * @example scale = [1.5, 1.5]
         */
        scale: null,
        /**
         * @description Graph rotation degree
         * @type {Number}
         * @default rotate = null
         * @example rotate = 10
         */
        rotate: null,
        /**
         * @description Graph translate distance
         * @type {Array}
         * @default translate = null
         * @example translate = [10, 10]
         */
        translate: null,
        /**
         * @description Cursor status when hover
         * @type {String}
         * @default hoverCursor = 'pointer'
         * @example hoverCursor = 'default'|'pointer'|'auto'|'crosshair'|'move'|'wait'|...
         */
        hoverCursor: "pointer",
        /**
         * @description Font style of Ctx
         * @type {String}
         * @default fontStyle = 'normal'
         * @example fontStyle = 'normal'|'italic'|'oblique'
         */
        fontStyle: "normal",
        /**
         * @description Font varient of Ctx
         * @type {String}
         * @default fontVarient = 'normal'
         * @example fontVarient = 'normal'|'small-caps'
         */
        fontVarient: "normal",
        /**
         * @description Font weight of Ctx
         * @type {String|Number}
         * @default fontWeight = 'normal'
         * @example fontWeight = 'normal'|'bold'|'bolder'|'lighter'|Number
         */
        fontWeight: "normal",
        /**
         * @description Font size of Ctx
         * @type {Number}
         * @default fontSize = 10
         */
        fontSize: 10,
        /**
         * @description Font family of Ctx
         * @type {String}
         * @default fontFamily = 'Arial'
         */
        fontFamily: "Arial",
        /**
         * @description TextAlign of Ctx
         * @type {String}
         * @default textAlign = 'center'
         * @example textAlign = 'start'|'end'|'left'|'right'|'center'
         */
        textAlign: "center",
        /**
         * @description TextBaseline of Ctx
         * @type {String}
         * @default textBaseline = 'middle'
         * @example textBaseline = 'top'|'bottom'|'middle'|'alphabetic'|'hanging'
         */
        textBaseline: "middle",
        /**
         * @description The color used to create the gradient
         * @type {Array}
         * @default gradientColor = null
         * @example gradientColor = ['#000', '#111', '#222']
         */
        gradientColor: null,
        /**
         * @description Gradient type
         * @type {String}
         * @default gradientType = 'linear'
         * @example gradientType = 'linear' | 'radial'
         */
        gradientType: "linear",
        /**
         * @description Gradient params
         * @type {Array}
         * @default gradientParams = null
         * @example gradientParams = [x0, y0, x1, y1] (Linear Gradient)
         * @example gradientParams = [x0, y0, r0, x1, y1, r1] (Radial Gradient)
         */
        gradientParams: null,
        /**
         * @description When to use gradients
         * @type {String}
         * @default gradientWith = 'stroke'
         * @example gradientWith = 'stroke' | 'fill'
         */
        gradientWith: "stroke",
        /**
         * @description Gradient color stops
         * @type {String}
         * @default gradientStops = 'auto'
         * @example gradientStops = 'auto' | [0, .2, .3, 1]
         */
        gradientStops: "auto",
        /**
         * @description Extended color that supports animation transition
         * @type {Array|Object}
         * @default colors = null
         * @example colors = ['#000', '#111', '#222', 'red' ]
         * @example colors = { a: '#000', b: '#111' }
         */
        colors: null
      };
      Object.assign(this, M, v);
    };
    e.default = l, l.prototype.colorProcessor = function(A) {
      var v = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, M = v ? a.getColorFromRgbValue : a.getRgbaValue, B = ["fill", "stroke", "shadowColor"], I = Object.keys(A), W = I.filter(function(_) {
        return B.find(function(O) {
          return O === _;
        });
      });
      W.forEach(function(_) {
        return A[_] = M(A[_]);
      });
      var b = A.gradientColor, $ = A.colors;
      if (b && (A.gradientColor = b.map(function(_) {
        return M(_);
      })), $) {
        var f = Object.keys($);
        f.forEach(function(_) {
          return $[_] = M($[_]);
        });
      }
    }, l.prototype.initStyle = function(A) {
      c(A, this), q(A, this), N(A, this);
    };
    function c(A, v) {
      A.save();
      var M = v.graphCenter, B = v.rotate, I = v.scale, W = v.translate;
      M instanceof Array && (A.translate.apply(A, (0, n.default)(M)), B && A.rotate(B * Math.PI / 180), I instanceof Array && A.scale.apply(A, (0, n.default)(I)), W && A.translate.apply(A, (0, n.default)(W)), A.translate(-M[0], -M[1]));
    }
    var z = ["lineCap", "lineJoin", "lineDashOffset", "shadowOffsetX", "shadowOffsetY", "lineWidth", "textAlign", "textBaseline"];
    function q(A, v) {
      var M = v.fill, B = v.stroke, I = v.shadowColor, W = v.opacity;
      z.forEach(function(d) {
        (d || typeof d == "number") && (A[d] = v[d]);
      }), M = (0, n.default)(M), B = (0, n.default)(B), I = (0, n.default)(I), M[3] *= W, B[3] *= W, I[3] *= W, A.fillStyle = (0, a.getColorFromRgbValue)(M), A.strokeStyle = (0, a.getColorFromRgbValue)(B), A.shadowColor = (0, a.getColorFromRgbValue)(I);
      var b = v.lineDash, $ = v.shadowBlur;
      b && (b = b.map(function(d) {
        return d >= 0 ? d : 0;
      }), A.setLineDash(b)), typeof $ == "number" && (A.shadowBlur = $ > 0 ? $ : 1e-3);
      var f = v.fontStyle, _ = v.fontVarient, O = v.fontWeight, m = v.fontSize, C = v.fontFamily;
      A.font = f + " " + _ + " " + O + " " + m + "px " + C;
    }
    function N(A, v) {
      if (X(v)) {
        var M = v.gradientColor, B = v.gradientParams, I = v.gradientType, W = v.gradientWith, b = v.gradientStops, $ = v.opacity;
        M = M.map(function(_) {
          var O = _[3] * $, m = (0, n.default)(_);
          return m[3] = O, m;
        }), M = M.map(function(_) {
          return (0, a.getColorFromRgbValue)(_);
        }), b === "auto" && (b = F(M));
        var f = A["create".concat(I.slice(0, 1).toUpperCase() + I.slice(1), "Gradient")].apply(A, (0, n.default)(B));
        b.forEach(function(_, O) {
          return f.addColorStop(_, M[O]);
        }), A["".concat(W, "Style")] = f;
      }
    }
    function X(A) {
      var v = A.gradientColor, M = A.gradientParams, B = A.gradientType, I = A.gradientWith, W = A.gradientStops;
      if (!v || !M)
        return !1;
      if (v.length === 1)
        return console.warn("The gradient needs to provide at least two colors"), !1;
      if (B !== "linear" && B !== "radial")
        return console.warn("GradientType only supports linear or radial, current value is " + B), !1;
      var b = M.length;
      return B === "linear" && b !== 4 || B === "radial" && b !== 6 ? (console.warn("The expected length of gradientParams is " + (B === "linear" ? "4" : "6")), !1) : I !== "fill" && I !== "stroke" ? (console.warn("GradientWith only supports fill or stroke, current value is " + I), !1) : W !== "auto" && !(W instanceof Array) ? (console.warn("gradientStops only supports 'auto' or Number Array ([0, .5, 1]), current value is " + W), !1) : !0;
    }
    function F(A) {
      var v = 1 / (A.length - 1);
      return A.map(function(M, B) {
        return v * B;
      });
    }
    l.prototype.restoreTransform = function(A) {
      A.restore();
    }, l.prototype.update = function(A) {
      this.colorProcessor(A), Object.assign(this, A);
    }, l.prototype.getStyle = function() {
      var A = (0, o.deepClone)(this, !0);
      return this.colorProcessor(A, !0), A;
    };
  }(pr)), pr;
}
var gr = {}, mr = {}, Tn;
function Oo() {
  return Tn || (Tn = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = e.easeInOutBounce = e.easeOutBounce = e.easeInBounce = e.easeInOutElastic = e.easeOutElastic = e.easeInElastic = e.easeInOutBack = e.easeOutBack = e.easeInBack = e.easeInOutQuint = e.easeOutQuint = e.easeInQuint = e.easeInOutQuart = e.easeOutQuart = e.easeInQuart = e.easeInOutCubic = e.easeOutCubic = e.easeInCubic = e.easeInOutQuad = e.easeOutQuad = e.easeInQuad = e.easeInOutSine = e.easeOutSine = e.easeInSine = e.linear = void 0;
    var r = [[[0, 1], "", [0.33, 0.67]], [[1, 0], [0.67, 0.33]]];
    e.linear = r;
    var n = [[[0, 1]], [[0.538, 0.564], [0.169, 0.912], [0.88, 0.196]], [[1, 0]]];
    e.easeInSine = n;
    var t = [[[0, 1]], [[0.444, 0.448], [0.169, 0.736], [0.718, 0.16]], [[1, 0]]];
    e.easeOutSine = t;
    var a = [[[0, 1]], [[0.5, 0.5], [0.2, 1], [0.8, 0]], [[1, 0]]];
    e.easeInOutSine = a;
    var o = [[[0, 1]], [[0.55, 0.584], [0.231, 0.904], [0.868, 0.264]], [[1, 0]]];
    e.easeInQuad = o;
    var l = [[[0, 1]], [[0.413, 0.428], [0.065, 0.816], [0.76, 0.04]], [[1, 0]]];
    e.easeOutQuad = l;
    var c = [[[0, 1]], [[0.5, 0.5], [0.3, 0.9], [0.7, 0.1]], [[1, 0]]];
    e.easeInOutQuad = c;
    var z = [[[0, 1]], [[0.679, 0.688], [0.366, 0.992], [0.992, 0.384]], [[1, 0]]];
    e.easeInCubic = z;
    var q = [[[0, 1]], [[0.321, 0.312], [8e-3, 0.616], [0.634, 8e-3]], [[1, 0]]];
    e.easeOutCubic = q;
    var N = [[[0, 1]], [[0.5, 0.5], [0.3, 1], [0.7, 0]], [[1, 0]]];
    e.easeInOutCubic = N;
    var X = [[[0, 1]], [[0.812, 0.74], [0.611, 0.988], [1.013, 0.492]], [[1, 0]]];
    e.easeInQuart = X;
    var F = [[[0, 1]], [[0.152, 0.244], [1e-3, 0.448], [0.285, -0.02]], [[1, 0]]];
    e.easeOutQuart = F;
    var A = [[[0, 1]], [[0.5, 0.5], [0.4, 1], [0.6, 0]], [[1, 0]]];
    e.easeInOutQuart = A;
    var v = [[[0, 1]], [[0.857, 0.856], [0.714, 1], [1, 0.712]], [[1, 0]]];
    e.easeInQuint = v;
    var M = [[[0, 1]], [[0.108, 0.2], [1e-3, 0.4], [0.214, -0.012]], [[1, 0]]];
    e.easeOutQuint = M;
    var B = [[[0, 1]], [[0.5, 0.5], [0.5, 1], [0.5, 0]], [[1, 0]]];
    e.easeInOutQuint = B;
    var I = [[[0, 1]], [[0.667, 0.896], [0.38, 1.184], [0.955, 0.616]], [[1, 0]]];
    e.easeInBack = I;
    var W = [[[0, 1]], [[0.335, 0.028], [0.061, 0.22], [0.631, -0.18]], [[1, 0]]];
    e.easeOutBack = W;
    var b = [[[0, 1]], [[0.5, 0.5], [0.4, 1.4], [0.6, -0.4]], [[1, 0]]];
    e.easeInOutBack = b;
    var $ = [[[0, 1]], [[0.474, 0.964], [0.382, 0.988], [0.557, 0.952]], [[0.619, 1.076], [0.565, 1.088], [0.669, 1.08]], [[0.77, 0.916], [0.712, 0.924], [0.847, 0.904]], [[0.911, 1.304], [0.872, 1.316], [0.961, 1.34]], [[1, 0]]];
    e.easeInElastic = $;
    var f = [[[0, 1]], [[0.073, -0.32], [0.034, -0.328], [0.104, -0.344]], [[0.191, 0.092], [0.11, 0.06], [0.256, 0.08]], [[0.31, -0.076], [0.26, -0.068], [0.357, -0.076]], [[0.432, 0.032], [0.362, 0.028], [0.683, -4e-3]], [[1, 0]]];
    e.easeOutElastic = f;
    var _ = [[[0, 1]], [[0.21, 0.94], [0.167, 0.884], [0.252, 0.98]], [[0.299, 1.104], [0.256, 1.092], [0.347, 1.108]], [[0.5, 0.496], [0.451, 0.672], [0.548, 0.324]], [[0.696, -0.108], [0.652, -0.112], [0.741, -0.124]], [[0.805, 0.064], [0.756, 0.012], [0.866, 0.096]], [[1, 0]]];
    e.easeInOutElastic = _;
    var O = [[[0, 1]], [[0.148, 1], [0.075, 0.868], [0.193, 0.848]], [[0.326, 1], [0.276, 0.836], [0.405, 0.712]], [[0.6, 1], [0.511, 0.708], [0.671, 0.348]], [[1, 0]]];
    e.easeInBounce = O;
    var m = [[[0, 1]], [[0.357, 4e-3], [0.27, 0.592], [0.376, 0.252]], [[0.604, -4e-3], [0.548, 0.312], [0.669, 0.184]], [[0.82, 0], [0.749, 0.184], [0.905, 0.132]], [[1, 0]]];
    e.easeOutBounce = m;
    var C = [[[0, 1]], [[0.102, 1], [0.05, 0.864], [0.117, 0.86]], [[0.216, 0.996], [0.208, 0.844], [0.227, 0.808]], [[0.347, 0.996], [0.343, 0.8], [0.48, 0.292]], [[0.635, 4e-3], [0.511, 0.676], [0.656, 0.208]], [[0.787, 0], [0.76, 0.2], [0.795, 0.144]], [[0.905, -4e-3], [0.899, 0.164], [0.944, 0.144]], [[1, 0]]];
    e.easeInOutBounce = C;
    var d = /* @__PURE__ */ new Map([["linear", r], ["easeInSine", n], ["easeOutSine", t], ["easeInOutSine", a], ["easeInQuad", o], ["easeOutQuad", l], ["easeInOutQuad", c], ["easeInCubic", z], ["easeOutCubic", q], ["easeInOutCubic", N], ["easeInQuart", X], ["easeOutQuart", F], ["easeInOutQuart", A], ["easeInQuint", v], ["easeOutQuint", M], ["easeInOutQuint", B], ["easeInBack", I], ["easeOutBack", W], ["easeInOutBack", b], ["easeInElastic", $], ["easeOutElastic", f], ["easeInOutElastic", _], ["easeInBounce", O], ["easeOutBounce", m], ["easeInOutBounce", C]]);
    e.default = d;
  }(mr)), mr;
}
var Fn;
function Go() {
  return Fn || (Fn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.transition = l, e.injectNewCurve = b, e.default = void 0;
    var n = r(Fe()), t = r(Ee()), a = r(Oo()), o = "linear";
    function l(f) {
      var _ = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, O = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, m = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30, C = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
      if (!c.apply(void 0, arguments))
        return !1;
      try {
        var d = z(f), G = q(d, m);
        return !C || typeof O == "number" ? v(_, O, G) : W(_, O, G);
      } catch {
        return console.warn("Transition parameter may be abnormal!"), [O];
      }
    }
    function c(f) {
      var _ = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, O = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, m = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30;
      if (!f || _ === !1 || O === !1 || !m)
        return console.error("transition: Missing Parameters!"), !1;
      if ((0, t.default)(_) !== (0, t.default)(O))
        return console.error("transition: Inconsistent Status Types!"), !1;
      var C = (0, t.default)(O);
      return C === "string" || C === "boolean" || !f.length ? (console.error("transition: Unsupported Data Type of State!"), !1) : (!a.default.has(f) && !(f instanceof Array) && console.warn("transition: Transition curve not found, default curve will be used!"), !0);
    }
    function z(f) {
      var _ = "";
      return a.default.has(f) ? _ = a.default.get(f) : f instanceof Array ? _ = f : _ = a.default.get(o), _;
    }
    function q(f, _) {
      var O = 1 / (_ - 1), m = new Array(_).fill(0).map(function(d, G) {
        return G * O;
      }), C = m.map(function(d) {
        return N(f, d);
      });
      return C;
    }
    function N(f, _) {
      var O = X(f, _), m = F(O, _);
      return A(O, m);
    }
    function X(f, _) {
      var O = f.length - 1, m = "", C = "";
      f.findIndex(function(V, U) {
        if (U !== O) {
          m = V, C = f[U + 1];
          var Z = m[0][0], u = C[0][0];
          return _ >= Z && _ < u;
        }
      });
      var d = m[0], G = m[2] || m[0], L = C[1] || C[0], g = C[0];
      return [d, G, L, g];
    }
    function F(f, _) {
      var O = f[0][0], m = f[3][0], C = m - O, d = _ - O;
      return d / C;
    }
    function A(f, _) {
      var O = (0, n.default)(f, 4), m = (0, n.default)(O[0], 2), C = m[1], d = (0, n.default)(O[1], 2), G = d[1], L = (0, n.default)(O[2], 2), g = L[1], V = (0, n.default)(O[3], 2), U = V[1], Z = Math.pow, u = 1 - _, y = C * Z(u, 3), h = 3 * G * _ * Z(u, 2), P = 3 * g * Z(_, 2) * u, E = U * Z(_, 3);
      return 1 - (y + h + P + E);
    }
    function v(f, _, O) {
      var m = "object";
      return typeof f == "number" && (m = "number"), f instanceof Array && (m = "array"), m === "number" ? M(f, _, O) : m === "array" ? B(f, _, O) : m === "object" ? I(f, _, O) : O.map(function(C) {
        return _;
      });
    }
    function M(f, _, O) {
      var m = _ - f;
      return O.map(function(C) {
        return f + m * C;
      });
    }
    function B(f, _, O) {
      var m = _.map(function(C, d) {
        return typeof C != "number" ? !1 : C - f[d];
      });
      return O.map(function(C) {
        return m.map(function(d, G) {
          return d === !1 ? _[G] : f[G] + d * C;
        });
      });
    }
    function I(f, _, O) {
      var m = Object.keys(_), C = m.map(function(L) {
        return f[L];
      }), d = m.map(function(L) {
        return _[L];
      }), G = B(C, d, O);
      return G.map(function(L) {
        var g = {};
        return L.forEach(function(V, U) {
          return g[m[U]] = V;
        }), g;
      });
    }
    function W(f, _, O) {
      var m = v(f, _, O), C = function(g) {
        var V = f[g], U = _[g];
        if ((0, t.default)(U) !== "object")
          return "continue";
        var Z = W(V, U, O);
        m.forEach(function(u, y) {
          return u[g] = Z[y];
        });
      };
      for (var d in _)
        var G = C(d);
      return m;
    }
    function b(f, _) {
      if (!f || !_) {
        console.error("InjectNewCurve Missing Parameters!");
        return;
      }
      a.default.set(f, _);
    }
    var $ = l;
    e.default = $;
  }(gr)), gr;
}
var Nn;
function Mo() {
  return Nn || (Nn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var n = r(Ao()), t = r(Lo()), a = r(Ee()), o = r(Be()), l = r(mt()), c = r(So()), z = r(Go()), q = Te(), N = function F(A, v) {
      (0, l.default)(this, F), v = (0, q.deepClone)(v, !0);
      var M = {
        /**
         * @description Weather to render graph
         * @type {Boolean}
         * @default visible = true
         */
        visible: !0,
        /**
         * @description Whether to enable drag
         * @type {Boolean}
         * @default drag = false
         */
        drag: !1,
        /**
         * @description Whether to enable hover
         * @type {Boolean}
         * @default hover = false
         */
        hover: !1,
        /**
         * @description Graph rendering index
         *  Give priority to index high graph in rendering
         * @type {Number}
         * @example index = 1
         */
        index: 1,
        /**
         * @description Animation delay time(ms)
         * @type {Number}
         * @default animationDelay = 0
         */
        animationDelay: 0,
        /**
         * @description Number of animation frames
         * @type {Number}
         * @default animationFrame = 30
         */
        animationFrame: 30,
        /**
         * @description Animation dynamic curve (Supported by transition)
         * @type {String}
         * @default animationCurve = 'linear'
         * @link https://github.com/jiaming743/Transition
         */
        animationCurve: "linear",
        /**
         * @description Weather to pause graph animation
         * @type {Boolean}
         * @default animationPause = false
         */
        animationPause: !1,
        /**
         * @description Rectangular hover detection zone
         *  Use this method for hover detection first
         * @type {Null|Array}
         * @default hoverRect = null
         * @example hoverRect = [0, 0, 100, 100] // [Rect start x, y, Rect width, height]
         */
        hoverRect: null,
        /**
         * @description Mouse enter event handler
         * @type {Function|Null}
         * @default mouseEnter = null
         */
        mouseEnter: null,
        /**
         * @description Mouse outer event handler
         * @type {Function|Null}
         * @default mouseOuter = null
         */
        mouseOuter: null,
        /**
         * @description Mouse click event handler
         * @type {Function|Null}
         * @default click = null
         */
        click: null
      }, B = {
        status: "static",
        animationRoot: [],
        animationKeys: [],
        animationFrameState: [],
        cache: {}
      };
      v.shape || (v.shape = {}), v.style || (v.style = {});
      var I = Object.assign({}, A.shape, v.shape);
      Object.assign(M, v, B), Object.assign(this, A, M), this.shape = I, this.style = new c.default(v.style), this.addedProcessor();
    };
    e.default = N, N.prototype.addedProcessor = function() {
      typeof this.setGraphCenter == "function" && this.setGraphCenter(null, this), typeof this.added == "function" && this.added(this);
    }, N.prototype.drawProcessor = function(F, A) {
      var v = F.ctx;
      A.style.initStyle(v), typeof this.beforeDraw == "function" && this.beforeDraw(this, F), A.draw(F, A), typeof this.drawed == "function" && this.drawed(this, F), A.style.restoreTransform(v);
    }, N.prototype.hoverCheckProcessor = function(F, A) {
      var v = A.hoverRect, M = A.style, B = A.hoverCheck, I = M.graphCenter, W = M.rotate, b = M.scale, $ = M.translate;
      return I && (W && (F = (0, q.getRotatePointPos)(-W, F, I)), b && (F = (0, q.getScalePointPos)(b.map(function(f) {
        return 1 / f;
      }), F, I)), $ && (F = (0, q.getTranslatePointPos)($.map(function(f) {
        return f * -1;
      }), F))), v ? q.checkPointIsInRect.apply(void 0, [F].concat((0, o.default)(v))) : B(F, this);
    }, N.prototype.moveProcessor = function(F) {
      this.move(F, this), typeof this.beforeMove == "function" && this.beforeMove(F, this), typeof this.setGraphCenter == "function" && this.setGraphCenter(F, this), typeof this.moved == "function" && this.moved(F, this);
    }, N.prototype.attr = function(F) {
      var A = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      if (!F || A === void 0)
        return !1;
      var v = (0, a.default)(this[F]) === "object";
      v && (A = (0, q.deepClone)(A, !0));
      var M = this.render;
      F === "style" ? this.style.update(A) : v ? Object.assign(this[F], A) : this[F] = A, F === "index" && M.sortGraphsByIndex(), M.drawAllGraph();
    }, N.prototype.animation = /* @__PURE__ */ function() {
      var F = (0, t.default)(
        /* @__PURE__ */ n.default.mark(function A(v, M) {
          var B, I, W, b, $, f, _, O, m, C = arguments;
          return n.default.wrap(function(G) {
            for (; ; )
              switch (G.prev = G.next) {
                case 0:
                  if (B = C.length > 2 && C[2] !== void 0 ? C[2] : !1, !(v !== "shape" && v !== "style")) {
                    G.next = 4;
                    break;
                  }
                  return console.error("Only supported shape and style animation!"), G.abrupt("return");
                case 4:
                  if (M = (0, q.deepClone)(M, !0), v === "style" && this.style.colorProcessor(M), I = this[v], W = Object.keys(M), b = {}, W.forEach(function(L) {
                    return b[L] = I[L];
                  }), $ = this.animationFrame, f = this.animationCurve, _ = this.animationDelay, O = (0, z.default)(f, b, M, $, !0), this.animationRoot.push(I), this.animationKeys.push(W), this.animationFrameState.push(O), !B) {
                    G.next = 17;
                    break;
                  }
                  return G.abrupt("return");
                case 17:
                  if (!(_ > 0)) {
                    G.next = 20;
                    break;
                  }
                  return G.next = 20, X(_);
                case 20:
                  return m = this.render, G.abrupt("return", new Promise(
                    /* @__PURE__ */ function() {
                      var L = (0, t.default)(
                        /* @__PURE__ */ n.default.mark(function g(V) {
                          return n.default.wrap(function(Z) {
                            for (; ; )
                              switch (Z.prev = Z.next) {
                                case 0:
                                  return Z.next = 2, m.launchAnimation();
                                case 2:
                                  V();
                                case 3:
                                case "end":
                                  return Z.stop();
                              }
                          }, g);
                        })
                      );
                      return function(g) {
                        return L.apply(this, arguments);
                      };
                    }()
                  ));
                case 22:
                case "end":
                  return G.stop();
              }
          }, A, this);
        })
      );
      return function(A, v) {
        return F.apply(this, arguments);
      };
    }(), N.prototype.turnNextAnimationFrame = function(F) {
      var A = this.animationDelay, v = this.animationRoot, M = this.animationKeys, B = this.animationFrameState, I = this.animationPause;
      I || Date.now() - F < A || (v.forEach(function(W, b) {
        M[b].forEach(function($) {
          W[$] = B[b][0][$];
        });
      }), B.forEach(function(W, b) {
        W.shift();
        var $ = W.length === 0;
        $ && (v[b] = null), $ && (M[b] = null);
      }), this.animationFrameState = B.filter(function(W) {
        return W.length;
      }), this.animationRoot = v.filter(function(W) {
        return W;
      }), this.animationKeys = M.filter(function(W) {
        return W;
      }));
    }, N.prototype.animationEnd = function() {
      var F = this.animationFrameState, A = this.animationKeys, v = this.animationRoot, M = this.render;
      return v.forEach(function(B, I) {
        var W = A[I], b = F[I].pop();
        W.forEach(function($) {
          return B[$] = b[$];
        });
      }), this.animationFrameState = [], this.animationKeys = [], this.animationRoot = [], M.drawAllGraph();
    }, N.prototype.pauseAnimation = function() {
      this.attr("animationPause", !0);
    }, N.prototype.playAnimation = function() {
      var F = this.render;
      return this.attr("animationPause", !1), new Promise(
        /* @__PURE__ */ function() {
          var A = (0, t.default)(
            /* @__PURE__ */ n.default.mark(function v(M) {
              return n.default.wrap(function(I) {
                for (; ; )
                  switch (I.prev = I.next) {
                    case 0:
                      return I.next = 2, F.launchAnimation();
                    case 2:
                      M();
                    case 3:
                    case "end":
                      return I.stop();
                  }
              }, v);
            })
          );
          return function(v) {
            return A.apply(this, arguments);
          };
        }()
      );
    }, N.prototype.delProcessor = function(F) {
      var A = this, v = F.graphs, M = v.findIndex(function(B) {
        return B === A;
      });
      M !== -1 && (typeof this.beforeDelete == "function" && this.beforeDelete(this), v.splice(M, 1, null), typeof this.deleted == "function" && this.deleted(this));
    };
    function X(F) {
      return new Promise(function(A) {
        setTimeout(A, F);
      });
    }
  }(fr)), fr;
}
var Wn;
function Ro() {
  return Wn || (Wn = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var n = r(Ve()), t = r(Be()), a = r(mt()), o = r(yt), l = r(sn()), c = Te(), z = r(un()), q = r(Mo());
    function N(W, b) {
      var $ = Object.keys(W);
      if (Object.getOwnPropertySymbols) {
        var f = Object.getOwnPropertySymbols(W);
        b && (f = f.filter(function(_) {
          return Object.getOwnPropertyDescriptor(W, _).enumerable;
        })), $.push.apply($, f);
      }
      return $;
    }
    function X(W) {
      for (var b = 1; b < arguments.length; b++) {
        var $ = arguments[b] != null ? arguments[b] : {};
        b % 2 ? N($, !0).forEach(function(f) {
          (0, n.default)(W, f, $[f]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(W, Object.getOwnPropertyDescriptors($)) : N($).forEach(function(f) {
          Object.defineProperty(W, f, Object.getOwnPropertyDescriptor($, f));
        });
      }
      return W;
    }
    var F = function W(b) {
      if ((0, a.default)(this, W), !b) {
        console.error("CRender Missing parameters!");
        return;
      }
      var $ = b.getContext("2d"), f = b.clientWidth, _ = b.clientHeight, O = [f, _];
      b.setAttribute("width", f), b.setAttribute("height", _), this.ctx = $, this.area = O, this.animationStatus = !1, this.graphs = [], this.color = o.default, this.bezierCurve = l.default, b.addEventListener("mousedown", M.bind(this)), b.addEventListener("mousemove", B.bind(this)), b.addEventListener("mouseup", I.bind(this));
    };
    e.default = F, F.prototype.clearArea = function() {
      var W, b = this.area;
      (W = this.ctx).clearRect.apply(W, [0, 0].concat((0, t.default)(b)));
    }, F.prototype.add = function() {
      var W = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, b = W.name;
      if (!b) {
        console.error("add Missing parameters!");
        return;
      }
      var $ = z.default.get(b);
      if (!$) {
        console.warn("No corresponding graph configuration found!");
        return;
      }
      var f = new q.default($, W);
      if (f.validator(f))
        return f.render = this, this.graphs.push(f), this.sortGraphsByIndex(), this.drawAllGraph(), f;
    }, F.prototype.sortGraphsByIndex = function() {
      var W = this.graphs;
      W.sort(function(b, $) {
        if (b.index > $.index)
          return 1;
        if (b.index === $.index)
          return 0;
        if (b.index < $.index)
          return -1;
      });
    }, F.prototype.delGraph = function(W) {
      typeof W.delProcessor == "function" && (W.delProcessor(this), this.graphs = this.graphs.filter(function(b) {
        return b;
      }), this.drawAllGraph());
    }, F.prototype.delAllGraph = function() {
      var W = this;
      this.graphs.forEach(function(b) {
        return b.delProcessor(W);
      }), this.graphs = this.graphs.filter(function(b) {
        return b;
      }), this.drawAllGraph();
    }, F.prototype.drawAllGraph = function() {
      var W = this;
      this.clearArea(), this.graphs.filter(function(b) {
        return b && b.visible;
      }).forEach(function(b) {
        return b.drawProcessor(W, b);
      });
    }, F.prototype.launchAnimation = function() {
      var W = this, b = this.animationStatus;
      if (!b)
        return this.animationStatus = !0, new Promise(function($) {
          A.call(W, function() {
            W.animationStatus = !1, $();
          }, Date.now());
        });
    };
    function A(W, b) {
      var $ = this.graphs;
      if (!v($)) {
        W();
        return;
      }
      $.forEach(function(f) {
        return f.turnNextAnimationFrame(b);
      }), this.drawAllGraph(), requestAnimationFrame(A.bind(this, W, b));
    }
    function v(W) {
      return W.find(function(b) {
        return !b.animationPause && b.animationFrameState.length;
      });
    }
    function M(W) {
      var b = this.graphs, $ = b.find(function(f) {
        return f.status === "hover";
      });
      $ && ($.status = "active");
    }
    function B(W) {
      var b = W.offsetX, $ = W.offsetY, f = [b, $], _ = this.graphs, O = _.find(function(g) {
        return g.status === "active" || g.status === "drag";
      });
      if (O) {
        if (!O.drag)
          return;
        if (typeof O.move != "function") {
          console.error("No move method is provided, cannot be dragged!");
          return;
        }
        O.moveProcessor(W), O.status = "drag";
        return;
      }
      var m = _.find(function(g) {
        return g.status === "hover";
      }), C = _.filter(function(g) {
        return g.hover && (typeof g.hoverCheck == "function" || g.hoverRect);
      }), d = C.find(function(g) {
        return g.hoverCheckProcessor(f, g);
      });
      d ? document.body.style.cursor = d.style.hoverCursor : document.body.style.cursor = "default";
      var G = !1, L = !1;
      if (m && (G = typeof m.mouseOuter == "function"), d && (L = typeof d.mouseEnter == "function"), !(!d && !m)) {
        if (!d && m) {
          G && m.mouseOuter(W, m), m.status = "static";
          return;
        }
        if (!(d && d === m)) {
          if (d && !m) {
            L && d.mouseEnter(W, d), d.status = "hover";
            return;
          }
          d && m && d !== m && (G && m.mouseOuter(W, m), m.status = "static", L && d.mouseEnter(W, d), d.status = "hover");
        }
      }
    }
    function I(W) {
      var b = this.graphs, $ = b.find(function(_) {
        return _.status === "active";
      }), f = b.find(function(_) {
        return _.status === "drag";
      });
      $ && typeof $.click == "function" && $.click(W, $), b.forEach(function(_) {
        return _ && (_.status = "static");
      }), $ && ($.status = "hover"), f && (f.status = "hover");
    }
    F.prototype.clone = function(W) {
      var b = W.style.getStyle(), $ = X({}, W, {
        style: b
      });
      return delete $.render, $ = (0, c.deepClone)($, !0), this.add($);
    };
  }(Ht)), Ht;
}
(function(e) {
  var r = we;
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "CRender", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "extendNewGraph", {
    enumerable: !0,
    get: function() {
      return t.extendNewGraph;
    }
  }), e.default = void 0;
  var n = r(Ro()), t = un(), a = n.default;
  e.default = a;
})(jt);
const Aa = /* @__PURE__ */ $a(jt);
const Do = { class: "dv-water-pond-level" }, Bo = { key: 0 }, To = ["id"], Fo = ["offset", "stop-color"], No = ["stroke", "fill", "x", "y"], Wo = ["cx", "cy", "rx", "ry", "stroke"], jo = ["rx", "ry", "width", "height", "stroke"], Eo = {
  __name: "index",
  props: {
    config: Object,
    default: () => ({})
  },
  setup(e) {
    const r = e, n = He(), t = me(null), a = Pe({
      gradientId: `water-level-pond-${n}`,
      defaultConfig: {
        /**
             * @description Data
             * @type {Array<Number>}
             * @default data = []
             * @example data = [60, 40]
             */
        data: [],
        /**
             * @description Shape of wanter level pond
             * @type {String}
             * @default shape = 'rect'
             * @example shape = 'rect' | 'roundRect' | 'round'
             */
        shape: "rect",
        /**
             * @description Water wave number
             * @type {Number}
             * @default waveNum = 3
             */
        waveNum: 3,
        /**
             * @description Water wave height (px)
             * @type {Number}
             * @default waveHeight = 40
             */
        waveHeight: 40,
        /**
             * @description Wave opacity
             * @type {Number}
             * @default waveOpacity = 0.4
             */
        waveOpacity: 0.4,
        /**
             * @description Colors (hex|rgb|rgba|color keywords)
             * @type {Array<String>}
             * @default colors = ['#00BAFF', '#3DE7C9']
             * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
             */
        colors: ["#3DE7C9", "#00BAFF"],
        /**
             * @description Formatter
             * @type {String}
             * @default formatter = '{value}%'
             */
        formatter: "{value}%"
      },
      mergedConfig: {},
      renderer: null,
      svgBorderGradient: [],
      details: "",
      waves: [],
      animation: !1
    }), o = be(() => {
      const { shape: b } = a.mergedConfig;
      return b === "round" ? "50%" : b === "rect" ? "0" : b === "roundRect" ? "10px" : "0";
    }), l = be(() => {
      const { shape: b } = a.mergedConfig;
      return b || "rect";
    });
    ke(() => r.config, () => {
      a.renderer.delAllGraph(), a.waves = [], setTimeout(q, 0);
    }, {
      deep: !0
    }), Re(() => {
      c();
    }), ja(() => {
      a.renderer.delAllGraph(), a.waves = [];
    });
    function c() {
      z(), r.config && q();
    }
    function z() {
      a.renderer = new Aa(t.value);
    }
    function q() {
      N(), X(), F(), A(), W();
    }
    function N() {
      a.mergedConfig = Ce($e(a.defaultConfig, !0), r.config);
    }
    function X() {
      const { colors: b } = a.mergedConfig, f = 100 / (b.length - 1);
      a.svgBorderGradient = b.map((_, O) => [f * O, _]);
    }
    function F() {
      const { data: b, formatter: $ } = a.mergedConfig;
      if (!b.length) {
        a.details = "";
        return;
      }
      const f = Math.max(...b);
      a.details = $.replace("{value}", f);
    }
    function A() {
      const b = v(), $ = B();
      a.waves = b.map((f) => a.renderer.add({
        name: "smoothline",
        animationFrame: 300,
        shape: f,
        style: $,
        drawed: I
      }));
    }
    function v() {
      const { waveNum: b, waveHeight: $, data: f } = a.mergedConfig, [_, O] = a.renderer.area, m = b * 4 + 4, C = _ / b / 2;
      return f.map((d) => {
        let G = new Array(m).fill(0).map((L, g) => {
          const V = _ - C * g, U = (1 - d / 100) * O, Z = g % 2 === 0 ? U : U - $;
          return [V, Z];
        });
        return G = G.map((L) => M(L, [C * 2, 0])), { points: G };
      });
    }
    function M([b, $], [f, _]) {
      return [b + f, $ + _];
    }
    function B() {
      const b = a.renderer.area[1];
      return {
        gradientColor: a.mergedConfig.colors,
        gradientType: "linear",
        gradientParams: [0, 0, 0, b],
        gradientWith: "fill",
        opacity: a.mergedConfig.waveOpacity,
        translate: [0, 0]
      };
    }
    function I({ shape: { points: b } }, { ctx: $, area: f }) {
      const _ = b[0], O = b.slice(-1)[0], m = f[1];
      $.lineTo(O[0], m), $.lineTo(_[0], m), $.closePath(), $.fill();
    }
    async function W(b = 1) {
      if (a.animation)
        return;
      a.animation = !0;
      const $ = a.renderer.area[0];
      a.waves.forEach((f) => {
        f.attr("style", { translate: [0, 0] }), f.animation("style", {
          translate: [$, 0]
        }, !0);
      }), await a.renderer.launchAnimation(), a.animation = !1, a.renderer.graphs.length && W(b + 1);
    }
    return (b, $) => (le(), se("div", Do, [
      i(a).renderer ? (le(), se("svg", Bo, [
        ne("defs", null, [
          ne("linearGradient", {
            id: i(a).gradientId,
            x1: "0%",
            y1: "0%",
            x2: "0%",
            y2: "100%"
          }, [
            (le(!0), se(Ae, null, Se(i(a).svgBorderGradient, (f) => (le(), se("stop", {
              key: f[0],
              offset: f[0],
              "stop-color": f[1]
            }, null, 8, Fo))), 128))
          ], 8, To)
        ]),
        i(a).renderer ? (le(), se("text", {
          key: 0,
          stroke: `url(#${i(a).gradientId})`,
          fill: `url(#${i(a).gradientId})`,
          x: i(a).renderer.area[0] / 2 + 8,
          y: i(a).renderer.area[1] / 2 + 8
        }, We(i(a).details), 9, No)) : _e("", !0),
        !i(l) || i(l) === "round" ? (le(), se("ellipse", {
          key: 1,
          cx: i(a).renderer.area[0] / 2 + 8,
          cy: i(a).renderer.area[1] / 2 + 8,
          rx: i(a).renderer.area[0] / 2 + 5,
          ry: i(a).renderer.area[1] / 2 + 5,
          stroke: `url(#${i(a).gradientId})`
        }, null, 8, Wo)) : (le(), se("rect", {
          key: 2,
          x: "2",
          y: "2",
          rx: i(l) === "roundRect" ? 10 : 0,
          ry: i(l) === "roundRect" ? 10 : 0,
          width: i(a).renderer.area[0] + 12,
          height: i(a).renderer.area[1] + 12,
          stroke: `url(#${i(a).gradientId})`
        }, null, 8, jo))
      ])) : _e("", !0),
      ne("canvas", {
        ref_key: "waterPondLevel",
        ref: t,
        style: Me(`border-radius: ${i(o)};`)
      }, null, 4)
    ]));
  }
}, yr = {
  install(e) {
    e.component("DvWaterLevelPond", Eo);
  }
};
const zo = {}, qo = { class: "dv-loading" }, Io = /* @__PURE__ */ Bt('<svg width="50px" height="50px"><circle cx="25" cy="25" r="20" fill="transparent" stroke-width="3" stroke-dasharray="31.415, 31.415" stroke="#02bcfe" stroke-linecap="round"><animateTransform attributeName="transform" type="rotate" values="0, 25 25;360, 25 25" dur="1.5s" repeatCount="indefinite"></animateTransform><animate attributeName="stroke" values="#02bcfe;#3be6cb;#02bcfe" dur="3s" repeatCount="indefinite"></animate></circle><circle cx="25" cy="25" r="10" fill="transparent" stroke-width="3" stroke-dasharray="15.7, 15.7" stroke="#3be6cb" stroke-linecap="round"><animateTransform attributeName="transform" type="rotate" values="360, 25 25;0, 25 25" dur="1.5s" repeatCount="indefinite"></animateTransform><animate attributeName="stroke" values="#3be6cb;#02bcfe;#3be6cb" dur="3s" repeatCount="indefinite"></animate></circle></svg>', 1), Ho = { class: "loading-tip" };
function Vo(e, r) {
  return le(), se("div", qo, [
    Io,
    ne("div", Ho, [
      Ge(e.$slots, "default")
    ])
  ]);
}
const Uo = /* @__PURE__ */ Ke(zo, [["render", Vo]]), br = {
  install(e) {
    e.component("DvLoading", Uo);
  }
};
const Xo = ["width", "height"], Qo = ["id"], Yo = /* @__PURE__ */ ne("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1), Ko = /* @__PURE__ */ ne("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1), Jo = [
  Yo,
  Ko
], Zo = ["id"], el = /* @__PURE__ */ ne("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1), tl = /* @__PURE__ */ ne("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1), rl = [
  el,
  tl
], nl = ["id", "cx", "cy"], al = ["values", "dur"], il = ["dur"], ol = ["id"], ll = ["xlink:href", "fill"], sl = ["xlink:href", "fill", "mask"], ul = ["xlink:href", "width", "height", "x", "y"], cl = ["fill", "x", "y"], fl = ["id", "d"], dl = ["xlink:href", "stroke-width", "stroke"], hl = ["id"], vl = ["r", "fill"], pl = ["dur", "path"], gl = ["xlink:href", "stroke-width", "stroke", "mask"], ml = ["from", "to", "dur"], yl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    dev: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = e, n = He(), t = me(null), { width: a, height: o } = xe(t, q, z), l = Pe({
      unique: Math.random(),
      flylineGradientId: `flyline-gradient-id-${n}`,
      haloGradientId: `halo-gradient-id-${n}`,
      /**
           * @description Type Declaration
           *
           * interface Halo {
           *    show?: boolean
           *    duration?: [number, number]
           *    color?: string
           *    radius?: number
           * }
           *
           * interface Text {
           *    show?: boolean
           *    offset?: [number, number]
           *    color?: string
           *    fontSize?: number
           * }
           *
           * interface Icon {
           *    show?: boolean
           *    src?: string
           *    width?: number
           *    height?: number
           * }
           *
           * interface Point {
           *    name: string
           *    coordinate: [number, number]
           *    halo?: Halo
           *    text?: Text
           *    icon?: Icon
           * }
           *
           * interface Line {
           *    width?: number
           *    color?: string
           *    orbitColor?: string
           *    duration?: [number, number]
           *    radius?: string
           * }
           *
           * interface Flyline extends Line {
           *    source: string
           *    target: string
           * }
           *
           * interface FlylineWithPath extends Flyline {
           *    d: string
           *    path: [[number, number], [number, number], [number, number]]
           *    key: string
           * }
           */
      defaultConfig: {
        /**
             * @description Flyline chart points
             * @type {FlylineChartPoint[]}
             * @default points = []
             */
        points: [],
        /**
             * @description Lines
             * @type {Flyline[]}
             * @default lines = []
             */
        lines: [],
        /**
             * @description Global halo configuration
             * @type {Halo}
             */
        halo: {
          /**
               * @description Whether to show halo
               * @type {Boolean}
               * @default show = false
               */
          show: !1,
          /**
               * @description Halo animation duration (1s = 10)
               * @type {[number, number]}
               */
          duration: [20, 30],
          /**
               * @description Halo color
               * @type {String}
               * @default color = '#fb7293'
               */
          color: "#fb7293",
          /**
               * @description Halo radius
               * @type {Number}
               * @default radius = 120
               */
          radius: 120
        },
        /**
             * @description Global text configuration
             * @type {Text}
             */
        text: {
          /**
               * @description Whether to show text
               * @type {Boolean}
               * @default show = false
               */
          show: !1,
          /**
               * @description Text offset
               * @type {[number, number]}
               * @default offset = [0, 15]
               */
          offset: [0, 15],
          /**
               * @description Text color
               * @type {String}
               * @default color = '#ffdb5c'
               */
          color: "#ffdb5c",
          /**
               * @description Text font size
               * @type {Number}
               * @default fontSize = 12
               */
          fontSize: 12
        },
        /**
             * @description Global icon configuration
             * @type {Icon}
             */
        icon: {
          /**
               * @description Whether to show icon
               * @type {Boolean}
               * @default show = false
               */
          show: !1,
          /**
               * @description Icon src
               * @type {String}
               * @default src = ''
               */
          src: "",
          /**
               * @description Icon width
               * @type {Number}
               * @default width = 15
               */
          width: 15,
          /**
               * @description Icon height
               * @type {Number}
               * @default width = 15
               */
          height: 15
        },
        /**
             * @description Global line configuration
             * @type {Line}
             */
        line: {
          /**
               * @description Line width
               * @type {Number}
               * @default width = 1
               */
          width: 1,
          /**
               * @description Flyline color
               * @type {String}
               * @default color = '#ffde93'
               */
          color: "#ffde93",
          /**
               * @description Orbit color
               * @type {String}
               * @default orbitColor = 'rgba(103, 224, 227, .2)'
               */
          orbitColor: "rgba(103, 224, 227, .2)",
          /**
               * @description Flyline animation duration
               * @type {[number, number]}
               * @default duration = [20, 30]
               */
          duration: [20, 30],
          /**
               * @description Flyline radius
               * @type {Number}
               * @default radius = 100
               */
          radius: 100
        },
        /**
             * @description Back ground image url
             * @type {String}
             * @default bgImgSrc = ''
             */
        bgImgSrc: "",
        /**
             * @description K value
             * @type {Number}
             * @default k = -0.5
             * @example k = -1 ~ 1
             */
        k: -0.5,
        /**
             * @description Flyline curvature
             * @type {Number}
             * @default curvature = 5
             */
        curvature: 5,
        /**
             * @description Relative points position
             * @type {Boolean}
             * @default relative = true
             */
        relative: !0
      },
      /**
           * @description Fly line data
           * @type {FlylineWithPath[]}
           * @default flylines = []
           */
      flylines: [],
      /**
           * @description Fly line lengths
           * @type {Number[]}
           * @default flylineLengths = []
           */
      flylineLengths: [],
      /**
           * @description Fly line points
           * @default flylinePoints = []
           */
      flylinePoints: [],
      mergedConfig: null
    });
    let c;
    Re(() => {
      c = ma();
    }), ke(() => r.config, () => {
      N();
    }, {
      deep: !0
    });
    function z() {
      N();
    }
    function q() {
      N();
    }
    async function N() {
      X(), F(), A(), await I();
    }
    function X() {
      const b = Ce($e(l.defaultConfig, !0), r.config || {}), { points: $, lines: f, halo: _, text: O, icon: m, line: C } = b;
      b.points = $.map((d) => (d.halo = Ce($e(_, !0), d.halo || {}), d.text = Ce($e(O, !0), d.text || {}), d.icon = Ce($e(m, !0), d.icon || {}), d)), b.lines = f.map((d) => Ce($e(C, !0), d)), l.mergedConfig = b;
    }
    function F() {
      const { relative: b, points: $ } = l.mergedConfig;
      l.flylinePoints = $.map((f, _) => {
        const { coordinate: [O, m], halo: C, icon: d, text: G } = f;
        b && (f.coordinate = [O * a.value, m * o.value]), f.halo.time = ht(...C.duration) / 10;
        const { width: L, height: g } = d;
        f.icon.x = f.coordinate[0] - L / 2, f.icon.y = f.coordinate[1] - g / 2;
        const [V, U] = G.offset;
        return f.text.x = f.coordinate[0] + V, f.text.y = f.coordinate[1] + U, f.key = `${f.coordinate.toString()}${_}`, f;
      });
    }
    function A() {
      const { points: b, lines: $ } = l.mergedConfig;
      l.flylines = $.map((f) => {
        const { source: _, target: O, duration: m } = f, C = b.find(({ name: U }) => U === _).coordinate, d = b.find(({ name: U }) => U === O).coordinate, G = v(C, d).map((U) => U.map((Z) => parseFloat(Z.toFixed(10)))), L = `M${G[0].toString()} Q${G[1].toString()} ${G[2].toString()}`, g = `path${G.toString()}`, V = ht(...m) / 10;
        return { ...f, path: G, key: g, d: L, time: V };
      });
    }
    function v(b, $) {
      const f = M(b, $);
      return [b, f, $];
    }
    function M([b, $], [f, _]) {
      const { curvature: O, k: m } = l.mergedConfig, [C, d] = [(b + f) / 2, ($ + _) / 2], L = Dt([b, $], [f, _]) / O, g = L / 2;
      let [V, U] = [C, d];
      do
        V += g, U = B(m, [C, d], V)[1];
      while (Dt([C, d], [V, U]) < L);
      return [V, U];
    }
    function B(b, [$, f], _) {
      const O = f - b * $ + b * _;
      return [_, O];
    }
    async function I() {
      await Ft(), l.flylineLengths = l.flylines.map(({ key: b }) => c.proxy.$refs[b][0].getTotalLength());
    }
    function W({ offsetX: b, offsetY: $ }) {
      if (!r.dev)
        return;
      const f = (b / a.value).toFixed(2), _ = ($ / o.value).toFixed(2);
      console.warn(`dv-flyline-chart-enhanced DEV: 
 Click Position is [${b}, ${$}] 
 Relative Position is [${f}, ${_}]`);
    }
    return (b, $) => (le(), se("div", {
      ref_key: "flylineChartEnhanced",
      ref: t,
      class: "dv-flyline-chart-enhanced",
      style: Me(`background-image: url(${i(l).mergedConfig ? i(l).mergedConfig.bgImgSrc : ""})`),
      onClick: W
    }, [
      i(l).flylines.length ? (le(), se("svg", {
        key: 0,
        width: i(a),
        height: i(o)
      }, [
        ne("defs", null, [
          ne("radialGradient", {
            id: i(l).flylineGradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, Jo, 8, Qo),
          ne("radialGradient", {
            id: i(l).haloGradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, rl, 8, Zo)
        ]),
        (le(!0), se(Ae, null, Se(i(l).flylinePoints, (f) => (le(), se("g", {
          key: f.key + Math.random()
        }, [
          ne("defs", null, [
            f.halo.show ? (le(), se("circle", {
              key: 0,
              id: `halo${i(l).unique}${f.key}`,
              cx: f.coordinate[0],
              cy: f.coordinate[1]
            }, [
              ne("animate", {
                attributeName: "r",
                values: `1;${f.halo.radius}`,
                dur: `${f.halo.time}s`,
                repeatCount: "indefinite"
              }, null, 8, al),
              ne("animate", {
                attributeName: "opacity",
                values: "1;0",
                dur: `${f.halo.time}s`,
                repeatCount: "indefinite"
              }, null, 8, il)
            ], 8, nl)) : _e("", !0)
          ]),
          ne("mask", {
            id: `mask${i(l).unique}${f.key}`
          }, [
            f.halo.show ? (le(), se("use", {
              key: 0,
              "xlink:href": `#halo${i(l).unique}${f.key}`,
              fill: `url(#${i(l).haloGradientId})`
            }, null, 8, ll)) : _e("", !0)
          ], 8, ol),
          f.halo.show ? (le(), se("use", {
            key: 0,
            "xlink:href": `#halo${i(l).unique}${f.key}`,
            fill: f.halo.color,
            mask: `url(#mask${i(l).unique}${f.key})`
          }, null, 8, sl)) : _e("", !0),
          f.icon.show ? (le(), se("image", {
            key: 1,
            "xlink:href": f.icon.src,
            width: f.icon.width,
            height: f.icon.height,
            x: f.icon.x,
            y: f.icon.y
          }, null, 8, ul)) : _e("", !0),
          f.text.show ? (le(), se("text", {
            key: 2,
            style: Me(`fontSize:${f.text.fontSize}px;color:${f.text.color}`),
            fill: f.text.color,
            x: f.text.x,
            y: f.text.y
          }, We(f.name), 13, cl)) : _e("", !0)
        ]))), 128)),
        (le(!0), se(Ae, null, Se(i(l).flylines, (f, _) => (le(), se("g", {
          key: f.key + Math.random()
        }, [
          ne("defs", null, [
            ne("path", {
              id: f.key,
              ref_for: !0,
              ref: f.key,
              d: f.d,
              fill: "transparent"
            }, null, 8, fl)
          ]),
          ne("use", {
            "xlink:href": `#${f.key}`,
            "stroke-width": f.width,
            stroke: f.orbitColor
          }, null, 8, dl),
          ne("mask", {
            id: `mask${i(l).unique}${f.key}`
          }, [
            ne("circle", {
              cx: "0",
              cy: "0",
              r: f.radius,
              fill: `url(#${i(l).flylineGradientId})`
            }, [
              ne("animateMotion", {
                dur: f.time,
                path: f.d,
                rotate: "auto",
                repeatCount: "indefinite"
              }, null, 8, pl)
            ], 8, vl)
          ], 8, hl),
          i(l).flylineLengths[_] ? (le(), se("use", {
            key: 0,
            "xlink:href": `#${f.key}`,
            "stroke-width": f.width,
            stroke: f.color,
            mask: `url(#mask${i(l).unique}${f.key})`
          }, [
            ne("animate", {
              attributeName: "stroke-dasharray",
              from: `0, ${i(l).flylineLengths[_]}`,
              to: `${i(l).flylineLengths[_]}, 0`,
              dur: f.time,
              repeatCount: "indefinite"
            }, null, 8, ml)
          ], 8, gl)) : _e("", !0)
        ]))), 128))
      ], 8, Xo)) : _e("", !0)
    ], 4));
  }
}, xr = {
  install(e) {
    e.component("DvFlylineChartEnhanced", yl);
  }
};
const bl = ["width", "height"], xl = ["id"], Cl = /* @__PURE__ */ ne("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1), _l = /* @__PURE__ */ ne("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1), $l = [
  Cl,
  _l
], Pl = ["id"], wl = /* @__PURE__ */ ne("stop", {
  offset: "0%",
  "stop-color": "#fff",
  "stop-opacity": "0"
}, null, -1), kl = /* @__PURE__ */ ne("stop", {
  offset: "100%",
  "stop-color": "#fff",
  "stop-opacity": "1"
}, null, -1), Al = [
  wl,
  kl
], Ll = ["id", "cx", "cy"], Sl = ["values", "dur"], Ol = ["dur"], Gl = ["xlink:href", "width", "height", "x", "y"], Ml = ["id"], Rl = ["xlink:href", "fill"], Dl = ["xlink:href", "fill", "mask"], Bl = ["id", "d"], Tl = ["xlink:href", "stroke-width", "stroke"], Fl = ["xlink:href", "stroke-width", "stroke", "mask"], Nl = ["from", "to", "dur"], Wl = ["id"], jl = ["r", "fill"], El = ["dur", "path"], zl = ["xlink:href", "width", "height", "x", "y"], ql = ["fill", "x", "y"], Il = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    },
    dev: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = e, n = He(), t = me(null), { width: a, height: o } = xe(t, q, z), l = Pe({
      unique: Math.random(),
      maskId: `flyline-mask-id-${n}`,
      maskCircleId: `mask-circle-id-${n}`,
      gradientId: `gradient-id-${n}`,
      gradient2Id: `gradient2-id-${n}`,
      defaultConfig: {
        /**
             * @description Flyline chart center point
             * @type {Array<Number>}
             * @default centerPoint = [0, 0]
             */
        centerPoint: [0, 0],
        /**
             * @description Flyline start points
             * @type {Array<Array<Number>>}
             * @default points = []
             * @example points = [[10, 10], [100, 100]]
             */
        points: [],
        /**
             * @description Flyline width
             * @type {Number}
             * @default lineWidth = 1
             */
        lineWidth: 1,
        /**
             * @description Orbit color
             * @type {String}
             * @default orbitColor = 'rgba(103, 224, 227, .2)'
             */
        orbitColor: "rgba(103, 224, 227, .2)",
        /**
             * @description Flyline color
             * @type {String}
             * @default orbitColor = '#ffde93'
             */
        flylineColor: "#ffde93",
        /**
             * @description K value
             * @type {Number}
             * @default k = -0.5
             * @example k = -1 ~ 1
             */
        k: -0.5,
        /**
             * @description Flyline curvature
             * @type {Number}
             * @default curvature = 5
             */
        curvature: 5,
        /**
             * @description Flyline radius
             * @type {Number}
             * @default flylineRadius = 100
             */
        flylineRadius: 100,
        /**
             * @description Flyline animation duration
             * @type {Array<Number>}
             * @default duration = [20, 30]
             */
        duration: [20, 30],
        /**
             * @description Relative points position
             * @type {Boolean}
             * @default relative = true
             */
        relative: !0,
        /**
             * @description Back ground image url
             * @type {String}
             * @default bgImgUrl = ''
             * @example bgImgUrl = './img/bg.jpg'
             */
        bgImgUrl: "",
        /**
             * @description Text configuration
             * @type {Object}
             */
        text: {
          /**
               * @description Text offset
               * @type {Array<Number>}
               * @default offset = [0, 15]
               */
          offset: [0, 15],
          /**
               * @description Text color
               * @type {String}
               * @default color = '#ffdb5c'
               */
          color: "#ffdb5c",
          /**
               * @description Text font size
               * @type {Number}
               * @default fontSize = 12
               */
          fontSize: 12
        },
        /**
             * @description Halo configuration
             * @type {Object}
             */
        halo: {
          /**
               * @description Weather to show halo
               * @type {Boolean}
               * @default show = true
               * @example show = true | false
               */
          show: !0,
          /**
               * @description Halo animation duration (10 = 1s)
               * @type {Number}
               * @default duration = 30
               */
          duration: 30,
          /**
               * @description Halo color
               * @type {String}
               * @default color = '#fb7293'
               */
          color: "#fb7293",
          /**
               * @description Halo max radius
               * @type {Number}
               * @default radius = 120
               */
          radius: 120
        },
        /**
             * @description Center point img configuration
             * @type {Object}
             */
        centerPointImg: {
          /**
               * @description Center point img width
               * @type {Number}
               * @default width = 40
               */
          width: 40,
          /**
               * @description Center point img height
               * @type {Number}
               * @default height = 40
               */
          height: 40,
          /**
               * @description Center point img url
               * @type {String}
               * @default url = ''
               */
          url: ""
        },
        /**
             * @description Points img configuration
             * @type {Object}
             * @default radius = 120
             */
        pointsImg: {
          /**
               * @description Points img width
               * @type {Number}
               * @default width = 15
               */
          width: 15,
          /**
               * @description Points img height
               * @type {Number}
               * @default height = 15
               */
          height: 15,
          /**
               * @description Points img url
               * @type {String}
               * @default url = ''
               */
          url: ""
        }
      },
      mergedConfig: null,
      paths: [],
      lengths: [],
      times: [],
      texts: []
    });
    let c;
    Re(() => {
      c = ma();
    }), ke(() => r.config, () => {
      N();
    }, {
      deep: !0
    });
    function z() {
      N();
    }
    function q() {
      N();
    }
    async function N() {
      X(), F(), await B(), I(), W();
    }
    function X() {
      const $ = Ce($e(l.defaultConfig, !0), r.config || {}), { points: f } = $;
      $.points = f.map((_) => _ instanceof Array ? { position: _, text: "" } : _), l.mergedConfig = $;
    }
    function F() {
      let { centerPoint: $, points: f } = l.mergedConfig;
      const { relative: _ } = l.mergedConfig;
      f = f.map(({ position: O }) => O), _ && ($ = [a.value * $[0], o.value * $[1]], f = f.map(([O, m]) => [a.value * O, o.value * m])), l.paths = f.map((O) => A($, O));
    }
    function A($, f) {
      const _ = v($, f);
      return [f, _, $];
    }
    function v([$, f], [_, O]) {
      const { curvature: m, k: C } = l.mergedConfig, [d, G] = [($ + _) / 2, (f + O) / 2], g = Dt([$, f], [_, O]) / m, V = g / 2;
      let [U, Z] = [d, G];
      do
        U += V, Z = M(C, [d, G], U)[1];
      while (Dt([d, G], [U, Z]) < g);
      return [U, Z];
    }
    function M($, [f, _], O) {
      const m = _ - $ * f + $ * O;
      return [O, m];
    }
    async function B() {
      await Ft(), l.lengths = l.paths.map(($, f) => c.proxy.$refs[`path${f}`][0].getTotalLength());
    }
    function I() {
      const { duration: $, points: f } = l.mergedConfig;
      l.times = f.map((_) => ht(...$) / 10);
    }
    function W() {
      const { points: $ } = l.mergedConfig;
      l.texts = $.map(({ text: f }) => f);
    }
    function b({ offsetX: $, offsetY: f }) {
      if (!r.dev)
        return;
      const _ = ($ / a.value).toFixed(2), O = (f / o.value).toFixed(2);
      console.warn(`dv-flyline-chart DEV: 
 Click Position is [${$}, ${f}] 
 Relative Position is [${_}, ${O}]`);
    }
    return ($, f) => (le(), se("div", {
      ref_key: "flylineChart",
      ref: t,
      class: "dv-flyline-chart",
      style: Me(`background-image: url(${i(l).mergedConfig ? i(l).mergedConfig.bgImgUrl : ""})`),
      onClick: b
    }, [
      i(l).mergedConfig ? (le(), se("svg", {
        key: 0,
        width: i(a),
        height: i(o)
      }, [
        ne("defs", null, [
          ne("radialGradient", {
            id: i(l).gradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, $l, 8, xl),
          ne("radialGradient", {
            id: i(l).gradient2Id,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, Al, 8, Pl),
          i(l).paths[0] ? (le(), se("circle", {
            key: 0,
            id: `circle${i(l).paths[0].toString()}`,
            cx: i(l).paths[0][2][0],
            cy: i(l).paths[0][2][1]
          }, [
            ne("animate", {
              attributeName: "r",
              values: `1;${i(l).mergedConfig.halo.radius}`,
              dur: i(l).mergedConfig.halo.duration / 10 + "s",
              repeatCount: "indefinite"
            }, null, 8, Sl),
            ne("animate", {
              attributeName: "opacity",
              values: "1;0",
              dur: i(l).mergedConfig.halo.duration / 10 + "s",
              repeatCount: "indefinite"
            }, null, 8, Ol)
          ], 8, Ll)) : _e("", !0)
        ]),
        i(l).paths[0] ? (le(), se("image", {
          key: 0,
          "xlink:href": i(l).mergedConfig.centerPointImg.url,
          width: i(l).mergedConfig.centerPointImg.width,
          height: i(l).mergedConfig.centerPointImg.height,
          x: i(l).paths[0][2][0] - i(l).mergedConfig.centerPointImg.width / 2,
          y: i(l).paths[0][2][1] - i(l).mergedConfig.centerPointImg.height / 2
        }, null, 8, Gl)) : _e("", !0),
        ne("mask", {
          id: `maskhalo${i(l).paths[0].toString()}`
        }, [
          i(l).paths[0] ? (le(), se("use", {
            key: 0,
            "xlink:href": `#circle${i(l).paths[0].toString()}`,
            fill: `url(#${i(l).gradient2Id})`
          }, null, 8, Rl)) : _e("", !0)
        ], 8, Ml),
        i(l).paths[0] && i(l).mergedConfig.halo.show ? (le(), se("use", {
          key: 1,
          "xlink:href": `#circle${i(l).paths[0].toString()}`,
          fill: i(l).mergedConfig.halo.color,
          mask: `url(#maskhalo${i(l).paths[0].toString()})`
        }, null, 8, Dl)) : _e("", !0),
        (le(!0), se(Ae, null, Se(i(l).paths, (_, O) => (le(), se("g", { key: O }, [
          ne("defs", null, [
            ne("path", {
              id: `path${_.toString()}`,
              ref_for: !0,
              ref: `path${O}`,
              d: `M${_[0].toString()} Q${_[1].toString()} ${_[2].toString()}`,
              fill: "transparent"
            }, null, 8, Bl)
          ]),
          ne("use", {
            "xlink:href": `#path${_.toString()}`,
            "stroke-width": i(l).mergedConfig.lineWidth,
            stroke: i(l).mergedConfig.orbitColor
          }, null, 8, Tl),
          i(l).lengths[O] ? (le(), se("use", {
            key: 0,
            "xlink:href": `#path${_.toString()}`,
            "stroke-width": i(l).mergedConfig.lineWidth,
            stroke: i(l).mergedConfig.flylineColor,
            mask: `url(#mask${i(l).unique}${_.toString()})`
          }, [
            ne("animate", {
              attributeName: "stroke-dasharray",
              from: `0, ${i(l).lengths[O]}`,
              to: `${i(l).lengths[O]}, 0`,
              dur: i(l).times[O] || 0,
              repeatCount: "indefinite"
            }, null, 8, Nl)
          ], 8, Fl)) : _e("", !0),
          ne("mask", {
            id: `mask${i(l).unique}${_.toString()}`
          }, [
            ne("circle", {
              cx: "0",
              cy: "0",
              r: i(l).mergedConfig.flylineRadius,
              fill: `url(#${i(l).gradientId})`
            }, [
              ne("animateMotion", {
                dur: i(l).times[O] || 0,
                path: `M${_[0].toString()} Q${_[1].toString()} ${_[2].toString()}`,
                rotate: "auto",
                repeatCount: "indefinite"
              }, null, 8, El)
            ], 8, jl)
          ], 8, Wl),
          ne("image", {
            "xlink:href": i(l).mergedConfig.pointsImg.url,
            width: i(l).mergedConfig.pointsImg.width,
            height: i(l).mergedConfig.pointsImg.height,
            x: _[0][0] - i(l).mergedConfig.pointsImg.width / 2,
            y: _[0][1] - i(l).mergedConfig.pointsImg.height / 2
          }, null, 8, zl),
          ne("text", {
            style: Me(`fontSize:${i(l).mergedConfig.text.fontSize}px;`),
            fill: i(l).mergedConfig.text.color,
            x: _[0][0] + i(l).mergedConfig.text.offset[0],
            y: _[0][1] + i(l).mergedConfig.text.offset[1]
          }, We(i(l).texts[O]), 13, ql)
        ]))), 128))
      ], 8, bl)) : _e("", !0)
    ], 4));
  }
}, Cr = {
  install(e) {
    e.component("DvFlylineChart", Il);
  }
};
const Hl = (e) => (Ea("data-v-282cb432"), e = e(), za(), e), Vl = { class: "ranking-info" }, Ul = { class: "rank" }, Xl = ["innerHTML"], Ql = { class: "ranking-value" }, Yl = { class: "ranking-column" }, Kl = /* @__PURE__ */ Hl(() => /* @__PURE__ */ ne("div", { class: "shine" }, null, -1)), Jl = [
  Kl
], Zl = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e;
    pt((b) => ({
      "2801d2f6": i(c),
      "5c86b458": i(l),
      "6524ce8e": i(q),
      "65ae9c69": i(z)
    }));
    const n = me(null), { width: t, height: a } = xe(n, X, N), o = Pe({
      defaultConfig: {
        /**
             * @description Board data
             * @type {Array<Object>}
             * @default data = []
             */
        data: [],
        /**
             * @description Row num
             * @type {Number}
             * @default rowNum = 5
             */
        rowNum: 5,
        /**
             * @description Scroll wait time
             * @type {Number}
             * @default waitTime = 2000
             */
        waitTime: 2e3,
        /**
             * @description Carousel type
             * @type {String}
             * @default carousel = 'single'
             * @example carousel = 'single' | 'page'
             */
        carousel: "single",
        /**
             * @description Value unit
             * @type {String}
             * @default unit = ''
             * @example unit = 'ton'
             */
        unit: "",
        /**
             * @description Auto sort by value
             * @type {Boolean}
             * @default sort = true
             */
        sort: !0,
        /**
             * @description Value formatter
             * @type {Function}
             * @default valueFormatter = null
             */
        valueFormatter: null,
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Main theme color
             * @type {String}
             * @default color = '#1370fb'
             */
        color: "#1370fb",
        /**
             * @description Font size
             * @type {Number}
             * @default fontSize = 13
             */
        fontSize: 13
      },
      mergedConfig: null,
      rowsData: [],
      rows: [],
      heights: [],
      avgHeight: 0,
      animationIndex: 0,
      animationHandler: "",
      updater: 0
    });
    ke(() => r.config, () => {
      W(), F();
    }, {
      deep: !0
    });
    const l = be(() => r.config.textColor ? r.config.textColor : o.defaultConfig.textColor), c = be(() => r.config.color ? r.config.color : o.defaultConfig.color), z = be(() => De(c.value, 50)), q = be(() => `${r.config.fontSize ? r.config.fontSize : o.defaultConfig.fontSize}px`);
    Tt(() => {
      W();
    });
    function N() {
      F();
    }
    function X() {
      o.mergedConfig && M(!0);
    }
    function F() {
      A(), v(), M(), I(!0);
    }
    function A() {
      o.mergedConfig = Ce($e(o.defaultConfig, !0), r.config || {});
    }
    function v() {
      let { data: b } = o.mergedConfig;
      const { rowNum: $, sort: f } = o.mergedConfig;
      f && b.sort(({ value: L }, { value: g }) => L > g ? -1 : L < g ? 1 : 0);
      const _ = b.map(({ value: L }) => L), O = Math.min(..._) || 0, m = Math.abs(O), d = (Math.max(..._) || 0) + m;
      b = b.map((L, g) => ({ ...L, ranking: g + 1, percent: (L.value + m) / d * 100 }));
      const G = b.length;
      G > $ && G < 2 * $ && (b = [...b, ...b]), b = b.map((L, g) => ({ ...L, scroll: g })), o.rowsData = b, o.rows = b;
    }
    function M(b = !1) {
      const { rowNum: $, data: f } = o.mergedConfig, _ = a.value / $;
      o.avgHeight = _, b || (o.heights = new Array(f.length).fill(_));
    }
    const B = be(() => o.mergedConfig.carousel === "single");
    async function I(b = !1) {
      const { waitTime: $, rowNum: f } = o.mergedConfig, _ = o.rowsData.length;
      if (f >= _)
        return;
      const { updater: O } = o;
      if (b && (await new Promise((G) => setTimeout(G, $)), O !== o.updater))
        return;
      const m = B.value ? 1 : f, C = o.rowsData.slice(o.animationIndex);
      if (C.push(...o.rowsData.slice(0, o.animationIndex)), o.rows = C.slice(0, B.value ? f + 1 : f * 2), o.heights = new Array(_).fill(o.avgHeight), await new Promise((G) => setTimeout(G, 300)), O !== o.updater)
        return;
      o.heights.fill(0, 0, m), o.animationIndex += m;
      const d = o.animationIndex - _;
      d >= 0 && (o.animationIndex = d), o.animationHandler = setTimeout(I, $ - 300);
    }
    function W() {
      o.updater = (o.updater + 1) % 999999, o.animationHandler && clearTimeout(o.animationHandler);
    }
    return (b, $) => (le(), se("div", {
      ref_key: "scrollRankingBoard",
      ref: n,
      class: "dv-scroll-ranking-board"
    }, [
      (le(!0), se(Ae, null, Se(i(o).rows, (f, _) => (le(), se("div", {
        key: f.toString() + f.scroll,
        class: "row-item",
        style: Me(`height: ${i(o).heights[_]}px;`)
      }, [
        ne("div", Vl, [
          ne("div", Ul, " No." + We(f.ranking), 1),
          ne("div", {
            class: "info-name",
            innerHTML: f.name
          }, null, 8, Xl),
          ne("div", Ql, We(i(o).mergedConfig.valueFormatter ? i(o).mergedConfig.valueFormatter(f) : f.value + i(o).mergedConfig.unit), 1)
        ]),
        ne("div", Yl, [
          ne("div", {
            class: "inside-column",
            style: Me(`width: ${f.percent}%;`)
          }, Jl, 4)
        ])
      ], 4))), 128))
    ], 512));
  }
}, es = /* @__PURE__ */ Ke(Zl, [["__scopeId", "data-v-282cb432"]]), _r = {
  install(e) {
    e.component("DvScrollRankingBoard", es);
  }
};
const ts = ["align", "innerHTML"], rs = ["align", "onClick", "onMouseenter", "innerHTML"], ns = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["mouseover", "click", "getFirstRow"],
  setup(e, { expose: r, emit: n }) {
    const t = e, a = me(null), { width: o, height: l } = xe(a, X, N), c = Pe({
      defaultConfig: {
        /**
             * @description Board header
             * @type {Array<String>}
             * @default header = []
             * @example header = ['column1', 'column2', 'column3']
             */
        header: [],
        /**
             * @description Board data
             * @type {Array<Array>}
             * @default data = []
             */
        data: [],
        /**
             * @description Row num
             * @type {Number}
             * @default rowNum = 5
             */
        rowNum: 5,
        /**
             * @description Header background color
             * @type {String}
             * @default headerBGC = '#00BAFF'
             */
        headerBGC: "#00BAFF",
        /**
             * @description Odd row background color
             * @type {String}
             * @default oddRowBGC = '#003B51'
             */
        oddRowBGC: "#003B51",
        /**
             * @description Even row background color
             * @type {String}
             * @default evenRowBGC = '#003B51'
             */
        evenRowBGC: "#0A2732",
        /**
             * @description Scroll wait time
             * @type {Number}
             * @default waitTime = 2000
             */
        waitTime: 2e3,
        /**
             * @description Header height
             * @type {Number}
             * @default headerHeight = 35
             */
        headerHeight: 35,
        /**
             * @description Column width
             * @type {Array<Number>}
             * @default columnWidth = []
             */
        columnWidth: [],
        /**
             * @description Column align
             * @type {Array<String>}
             * @default align = []
             * @example align = ['left', 'center', 'right']
             */
        align: [],
        /**
             * @description Show index
             * @type {Boolean}
             * @default index = false
             */
        index: !1,
        /**
             * @description index Header
             * @type {String}
             * @default indexHeader = '#'
             */
        indexHeader: "#",
        /**
             * @description Carousel type
             * @type {String}
             * @default carousel = 'single'
             * @example carousel = 'single' | 'page'
             */
        carousel: "single",
        /**
             * @description Pause scroll when mouse hovered
             * @type {Boolean}
             * @default hoverPause = true
             * @example hoverPause = true | false
             */
        hoverPause: !0
      },
      mergedConfig: null,
      header: [],
      rowsData: [],
      rows: [],
      widths: [],
      heights: [],
      avgHeight: 0,
      aligns: [],
      animationIndex: 0,
      animationHandler: "",
      updater: 0,
      needCalc: !1
    });
    ke(() => t.config, (_) => {
      $(), F();
    }, { deep: !0 }), Tt(() => {
      $();
    }), r({
      updateRows: f
    });
    function z(_, O, m, C) {
      const { ceils: d, rowIndex: G } = m;
      n("click", {
        row: d,
        ceil: C,
        rowIndex: G,
        columnIndex: O
      });
    }
    function q(_, O, m, C, d) {
      if (_) {
        const { ceils: G, rowIndex: L } = C;
        n("mouseover", {
          row: G,
          ceil: d,
          rowIndex: L,
          columnIndex: m
        });
      }
      c.mergedConfig.hoverPause && (_ ? $() : b(!0));
    }
    function N() {
      F();
    }
    function X() {
      c.mergedConfig && (B(), I());
    }
    function F() {
      A(), v(), M(), B(), I(), W(), b(!0);
    }
    function A() {
      c.mergedConfig = Ce($e(c.defaultConfig, !0), t.config || {});
    }
    function v() {
      let { header: _ } = c.mergedConfig;
      const { index: O, indexHeader: m } = c.mergedConfig;
      if (!_.length) {
        _ = [];
        return;
      }
      _ = [..._], O && _.unshift(m), c.header = _;
    }
    function M() {
      let { data: _ } = c.mergedConfig;
      const { index: O, headerBGC: m, rowNum: C } = c.mergedConfig;
      O && (_ = _.map((G, L) => {
        G = [...G];
        const g = `<span class="index" style="background-color: ${m};">${L + 1}</span>`;
        return G.unshift(g), G;
      })), _ = _.map((G, L) => ({ ceils: G, rowIndex: L }));
      const d = _.length;
      d > C && d < 2 * C && (_ = [..._, ..._]), _ = _.map((G, L) => ({ ...G, scroll: L })), c.rowsData = _, c.rows = _;
    }
    function B() {
      const { columnWidth: _, header: O } = c.mergedConfig, m = _.reduce((L, g) => L + g, 0);
      let C = 0;
      c.rowsData[0] ? C = c.rowsData[0].ceils.length : O.length && (C = O.length);
      const d = (o.value - m) / (C - _.length), G = new Array(C).fill(d);
      c.widths = Ce(G, _);
    }
    function I(_ = !1) {
      const { headerHeight: O, rowNum: m, data: C } = c.mergedConfig;
      let d = l.value;
      c.header.length && (d -= O);
      const G = d / m;
      c.avgHeight = G, _ || (c.heights = new Array(C.length).fill(G));
    }
    function W() {
      const _ = c.header.length, O = new Array(_).fill("left"), { align: m } = c.mergedConfig;
      c.aligns = Ce(O, m);
    }
    async function b(_ = !1) {
      c.needCalc && (M(), I(), c.needCalc = !1);
      const { waitTime: O, carousel: m, rowNum: C } = c.mergedConfig, { updater: d } = c, G = c.rowsData.length;
      if (C >= G || (_ && await new Promise((U) => setTimeout(U, O)), d !== c.updater))
        return;
      const L = m === "single" ? 1 : C, g = c.rowsData.slice(c.animationIndex);
      if (g.push(...c.rowsData.slice(0, c.animationIndex)), c.rows = g.slice(0, m === "page" ? C * 2 : C + 1), c.heights = new Array(G).fill(c.avgHeight), await new Promise((U) => setTimeout(U, 300)), d !== c.updater)
        return;
      c.heights.splice(0, L, ...new Array(L).fill(0)), c.animationIndex += L;
      const V = c.animationIndex - G;
      V >= 0 && (c.animationIndex = V), c.animationHandler = setTimeout(b, O - 300), n("getFirstRow", g[1]);
    }
    function $() {
      c.updater = (c.updater + 1) % 999999, c.animationHandler && clearTimeout(c.animationHandler);
    }
    function f(_, O) {
      c.mergedConfig = {
        ...c.mergedConfig,
        data: [..._]
      }, c.needCalc = !0, typeof O == "number" && (c.animationIndex = O), c.animationHandler || b(!0);
    }
    return (_, O) => (le(), se("div", {
      ref_key: "scrollBoard",
      ref: a,
      class: "dv-scroll-board"
    }, [
      i(c).header.length && i(c).mergedConfig ? (le(), se("div", {
        key: 0,
        class: "header",
        style: Me(`background-color: ${i(c).mergedConfig.headerBGC};`)
      }, [
        (le(!0), se(Ae, null, Se(i(c).header, (m, C) => (le(), se("div", {
          key: `${m}${C}`,
          class: "header-item",
          style: Me(`
          height: ${i(c).mergedConfig.headerHeight}px;
          line-height: ${i(c).mergedConfig.headerHeight}px;
          width: ${i(c).widths[C]}px;
        `),
          align: i(c).aligns[C],
          innerHTML: m
        }, null, 12, ts))), 128))
      ], 4)) : _e("", !0),
      i(c).mergedConfig ? (le(), se("div", {
        key: 1,
        class: "rows",
        style: Me(`height: ${i(l) - (i(c).header.length ? i(c).mergedConfig.headerHeight : 0)}px;`)
      }, [
        (le(!0), se(Ae, null, Se(i(c).rows, (m, C) => (le(), se("div", {
          key: `${m.toString()}${m.scroll}`,
          class: "row-item",
          style: Me(`
          height: ${i(c).heights[C]}px;
          line-height: ${i(c).heights[C]}px;
          background-color: ${i(c).mergedConfig[m.rowIndex % 2 === 0 ? "evenRowBGC" : "oddRowBGC"]};
        `)
        }, [
          (le(!0), se(Ae, null, Se(m.ceils, (d, G) => (le(), se("div", {
            key: `${d}${C}${G}`,
            class: "ceil",
            style: Me(`width: ${i(c).widths[G]}px;`),
            align: i(c).aligns[G],
            onClick: (L) => z(C, G, m, d),
            onMouseenter: (L) => q(!0, C, G, m, d),
            onMouseleave: O[0] || (O[0] = (L) => q(!1)),
            innerHTML: d
          }, null, 44, rs))), 128))
        ], 4))), 128))
      ], 4)) : _e("", !0)
    ], 512));
  }
}, $r = {
  install(e) {
    e.component("DvScrollBoard", ns);
  }
};
var La = {}, Pr = {}, Ne = {}, jn;
function ze() {
  if (jn)
    return Ne;
  jn = 1;
  var e = we;
  Object.defineProperty(Ne, "__esModule", {
    value: !0
  }), Ne.filterNonNumber = a, Ne.deepMerge = o, Ne.mulAdd = l, Ne.mergeSameStackData = c, Ne.getTwoPointDistance = z, Ne.getLinearGradientColor = q, Ne.getPolylineLength = N, Ne.getPointToLineDistance = X, Ne.initNeedSeries = F, Ne.radianToAngle = A;
  var r = e(Be()), n = e(Ee()), t = Te();
  function a(v) {
    return v.filter(function(M) {
      return typeof M == "number";
    });
  }
  function o(v, M) {
    for (var B in M) {
      if (v[B] && (0, n.default)(v[B]) === "object") {
        o(v[B], M[B]);
        continue;
      }
      if ((0, n.default)(M[B]) === "object") {
        v[B] = (0, t.deepClone)(M[B], !0);
        continue;
      }
      v[B] = M[B];
    }
    return v;
  }
  function l(v) {
    return v = a(v), v.reduce(function(M, B) {
      return M + B;
    }, 0);
  }
  function c(v, M) {
    var B = v.stack;
    if (!B)
      return (0, r.default)(v.data);
    var I = M.filter(function(f) {
      var _ = f.stack;
      return _ === B;
    }), W = I.findIndex(function(f) {
      var _ = f.data;
      return _ === v.data;
    }), b = I.splice(0, W + 1).map(function(f) {
      var _ = f.data;
      return _;
    }), $ = b[0].length;
    return new Array($).fill(0).map(function(f, _) {
      return l(b.map(function(O) {
        return O[_];
      }));
    });
  }
  function z(v, M) {
    var B = Math.abs(v[0] - M[0]), I = Math.abs(v[1] - M[1]);
    return Math.sqrt(B * B + I * I);
  }
  function q(v, M, B, I) {
    if (!(!v || !M || !B || !I.length)) {
      var W = I;
      typeof W == "string" && (W = [I, I]);
      var b = v.createLinearGradient.apply(v, (0, r.default)(M).concat((0, r.default)(B))), $ = 1 / (W.length - 1);
      return W.forEach(function(f, _) {
        return b.addColorStop($ * _, f);
      }), b;
    }
  }
  function N(v) {
    var M = new Array(v.length - 1).fill(0).map(function(I, W) {
      return [v[W], v[W + 1]];
    }), B = M.map(function(I) {
      return z.apply(void 0, (0, r.default)(I));
    });
    return l(B);
  }
  function X(v, M, B) {
    var I = z(v, M), W = z(v, B), b = z(M, B);
    return 0.5 * Math.sqrt((I + W + b) * (I + W - b) * (I + b - W) * (W + b - I)) / b;
  }
  function F(v, M, B) {
    return v = v.filter(function(I) {
      var W = I.type;
      return W === B;
    }), v = v.map(function(I) {
      return o((0, t.deepClone)(M, !0), I);
    }), v.filter(function(I) {
      var W = I.show;
      return W;
    });
  }
  function A(v) {
    return v / Math.PI * 180;
  }
  return Ne;
}
var Sa = we, as = Sa(Ve()), En = Sa(Be()), Et = jt, is = un(), vt = Te(), os = yt, ls = ze();
function zn(e, r) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var t = Object.getOwnPropertySymbols(e);
    r && (t = t.filter(function(a) {
      return Object.getOwnPropertyDescriptor(e, a).enumerable;
    })), n.push.apply(n, t);
  }
  return n;
}
function qn(e) {
  for (var r = 1; r < arguments.length; r++) {
    var n = arguments[r] != null ? arguments[r] : {};
    r % 2 ? zn(Object(n), !0).forEach(function(t) {
      (0, as.default)(e, t, n[t]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : zn(Object(n)).forEach(function(t) {
      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
    });
  }
  return e;
}
var ss = {
  shape: {
    rx: 0,
    ry: 0,
    ir: 0,
    or: 0,
    startAngle: 0,
    endAngle: 0,
    clockWise: !0
  },
  validator: function(r) {
    var n = r.shape, t = ["rx", "ry", "ir", "or", "startAngle", "endAngle"];
    return t.find(function(a) {
      return typeof n[a] != "number";
    }) ? (console.error("Pie shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape;
    t.beginPath();
    var o = a.rx, l = a.ry, c = a.ir, z = a.or, q = a.startAngle, N = a.endAngle, X = a.clockWise;
    o = parseInt(o) + 0.5, l = parseInt(l) + 0.5, t.arc(o, l, c > 0 ? c : 0, q, N, !X);
    var F = (0, vt.getCircleRadianPoint)(o, l, z, N).map(function(v) {
      return parseInt(v) + 0.5;
    }), A = (0, vt.getCircleRadianPoint)(o, l, c, q).map(function(v) {
      return parseInt(v) + 0.5;
    });
    t.lineTo.apply(t, (0, En.default)(F)), t.arc(o, l, z > 0 ? z : 0, N, q, X), t.lineTo.apply(t, (0, En.default)(A)), t.closePath(), t.stroke(), t.fill();
  }
}, us = {
  shape: {
    rx: 0,
    ry: 0,
    r: 0,
    startAngle: 0,
    endAngle: 0,
    gradientStartAngle: null,
    gradientEndAngle: null
  },
  validator: function(r) {
    var n = r.shape, t = ["rx", "ry", "r", "startAngle", "endAngle"];
    return t.find(function(a) {
      return typeof n[a] != "number";
    }) ? (console.error("AgArc shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape, o = n.style, l = o.gradient;
    l = l.map(function(O) {
      return (0, os.getColorFromRgbValue)(O);
    }), l.length === 1 && (l = [l[0], l[0]]);
    var c = l.length - 1, z = a.gradientStartAngle, q = a.gradientEndAngle, N = a.startAngle, X = a.endAngle, F = a.r, A = a.rx, v = a.ry;
    z === null && (z = N), q === null && (q = X);
    var M = (q - z) / c;
    M === Math.PI * 2 && (M = Math.PI * 2 - 1e-3);
    for (var B = 0; B < c; B++) {
      t.beginPath();
      var I = (0, vt.getCircleRadianPoint)(A, v, F, N + M * B), W = (0, vt.getCircleRadianPoint)(A, v, F, N + M * (B + 1)), b = (0, ls.getLinearGradientColor)(t, I, W, [l[B], l[B + 1]]), $ = N + M * B, f = N + M * (B + 1), _ = !1;
      if (f > X && (f = X, _ = !0), t.arc(A, v, F, $, f), t.strokeStyle = b, t.stroke(), _)
        break;
    }
  }
}, cs = {
  shape: {
    number: [],
    content: "",
    position: [0, 0],
    toFixed: 0,
    rowGap: 0,
    formatter: null
  },
  validator: function(r) {
    var n = r.shape, t = n.number, a = n.content, o = n.position;
    return !(t instanceof Array) || typeof a != "string" || !(o instanceof Array) ? (console.error("NumberText shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape, o = a.number, l = a.content, c = a.toFixed, z = a.rowGap, q = a.formatter, N = l.split("{nt}"), X = "";
    N.forEach(function(F, A) {
      var v = o[A];
      typeof v != "number" && (v = ""), typeof v == "number" && (v = v.toFixed(c), typeof q == "function" && (v = q(v))), X += F + (v || "");
    }), is.text.draw({
      ctx: t
    }, {
      shape: qn(qn({}, a), {}, {
        content: X,
        rowGap: z
      })
    });
  }
}, fs = {
  shape: {
    x: 0,
    y: 0,
    w: 0,
    h: 0
  },
  validator: function(r) {
    var n = r.shape, t = n.x, a = n.y, o = n.w, l = n.h;
    return typeof t != "number" || typeof a != "number" || typeof o != "number" || typeof l != "number" ? (console.error("lineIcon shape configuration is abnormal!"), !1) : !0;
  },
  draw: function(r, n) {
    var t = r.ctx, a = n.shape;
    t.beginPath();
    var o = a.x, l = a.y, c = a.w, z = a.h, q = z / 2;
    t.strokeStyle = t.fillStyle, t.moveTo(o, l + q), t.lineTo(o + c, l + q), t.lineWidth = 1, t.stroke(), t.beginPath();
    var N = q - 5 * 2;
    N <= 0 && (N = 3), t.arc(o + c / 2, l + q, N, 0, Math.PI * 2), t.lineWidth = 5, t.stroke(), t.fillStyle = "#fff", t.fill();
  },
  hoverCheck: function(r, n) {
    var t = n.shape, a = t.x, o = t.y, l = t.w, c = t.h;
    return (0, vt.checkPointIsInRect)(r, a, o, l, c);
  },
  setGraphCenter: function(r, n) {
    var t = n.shape, a = n.style, o = t.x, l = t.y, c = t.w, z = t.h;
    a.graphCenter = [o + c / 2, l + z / 2];
  }
};
(0, Et.extendNewGraph)("pie", ss);
(0, Et.extendNewGraph)("agArc", us);
(0, Et.extendNewGraph)("numberText", cs);
(0, Et.extendNewGraph)("lineIcon", fs);
var wr = {}, Ct = {}, kr = {}, rt = {}, In;
function ds() {
  if (In)
    return rt;
  In = 1, Object.defineProperty(rt, "__esModule", {
    value: !0
  }), rt.colorConfig = void 0;
  var e = ["#37a2da", "#32c5e9", "#67e0e3", "#9fe6b8", "#ffdb5c", "#ff9f7f", "#fb7293", "#e062ae", "#e690d1", "#e7bcf3", "#9d96f5", "#8378ea", "#96bfff"];
  return rt.colorConfig = e, rt;
}
var nt = {}, Hn;
function hs() {
  if (Hn)
    return nt;
  Hn = 1, Object.defineProperty(nt, "__esModule", {
    value: !0
  }), nt.gridConfig = void 0;
  var e = {
    /**
     * @description Grid left margin
     * @type {String|Number}
     * @default left = '10%'
     * @example left = '10%' | 10
     */
    left: "10%",
    /**
     * @description Grid right margin
     * @type {String|Number}
     * @default right = '10%'
     * @example right = '10%' | 10
     */
    right: "10%",
    /**
     * @description Grid top margin
     * @type {String|Number}
     * @default top = 60
     * @example top = '10%' | 60
     */
    top: 60,
    /**
     * @description Grid bottom margin
     * @type {String|Number}
     * @default bottom = 60
     * @example bottom = '10%' | 60
     */
    bottom: 60,
    /**
     * @description Grid default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    style: {
      fill: "rgba(0, 0, 0, 0)"
    },
    /**
     * @description Grid render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -30
     */
    rLevel: -30,
    /**
     * @description Grid animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Grid animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 30
  };
  return nt.gridConfig = e, nt;
}
var Ze = {}, Vn;
function vs() {
  if (Vn)
    return Ze;
  Vn = 1, Object.defineProperty(Ze, "__esModule", {
    value: !0
  }), Ze.yAxisConfig = Ze.xAxisConfig = void 0;
  var e = {
    /**
     * @description Axis name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Whether to display this axis
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Axis position
     * @type {String}
     * @default position = 'bottom'
     * @example position = 'bottom' | 'top'
     */
    position: "bottom",
    /**
     * @description Name gap
     * @type {Number}
     * @default nameGap = 15
     */
    nameGap: 15,
    /**
     * @description Name location
     * @type {String}
     * @default nameLocation = 'end'
     * @example nameLocation = 'end' | 'center' | 'start'
     */
    nameLocation: "end",
    /**
     * @description Name default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    nameTextStyle: {
      fill: "#333",
      fontSize: 10
    },
    /**
     * @description Axis min value
     * @type {String|Number}
     * @default min = '20%'
     * @example min = '20%' | 0
     */
    min: "20%",
    /**
     * @description Axis max value
     * @type {String|Number}
     * @default max = '20%'
     * @example max = '20%' | 0
     */
    max: "20%",
    /**
     * @description Axis value interval
     * @type {Number}
     * @default interval = null
     * @example interval = 100
     */
    interval: null,
    /**
     * @description Min interval
     * @type {Number}
     * @default minInterval = null
     * @example minInterval = 1
     */
    minInterval: null,
    /**
     * @description Max interval
     * @type {Number}
     * @default maxInterval = null
     * @example maxInterval = 100
     */
    maxInterval: null,
    /**
     * @description Boundary gap
     * @type {Boolean}
     * @default boundaryGap = null
     * @example boundaryGap = true
     */
    boundaryGap: null,
    /**
     * @description Axis split number
     * @type {Number}
     * @default splitNumber = 5
     */
    splitNumber: 5,
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333",
        fontSize: 10,
        rotate: 0
      }
    },
    /**
     * @description Axis split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display axis split line
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Axis split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description X axis render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -20
     */
    rLevel: -20,
    /**
     * @description X axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description X axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  Ze.xAxisConfig = e;
  var r = {
    /**
     * @description Axis name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Whether to display this axis
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Axis position
     * @type {String}
     * @default position = 'left'
     * @example position = 'left' | 'right'
     */
    position: "left",
    /**
     * @description Name gap
     * @type {Number}
     * @default nameGap = 15
     */
    nameGap: 15,
    /**
     * @description Name location
     * @type {String}
     * @default nameLocation = 'end'
     * @example nameLocation = 'end' | 'center' | 'start'
     */
    nameLocation: "end",
    /**
     * @description name default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    nameTextStyle: {
      fill: "#333",
      fontSize: 10
    },
    /**
     * @description Axis min value
     * @type {String|Number}
     * @default min = '20%'
     * @example min = '20%' | 0
     */
    min: "20%",
    /**
     * @description Axis max value
     * @type {String|Number}
     * @default max = '20%'
     * @example max = '20%' | 0
     */
    max: "20%",
    /**
     * @description Axis value interval
     * @type {Number}
     * @default interval = null
     * @example interval = 100
     */
    interval: null,
    /**
     * @description Min interval
     * @type {Number}
     * @default minInterval = null
     * @example minInterval = 1
     */
    minInterval: null,
    /**
     * @description Max interval
     * @type {Number}
     * @default maxInterval = null
     * @example maxInterval = 100
     */
    maxInterval: null,
    /**
     * @description Boundary gap
     * @type {Boolean}
     * @default boundaryGap = null
     * @example boundaryGap = true
     */
    boundaryGap: null,
    /**
     * @description Axis split number
     * @type {Number}
     * @default splitNumber = 5
     */
    splitNumber: 5,
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#333",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333",
        fontSize: 10,
        rotate: 0
      }
    },
    /**
     * @description Axis split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display axis split line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description Y axis render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -20
     */
    rLevel: -20,
    /**
     * @description Y axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Y axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return Ze.yAxisConfig = r, Ze;
}
var at = {}, Un;
function ps() {
  if (Un)
    return at;
  Un = 1, Object.defineProperty(at, "__esModule", {
    value: !0
  }), at.titleConfig = void 0;
  var e = {
    /**
     * @description Whether to display title
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Title text
     * @type {String}
     * @default text = ''
     */
    text: "",
    /**
     * @description Title offset
     * @type {Array}
     * @default offset = [0, -20]
     */
    offset: [0, -20],
    /**
     * @description Title default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    style: {
      fill: "#333",
      fontSize: 17,
      fontWeight: "bold",
      textAlign: "center",
      textBaseline: "bottom"
    },
    /**
     * @description Title render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 20
     */
    rLevel: 20,
    /**
     * @description Title animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Title animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return at.titleConfig = e, at;
}
var it = {}, Xn;
function gs() {
  if (Xn)
    return it;
  Xn = 1, Object.defineProperty(it, "__esModule", {
    value: !0
  }), it.lineConfig = void 0;
  var e = {
    /**
     * @description Whether to display this line chart
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Data stacking
     * The data value of the series element of the same stack
     * will be superimposed (the latter value will be superimposed on the previous value)
     * @type {String}
     * @default stack = ''
     */
    stack: "",
    /**
     * @description Smooth line
     * @type {Boolean}
     * @default smooth = false
     */
    smooth: !1,
    /**
     * @description Line x axis index
     * @type {Number}
     * @default xAxisIndex = 0
     * @example xAxisIndex = 0 | 1
     */
    xAxisIndex: 0,
    /**
     * @description Line y axis index
     * @type {Number}
     * @default yAxisIndex = 0
     * @example yAxisIndex = 0 | 1
     */
    yAxisIndex: 0,
    /**
     * @description Line chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Line default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    lineStyle: {
      lineWidth: 1
    },
    /**
     * @description Line point configuration
     * @type {Object}
     */
    linePoint: {
      /**
       * @description Whether to display line point
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Line point radius
       * @type {Number}
       * @default radius = 2
       */
      radius: 2,
      /**
       * @description Line point default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#fff",
        lineWidth: 1
      }
    },
    /**
     * @description Line area configuration
     * @type {Object}
     */
    lineArea: {
      /**
       * @description Whether to display line area
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Line area gradient color (Hex|rgb|rgba)
       * @type {Array}
       * @default gradient = []
       */
      gradient: [],
      /**
       * @description Line area style default configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        opacity: 0.5
      }
    },
    /**
     * @description Line label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display line label
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Line label position
       * @type {String}
       * @default position = 'top'
       * @example position = 'top' | 'center' | 'bottom'
       */
      position: "top",
      /**
       * @description Line label offset
       * @type {Array}
       * @default offset = [0, -10]
       */
      offset: [0, -10],
      /**
       * @description Line label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Line label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Line chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Line animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Line animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return it.lineConfig = e, it;
}
var ot = {}, Qn;
function ms() {
  if (Qn)
    return ot;
  Qn = 1, Object.defineProperty(ot, "__esModule", {
    value: !0
  }), ot.barConfig = void 0;
  var e = {
    /**
     * @description Whether to display this bar chart
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Data stacking
     * The data value of the series element of the same stack
     * will be superimposed (the latter value will be superimposed on the previous value)
     * @type {String}
     * @default stack = ''
     */
    stack: "",
    /**
     * @description Bar shape type
     * @type {String}
     * @default shapeType = 'normal'
     * @example shapeType = 'normal' | 'leftEchelon' | 'rightEchelon'
     */
    shapeType: "normal",
    /**
     * @description Echelon bar sharpness offset
     * @type {Number}
     * @default echelonOffset = 10
     */
    echelonOffset: 10,
    /**
     * @description Bar width
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barWidth = 'auto'
     * @example barWidth = 'auto' | '10%' | 20
     */
    barWidth: "auto",
    /**
     * @description Bar gap
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barGap = '30%'
     * @example barGap = '30%' | 30
     */
    barGap: "30%",
    /**
     * @description Bar category gap
     * This property should be set on the last 'bar' series
     * in this coordinate system to take effect and will be in effect
     * for all 'bar' series in this coordinate system
     * @type {String|Number}
     * @default barCategoryGap = '20%'
     * @example barCategoryGap = '20%' | 20
     */
    barCategoryGap: "20%",
    /**
     * @description Bar x axis index
     * @type {Number}
     * @default xAxisIndex = 0
     * @example xAxisIndex = 0 | 1
     */
    xAxisIndex: 0,
    /**
     * @description Bar y axis index
     * @type {Number}
     * @default yAxisIndex = 0
     * @example yAxisIndex = 0 | 1
     */
    yAxisIndex: 0,
    /**
     * @description Bar chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Background bar configuration
     * @type {Object}
     */
    backgroundBar: {
      /**
       * @description Whether to display background bar
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Background bar width
       * @type {String|Number}
       * @default width = 'auto'
       * @example width = 'auto' | '30%' | 30
       */
      width: "auto",
      /**
       * @description Background bar default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "rgba(200, 200, 200, .4)"
      }
    },
    /**
     * @description Bar label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display bar label
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Bar label position
       * @type {String}
       * @default position = 'top'
       * @example position = 'top' | 'center' | 'bottom'
       */
      position: "top",
      /**
       * @description Bar label offset
       * @type {Array}
       * @default offset = [0, -10]
       */
      offset: [0, -10],
      /**
       * @description Bar label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}件'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Bar label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Bar gradient configuration
     * @type {Object}
     */
    gradient: {
      /**
       * @description Gradient color (Hex|rgb|rgba)
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Local gradient
       * @type {Boolean}
       * @default local = true
       */
      local: !0
    },
    /**
     * @description Bar style default configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    barStyle: {},
    /**
     * @description Independent color mode
     * When set to true, independent color mode is enabled
     * @type {Boolean}
     * @default independentColor = false
     */
    independentColor: !1,
    /**
     * @description Independent colors
     * Only effective when independent color mode is enabled
     * Default value is the same as the color in the root configuration
     * Two-dimensional color array can produce gradient colors
     * @type {Array}
     * @example independentColor = ['#fff', '#000']
     * @example independentColor = [['#fff', '#000'], '#000']
     */
    independentColors: [],
    /**
     * @description Bar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 0
     */
    rLevel: 0,
    /**
     * @description Bar animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Bar animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ot.barConfig = e, ot;
}
var lt = {}, Yn;
function Oa() {
  if (Yn)
    return lt;
  Yn = 1, Object.defineProperty(lt, "__esModule", {
    value: !0
  }), lt.pieConfig = void 0;
  var e = {
    /**
     * @description Whether to display this pie chart
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radius of pie
     * @type {String|Number}
     * @default radius = '50%'
     * @example radius = '50%' | 100
     */
    radius: "50%",
    /**
     * @description Center point of pie
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Pie chart start angle
     * @type {Number}
     * @default startAngle = -Math.PI / 2
     * @example startAngle = -Math.PI
     */
    startAngle: -Math.PI / 2,
    /**
     * @description Whether to enable rose type
     * @type {Boolean}
     * @default roseType = false
     */
    roseType: !1,
    /**
     * @description Automatic sorting in rose type
     * @type {Boolean}
     * @default roseSort = true
     */
    roseSort: !0,
    /**
     * @description Rose radius increasing
     * @type {String|Number}
     * @default roseIncrement = 'auto'
     * @example roseIncrement = 'auto' | '10%' | 10
     */
    roseIncrement: "auto",
    /**
     * @description Pie chart data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Pie inside label configuration
     * @type {Object}
     */
    insideLabel: {
      /**
       * @description Whether to display inside label
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = '{percent}%'
       * @example formatter = '${name}-{value}-{percent}%'
       * @example formatter = (dataItem) => (dataItem.name)
       */
      formatter: "{percent}%",
      /**
       * @description Label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10,
        fill: "#fff",
        textAlign: "center",
        textBaseline: "middle"
      }
    },
    /**
     * @description Pie Outside label configuration
     * @type {Object}
     */
    outsideLabel: {
      /**
       * @description Whether to display outside label
       * @type {Boolean}
       * @default show = false
       */
      show: !0,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = '{name}'
       * @example formatter = '${name}-{value}-{percent}%'
       * @example formatter = (dataItem) => (dataItem.name)
       */
      formatter: "{name}",
      /**
       * @description Label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 11
      },
      /**
       * @description Gap beteen label line bended place and pie
       * @type {String|Number}
       * @default labelLineBendGap = '20%'
       * @example labelLineBendGap = '20%' | 20
       */
      labelLineBendGap: "20%",
      /**
       * @description Label line end length
       * @type {Number}
       * @default labelLineEndLength = 50
       */
      labelLineEndLength: 50,
      /**
       * @description Label line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      labelLineStyle: {
        lineWidth: 1
      }
    },
    /**
     * @description Pie default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    pieStyle: {},
    /**
     * @description Percentage fractional precision
     * @type {Number}
     * @default percentToFixed = 0
     */
    percentToFixed: 0,
    /**
     * @description Pie chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Animation delay gap
     * @type {Number}
     * @default animationDelayGap = 60
     */
    animationDelayGap: 60,
    /**
     * @description Pie animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Pie start animation curve
     * @type {String}
     * @default startAnimationCurve = 'easeOutBack'
     */
    startAnimationCurve: "easeOutBack",
    /**
     * @description Pie animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return lt.pieConfig = e, lt;
}
var st = {}, Kn;
function ys() {
  if (Kn)
    return st;
  Kn = 1, Object.defineProperty(st, "__esModule", {
    value: !0
  }), st.radarAxisConfig = void 0;
  var e = {
    /**
     * @description Whether to display this radar axis
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Center point of radar axis
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Radius of radar axis
     * @type {String|Number}
     * @default radius = '65%'
     * @example radius = '65%' | 100
     */
    radius: "65%",
    /**
     * @description Radar axis start angle
     * @type {Number}
     * @default startAngle = -Math.PI / 2
     * @example startAngle = -Math.PI
     */
    startAngle: -Math.PI / 2,
    /**
     * @description Radar axis split number
     * @type {Number}
     * @default splitNum = 5
     */
    splitNum: 5,
    /**
     * @description Whether to enable polygon radar axis
     * @type {Boolean}
     * @default polygon = false
     */
    polygon: !1,
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Label gap between label and radar axis
       * @type {Number}
       * @default labelGap = 15
       */
      labelGap: 15,
      /**
       * @description Label color (Hex|rgb|rgba), will cover style.fill
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#333"
      }
    },
    /**
     * @description Axis line configuration
     * @type {Object}
     */
    axisLine: {
      /**
       * @description Whether to display axis line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Line color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#999",
        lineWidth: 1
      }
    },
    /**
     * @description Split line configuration
     * @type {Object}
     */
    splitLine: {
      /**
       * @description Whether to display split line
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Line color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: [],
      /**
       * @description Split line default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#d4d4d4",
        lineWidth: 1
      }
    },
    /**
     * @description Split area configuration
     * @type {Object}
     */
    splitArea: {
      /**
       * @description Whether to display split area
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Area color (Hex|rgb|rgba), will cover style.stroke
       * @type {Array}
       * @default color = []
       */
      color: ["#f5f5f5", "#e6e6e6"],
      /**
       * @description Split area default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {}
    },
    /**
     * @description Bar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = -10
     */
    rLevel: -10,
    /**
     * @description Radar axis animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Radar axis animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrane: 50
  };
  return st.radarAxisConfig = e, st;
}
var ut = {}, Jn;
function bs() {
  if (Jn)
    return ut;
  Jn = 1, Object.defineProperty(ut, "__esModule", {
    value: !0
  }), ut.radarConfig = void 0;
  var e = {
    /**
     * @description Whether to display this radar
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radar chart data
     * @type {Array}
     * @default data = []
     * @example data = [100, 200, 300]
     */
    data: [],
    /**
     * @description Radar default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    radarStyle: {
      lineWidth: 1
    },
    /**
     * @description Radar point configuration
     * @type {Object}
     */
    point: {
      /**
       * @description Whether to display radar point
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Point radius
       * @type {Number}
       * @default radius = 2
       */
      radius: 2,
      /**
       * @description Radar point default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fill: "#fff"
      }
    },
    /**
     * @description Radar label configuration
     * @type {Object}
     */
    label: {
      /**
       * @description Whether to display radar label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Label position offset
       * @type {Array}
       * @default offset = [0, 0]
       */
      offset: [0, 0],
      /**
       * @description Label gap between label and radar
       * @type {Number}
       * @default labelGap = 5
       */
      labelGap: 5,
      /**
       * @description Label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = 'Score-{value}'
       * @example formatter = (label) => (label)
       */
      formatter: null,
      /**
       * @description Radar label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 10
      }
    },
    /**
     * @description Radar chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Radar animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Radar animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrane: 50
  };
  return ut.radarConfig = e, ut;
}
var ct = {}, Zn;
function Ga() {
  if (Zn)
    return ct;
  Zn = 1, Object.defineProperty(ct, "__esModule", {
    value: !0
  }), ct.gaugeConfig = void 0;
  var e = {
    /**
     * @description Whether to display this gauge
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend name
     * @type {String}
     * @default name = ''
     */
    name: "",
    /**
     * @description Radius of gauge
     * @type {String|Number}
     * @default radius = '60%'
     * @example radius = '60%' | 100
     */
    radius: "60%",
    /**
     * @description Center point of gauge
     * @type {Array}
     * @default center = ['50%','50%']
     * @example center = ['50%','50%'] | [100, 100]
     */
    center: ["50%", "50%"],
    /**
     * @description Gauge start angle
     * @type {Number}
     * @default startAngle = -(Math.PI / 4) * 5
     * @example startAngle = -Math.PI
     */
    startAngle: -(Math.PI / 4) * 5,
    /**
     * @description Gauge end angle
     * @type {Number}
     * @default endAngle = Math.PI / 4
     * @example endAngle = 0
     */
    endAngle: Math.PI / 4,
    /**
     * @description Gauge min value
     * @type {Number}
     * @default min = 0
     */
    min: 0,
    /**
     * @description Gauge max value
     * @type {Number}
     * @default max = 100
     */
    max: 100,
    /**
     * @description Gauge split number
     * @type {Number}
     * @default splitNum = 5
     */
    splitNum: 5,
    /**
     * @description Gauge arc line width
     * @type {Number}
     * @default arcLineWidth = 15
     */
    arcLineWidth: 15,
    /**
     * @description Gauge chart data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Data item arc default style configuration
     * @type {Object}
     * @default dataItemStyle = {Configuration Of Class Style}
     */
    dataItemStyle: {},
    /**
     * @description Axis tick configuration
     * @type {Object}
     */
    axisTick: {
      /**
       * @description Whether to display axis tick
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis tick length
       * @type {Number}
       * @default tickLength = 6
       */
      tickLength: 6,
      /**
       * @description Axis tick default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#999",
        lineWidth: 1
      }
    },
    /**
     * @description Axis label configuration
     * @type {Object}
     */
    axisLabel: {
      /**
       * @description Whether to display axis label
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Axis label data (Can be calculated automatically)
       * @type {Array}
       * @default data = [Number...]
       */
      data: [],
      /**
       * @description Axis label formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}%'
       * @example formatter = (labelItem) => (labelItem.value)
       */
      formatter: null,
      /**
       * @description Axis label gap between label and axis tick
       * @type {String|Function}
       * @default labelGap = 5
       */
      labelGap: 5,
      /**
       * @description Axis label default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {}
    },
    /**
     * @description Gauge pointer configuration
     * @type {Object}
     */
    pointer: {
      /**
       * @description Whether to display pointer
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Pointer value index of data
       * @type {Number}
       * @default valueIndex = 0 (pointer.value = data[0].value)
       */
      valueIndex: 0,
      /**
       * @description Pointer default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        scale: [1, 1],
        fill: "#fb7293"
      }
    },
    /**
     * @description Data item arc detail configuration
     * @type {Object}
     */
    details: {
      /**
       * @description Whether to display details
       * @type {Boolean}
       * @default show = false
       */
      show: !1,
      /**
       * @description Details formatter
       * @type {String|Function}
       * @default formatter = null
       * @example formatter = '{value}%'
       * @example formatter = '{name}%'
       * @example formatter = (dataItem) => (dataItem.value)
       */
      formatter: null,
      /**
       * @description Details position offset
       * @type {Array}
       * @default offset = [0, 0]
       * @example offset = [10, 10]
       */
      offset: [0, 0],
      /**
       * @description Value fractional precision
       * @type {Number}
       * @default valueToFixed = 0
       */
      valueToFixed: 0,
      /**
       * @description Details position
       * @type {String}
       * @default position = 'center'
       * @example position = 'start' | 'center' | 'end'
       */
      position: "center",
      /**
       * @description Details default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        fontSize: 20,
        fontWeight: "bold",
        textAlign: "center",
        textBaseline: "middle"
      }
    },
    /**
     * @description Gauge background arc configuration
     * @type {Object}
     */
    backgroundArc: {
      /**
       * @description Whether to display background arc
       * @type {Boolean}
       * @default show = true
       */
      show: !0,
      /**
       * @description Background arc default style configuration
       * @type {Object}
       * @default style = {Configuration Of Class Style}
       */
      style: {
        stroke: "#e0e0e0"
      }
    },
    /**
     * @description Gauge chart render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 10
     */
    rLevel: 10,
    /**
     * @description Gauge animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Gauge animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ct.gaugeConfig = e, ct;
}
var ft = {}, ea;
function xs() {
  if (ea)
    return ft;
  ea = 1, Object.defineProperty(ft, "__esModule", {
    value: !0
  }), ft.legendConfig = void 0;
  var e = {
    /**
     * @description Whether to display legend
     * @type {Boolean}
     * @default show = true
     */
    show: !0,
    /**
     * @description Legend orient
     * @type {String}
     * @default orient = 'horizontal'
     * @example orient = 'horizontal' | 'vertical'
     */
    orient: "horizontal",
    /**
     * @description Legend left
     * @type {String|Number}
     * @default left = 'auto'
     * @example left = 'auto' | '10%' | 10
     */
    left: "auto",
    /**
     * @description Legend right
     * @type {String|Number}
     * @default right = 'auto'
     * @example right = 'auto' | '10%' | 10
     */
    right: "auto",
    /**
     * @description Legend top
     * @type {String|Number}
     * @default top = 'auto'
     * @example top = 'auto' | '10%' | 10
     */
    top: "auto",
    /**
     * @description Legend bottom
     * @type {String|Number}
     * @default bottom = 'auto'
     * @example bottom = 'auto' | '10%' | 10
     */
    bottom: "auto",
    /**
     * @description Legend item gap
     * @type {Number}
     * @default itemGap = 10
     */
    itemGap: 10,
    /**
     * @description Icon width
     * @type {Number}
     * @default iconWidth = 25
     */
    iconWidth: 25,
    /**
     * @description Icon height
     * @type {Number}
     * @default iconHeight = 10
     */
    iconHeight: 10,
    /**
     * @description Whether legend is optional
     * @type {Boolean}
     * @default selectAble = true
     */
    selectAble: !0,
    /**
     * @description Legend data
     * @type {Array}
     * @default data = []
     */
    data: [],
    /**
     * @description Legend text default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    textStyle: {
      fontFamily: "Arial",
      fontSize: 13,
      fill: "#000"
    },
    /**
     * @description Legend icon default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    iconStyle: {},
    /**
     * @description Legend text unselected default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    textUnselectedStyle: {
      fontFamily: "Arial",
      fontSize: 13,
      fill: "#999"
    },
    /**
     * @description Legend icon unselected default style configuration
     * @type {Object}
     * @default style = {Configuration Of Class Style}
     */
    iconUnselectedStyle: {
      fill: "#999"
    },
    /**
     * @description Legend render level
     * Priority rendering high level
     * @type {Number}
     * @default rLevel = 20
     */
    rLevel: 20,
    /**
     * @description Legend animation curve
     * @type {String}
     * @default animationCurve = 'easeOutCubic'
     */
    animationCurve: "easeOutCubic",
    /**
     * @description Legend animation frame
     * @type {Number}
     * @default animationFrame = 50
     */
    animationFrame: 50
  };
  return ft.legendConfig = e, ft;
}
var ta;
function Ue() {
  return ta || (ta = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.changeDefaultConfig = v, Object.defineProperty(e, "colorConfig", {
      enumerable: !0,
      get: function() {
        return r.colorConfig;
      }
    }), Object.defineProperty(e, "gridConfig", {
      enumerable: !0,
      get: function() {
        return n.gridConfig;
      }
    }), Object.defineProperty(e, "xAxisConfig", {
      enumerable: !0,
      get: function() {
        return t.xAxisConfig;
      }
    }), Object.defineProperty(e, "yAxisConfig", {
      enumerable: !0,
      get: function() {
        return t.yAxisConfig;
      }
    }), Object.defineProperty(e, "titleConfig", {
      enumerable: !0,
      get: function() {
        return a.titleConfig;
      }
    }), Object.defineProperty(e, "lineConfig", {
      enumerable: !0,
      get: function() {
        return o.lineConfig;
      }
    }), Object.defineProperty(e, "barConfig", {
      enumerable: !0,
      get: function() {
        return l.barConfig;
      }
    }), Object.defineProperty(e, "pieConfig", {
      enumerable: !0,
      get: function() {
        return c.pieConfig;
      }
    }), Object.defineProperty(e, "radarAxisConfig", {
      enumerable: !0,
      get: function() {
        return z.radarAxisConfig;
      }
    }), Object.defineProperty(e, "radarConfig", {
      enumerable: !0,
      get: function() {
        return q.radarConfig;
      }
    }), Object.defineProperty(e, "gaugeConfig", {
      enumerable: !0,
      get: function() {
        return N.gaugeConfig;
      }
    }), Object.defineProperty(e, "legendConfig", {
      enumerable: !0,
      get: function() {
        return X.legendConfig;
      }
    }), e.keys = void 0;
    var r = ds(), n = hs(), t = vs(), a = ps(), o = gs(), l = ms(), c = Oa(), z = ys(), q = bs(), N = Ga(), X = xs(), F = ze(), A = {
      colorConfig: r.colorConfig,
      gridConfig: n.gridConfig,
      xAxisConfig: t.xAxisConfig,
      yAxisConfig: t.yAxisConfig,
      titleConfig: a.titleConfig,
      lineConfig: o.lineConfig,
      barConfig: l.barConfig,
      pieConfig: c.pieConfig,
      radarAxisConfig: z.radarAxisConfig,
      radarConfig: q.radarConfig,
      gaugeConfig: N.gaugeConfig,
      legendConfig: X.legendConfig
    };
    function v(B, I) {
      if (!A["".concat(B, "Config")]) {
        console.warn("Change default config Error - Invalid key!");
        return;
      }
      (0, F.deepMerge)(A["".concat(B, "Config")], I);
    }
    var M = ["color", "title", "legend", "xAxis", "yAxis", "grid", "radarAxis", "line", "bar", "pie", "radar", "gauge"];
    e.keys = M;
  }(kr)), kr;
}
var ra;
function Cs() {
  if (ra)
    return Ct;
  ra = 1, Object.defineProperty(Ct, "__esModule", {
    value: !0
  }), Ct.mergeColor = t;
  var e = Ue(), r = Te(), n = ze();
  function t(a) {
    var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, l = (0, r.deepClone)(e.colorConfig, !0), c = o.color, z = o.series;
    if (z || (z = []), c || (c = []), o.color = c = (0, n.deepMerge)(l, c), !!z.length) {
      var q = c.length;
      z.forEach(function(A, v) {
        A.color || (A.color = c[v % q]);
      });
      var N = z.filter(function(A) {
        var v = A.type;
        return v === "pie";
      });
      N.forEach(function(A) {
        return A.data.forEach(function(v, M) {
          return v.color = c[M % q];
        });
      });
      var X = z.filter(function(A) {
        var v = A.type;
        return v === "gauge";
      });
      X.forEach(function(A) {
        return A.data.forEach(function(v, M) {
          return v.color = c[M % q];
        });
      });
      var F = z.filter(function(A) {
        var v = A.type, M = A.independentColor;
        return v === "bar" && M;
      });
      F.forEach(function(A) {
        A.independentColors || (A.independentColors = c);
      });
    }
  }
  return Ct;
}
var _t = {}, tt = {}, na;
function Xe() {
  if (na)
    return tt;
  na = 1;
  var e = we;
  Object.defineProperty(tt, "__esModule", {
    value: !0
  }), tt.doUpdate = N, tt.Updater = void 0;
  var r = e(Be()), n = e(Ee()), t = e(mt()), a = function X(F, A) {
    (0, t.default)(this, X);
    var v = F.chart, M = F.key, B = F.getGraphConfig;
    if (typeof B != "function") {
      console.warn("Updater need function getGraphConfig!");
      return;
    }
    v[M] || (this.graphs = v[M] = []), Object.assign(this, F), this.update(A);
  };
  tt.Updater = a, a.prototype.update = function(X) {
    var F = this, A = this.graphs, v = this.beforeUpdate;
    if (o(this, X), !!X.length) {
      var M = (0, n.default)(v);
      X.forEach(function(B, I) {
        M === "function" && v(A, B, I, F);
        var W = A[I];
        W ? l(W, B, I, F) : z(A, B, I, F);
      });
    }
  };
  function o(X, F) {
    var A = X.graphs, v = X.chart.render, M = A.length, B = F.length;
    if (M > B) {
      var I = A.splice(B);
      I.forEach(function(W) {
        return W.forEach(function(b) {
          return v.delGraph(b);
        });
      });
    }
  }
  function l(X, F, A, v) {
    var M = v.getGraphConfig, B = v.chart.render, I = v.beforeChange, W = M(F, v);
    c(X, W, B), X.forEach(function(b, $) {
      var f = W[$];
      typeof I == "function" && I(b, f), q(b, f);
    });
  }
  function c(X, F, A) {
    var v = X.length, M = F.length;
    if (M > v) {
      var B = X.slice(-1)[0], I = M - v, W = new Array(I).fill(0).map(function($) {
        return A.clone(B);
      });
      X.push.apply(X, (0, r.default)(W));
    } else if (M < v) {
      var b = X.splice(M);
      b.forEach(function($) {
        return A.delGraph($);
      });
    }
  }
  function z(X, F, A, v) {
    var M = v.getGraphConfig, B = v.getStartGraphConfig, I = v.chart, W = I.render, b = null;
    typeof B == "function" && (b = B(F, v));
    var $ = M(F, v);
    if ($.length) {
      b ? (X[A] = b.map(function(_) {
        return W.add(_);
      }), X[A].forEach(function(_, O) {
        var m = $[O];
        q(_, m);
      })) : X[A] = $.map(function(_) {
        return W.add(_);
      });
      var f = v.afterAddGraph;
      typeof f == "function" && f(X[A]);
    }
  }
  function q(X, F) {
    var A = Object.keys(F);
    A.forEach(function(v) {
      v === "shape" || v === "style" ? X.animation(v, F[v], !0) : X[v] = F[v];
    });
  }
  function N() {
    var X = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, F = X.chart, A = X.series, v = X.key, M = X.getGraphConfig, B = X.getStartGraphConfig, I = X.beforeChange, W = X.beforeUpdate, b = X.afterAddGraph;
    F[v] ? F[v].update(A) : F[v] = new a({
      chart: F,
      key: v,
      getGraphConfig: M,
      getStartGraphConfig: B,
      beforeChange: I,
      beforeUpdate: W,
      afterAddGraph: b
    }, A);
  }
  return tt;
}
var aa;
function _s() {
  if (aa)
    return _t;
  aa = 1;
  var e = we;
  Object.defineProperty(_t, "__esModule", {
    value: !0
  }), _t.title = l;
  var r = e(Fe()), n = Xe(), t = Te(), a = Ue(), o = ze();
  function l(N) {
    var X = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, F = [];
    X.title && (F[0] = (0, o.deepMerge)((0, t.deepClone)(a.titleConfig, !0), X.title)), (0, n.doUpdate)({
      chart: N,
      series: F,
      key: "title",
      getGraphConfig: c
    });
  }
  function c(N, X) {
    var F = a.titleConfig.animationCurve, A = a.titleConfig.animationFrame, v = a.titleConfig.rLevel, M = z(N, X), B = q(N);
    return [{
      name: "text",
      index: v,
      visible: N.show,
      animationCurve: F,
      animationFrame: A,
      shape: M,
      style: B
    }];
  }
  function z(N, X) {
    var F = N.offset, A = N.text, v = X.chart.gridArea, M = v.x, B = v.y, I = v.w, W = (0, r.default)(F, 2), b = W[0], $ = W[1];
    return {
      content: A,
      position: [M + I / 2 + b, B + $]
    };
  }
  function q(N) {
    var X = N.style;
    return X;
  }
  return _t;
}
var $t = {}, ia;
function $s() {
  if (ia)
    return $t;
  ia = 1;
  var e = we;
  Object.defineProperty($t, "__esModule", {
    value: !0
  }), $t.grid = q;
  var r = e(Fe()), n = e(Ve()), t = Xe(), a = Te(), o = Ue(), l = ze();
  function c(v, M) {
    var B = Object.keys(v);
    if (Object.getOwnPropertySymbols) {
      var I = Object.getOwnPropertySymbols(v);
      M && (I = I.filter(function(W) {
        return Object.getOwnPropertyDescriptor(v, W).enumerable;
      })), B.push.apply(B, I);
    }
    return B;
  }
  function z(v) {
    for (var M = 1; M < arguments.length; M++) {
      var B = arguments[M] != null ? arguments[M] : {};
      M % 2 ? c(Object(B), !0).forEach(function(I) {
        (0, n.default)(v, I, B[I]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(v, Object.getOwnPropertyDescriptors(B)) : c(Object(B)).forEach(function(I) {
        Object.defineProperty(v, I, Object.getOwnPropertyDescriptor(B, I));
      });
    }
    return v;
  }
  function q(v) {
    var M = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, B = M.grid;
    B = (0, l.deepMerge)((0, a.deepClone)(o.gridConfig, !0), B || {}), (0, t.doUpdate)({
      chart: v,
      series: [B],
      key: "grid",
      getGraphConfig: N
    });
  }
  function N(v, M) {
    var B = v.animationCurve, I = v.animationFrame, W = v.rLevel, b = X(v, M), $ = A(v);
    return M.chart.gridArea = z({}, b), [{
      name: "rect",
      index: W,
      animationCurve: B,
      animationFrame: I,
      shape: b,
      style: $
    }];
  }
  function X(v, M) {
    var B = (0, r.default)(M.chart.render.area, 2), I = B[0], W = B[1], b = F(v.left, I), $ = F(v.right, I), f = F(v.top, W), _ = F(v.bottom, W), O = I - b - $, m = W - f - _;
    return {
      x: b,
      y: f,
      w: O,
      h: m
    };
  }
  function F(v, M) {
    return typeof v == "number" ? v : typeof v != "string" ? 0 : M * parseInt(v) / 100;
  }
  function A(v) {
    var M = v.style;
    return M;
  }
  return $t;
}
var Pt = {}, oa;
function Ps() {
  if (oa)
    return Pt;
  oa = 1;
  var e = we;
  Object.defineProperty(Pt, "__esModule", {
    value: !0
  }), Pt.axis = v;
  var r = e(Ee()), n = e(Fe()), t = e(Ve()), a = e(Be()), o = Xe(), l = Ue(), c = ze(), z = Te();
  function q(s, x) {
    var w = Object.keys(s);
    if (Object.getOwnPropertySymbols) {
      var R = Object.getOwnPropertySymbols(s);
      x && (R = R.filter(function(Y) {
        return Object.getOwnPropertyDescriptor(s, Y).enumerable;
      })), w.push.apply(w, R);
    }
    return w;
  }
  function N(s) {
    for (var x = 1; x < arguments.length; x++) {
      var w = arguments[x] != null ? arguments[x] : {};
      x % 2 ? q(Object(w), !0).forEach(function(R) {
        (0, t.default)(s, R, w[R]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(w)) : q(Object(w)).forEach(function(R) {
        Object.defineProperty(s, R, Object.getOwnPropertyDescriptor(w, R));
      });
    }
    return s;
  }
  var X = {
    xAxisConfig: l.xAxisConfig,
    yAxisConfig: l.yAxisConfig
  }, F = Math.abs, A = Math.pow;
  function v(s) {
    var x = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, w = x.xAxis, R = x.yAxis, Y = x.series, re = [];
    w && R && Y && (re = M(w, R), re = B(re), re = re.filter(function(ue) {
      var de = ue.show;
      return de;
    }), re = I(re), re = W(re, Y), re = U(re), re = Z(re, s), re = u(re), re = h(re), re = P(re, s)), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisLine",
      getGraphConfig: E
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisTick",
      getGraphConfig: ae
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisLabel",
      getGraphConfig: Q
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "axisName",
      getGraphConfig: k
    }), (0, o.doUpdate)({
      chart: s,
      series: re,
      key: "splitLine",
      getGraphConfig: te
    }), s.axisData = re;
  }
  function M(s, x) {
    var w = [], R = [];
    if (s instanceof Array) {
      var Y;
      (Y = w).push.apply(Y, (0, a.default)(s));
    } else
      w.push(s);
    if (x instanceof Array) {
      var re;
      (re = R).push.apply(re, (0, a.default)(x));
    } else
      R.push(x);
    return w.splice(2), R.splice(2), w = w.map(function(ue, de) {
      return N(N({}, ue), {}, {
        index: de,
        axis: "x"
      });
    }), R = R.map(function(ue, de) {
      return N(N({}, ue), {}, {
        index: de,
        axis: "y"
      });
    }), [].concat((0, a.default)(w), (0, a.default)(R));
  }
  function B(s) {
    var x = s.filter(function(R) {
      var Y = R.axis;
      return Y === "x";
    }), w = s.filter(function(R) {
      var Y = R.axis;
      return Y === "y";
    });
    return x = x.map(function(R) {
      return (0, c.deepMerge)((0, z.deepClone)(l.xAxisConfig), R);
    }), w = w.map(function(R) {
      return (0, c.deepMerge)((0, z.deepClone)(l.yAxisConfig), R);
    }), [].concat((0, a.default)(x), (0, a.default)(w));
  }
  function I(s) {
    var x = s.filter(function(R) {
      var Y = R.data;
      return Y === "value";
    }), w = s.filter(function(R) {
      var Y = R.data;
      return Y !== "value";
    });
    return x.forEach(function(R) {
      typeof R.boundaryGap != "boolean" && (R.boundaryGap = !1);
    }), w.forEach(function(R) {
      typeof R.boundaryGap != "boolean" && (R.boundaryGap = !0);
    }), [].concat((0, a.default)(x), (0, a.default)(w));
  }
  function W(s, x) {
    var w = s.filter(function(Y) {
      var re = Y.data;
      return re === "value";
    }), R = s.filter(function(Y) {
      var re = Y.data;
      return re instanceof Array;
    });
    return w = b(w, x), R = g(R), [].concat((0, a.default)(w), (0, a.default)(R));
  }
  function b(s, x) {
    return s.map(function(w) {
      var R = $(w, x), Y = O(w, R), re = (0, n.default)(Y, 2), ue = re[0], de = re[1], he = V(ue, de, w), pe = w.axisLabel.formatter, ge = [];
      return ue < 0 && de > 0 ? ge = d(ue, de, he) : ge = G(ue, de, he), ge = ge.map(function(ye) {
        return parseFloat(ye.toFixed(2));
      }), N(N({}, w), {}, {
        maxValue: ge.slice(-1)[0],
        minValue: ge[0],
        label: L(ge, pe)
      });
    });
  }
  function $(s, x) {
    if (x = x.filter(function(ue) {
      var de = ue.show, he = ue.type;
      return !(de === !1 || he === "pie");
    }), x.length === 0)
      return [0, 0];
    var w = s.index, R = s.axis;
    x = _(x);
    var Y = R + "Axis", re = x.filter(function(ue) {
      return ue[Y] === w;
    });
    return re.length || (re = x), f(re);
  }
  function f(s) {
    if (s) {
      var x = Math.min.apply(Math, (0, a.default)(s.map(function(R) {
        var Y = R.data;
        return Math.min.apply(Math, (0, a.default)((0, c.filterNonNumber)(Y)));
      }))), w = Math.max.apply(Math, (0, a.default)(s.map(function(R) {
        var Y = R.data;
        return Math.max.apply(Math, (0, a.default)((0, c.filterNonNumber)(Y)));
      })));
      return [x, w];
    }
  }
  function _(s) {
    var x = (0, z.deepClone)(s, !0);
    return s.forEach(function(w, R) {
      var Y = (0, c.mergeSameStackData)(w, s);
      x[R].data = Y;
    }), x;
  }
  function O(s, x) {
    var w = s.min, R = s.max, Y = s.axis, re = (0, n.default)(x, 2), ue = re[0], de = re[1], he = (0, r.default)(w), pe = (0, r.default)(R);
    if (C(w) || (w = X[Y + "AxisConfig"].min, he = "string"), C(R) || (R = X[Y + "AxisConfig"].max, pe = "string"), he === "string") {
      w = parseInt(ue - F(ue * parseFloat(w) / 100));
      var ge = m(w);
      w = parseFloat((w / ge - 0.1).toFixed(1)) * ge;
    }
    if (pe === "string") {
      R = parseInt(de + F(de * parseFloat(R) / 100));
      var ye = m(R);
      R = parseFloat((R / ye + 0.1).toFixed(1)) * ye;
    }
    return [w, R];
  }
  function m(s) {
    var x = F(s).toString(), w = x.length, R = x.replace(/0*$/g, "").indexOf("0"), Y = w - 1;
    return R !== -1 && (Y -= R), A(10, Y);
  }
  function C(s) {
    var x = (0, r.default)(s), w = x === "string" && /^\d+%$/.test(s), R = x === "number";
    return w || R;
  }
  function d(s, x, w) {
    var R = [], Y = [], re = 0, ue = 0;
    do
      R.push(re -= w);
    while (re > s);
    do
      Y.push(ue += w);
    while (ue < x);
    return [].concat((0, a.default)(R.reverse()), [0], (0, a.default)(Y));
  }
  function G(s, x, w) {
    var R = [s], Y = s;
    do
      R.push(Y += w);
    while (Y < x);
    return R;
  }
  function L(s, x) {
    return x && (typeof x == "string" && (s = s.map(function(w) {
      return x.replace("{value}", w);
    })), typeof x == "function" && (s = s.map(function(w, R) {
      return x({
        value: w,
        index: R
      });
    }))), s;
  }
  function g(s) {
    return s.map(function(x) {
      var w = x.data, R = x.axisLabel.formatter;
      return N(N({}, x), {}, {
        label: L(w, R)
      });
    });
  }
  function V(s, x, w) {
    var R = w.interval, Y = w.minInterval, re = w.maxInterval, ue = w.splitNumber, de = w.axis, he = X[de + "AxisConfig"];
    if (typeof R != "number" && (R = he.interval), typeof Y != "number" && (Y = he.minInterval), typeof re != "number" && (re = he.maxInterval), typeof ue != "number" && (ue = he.splitNumber), typeof R == "number")
      return R;
    var pe = parseInt((x - s) / (ue - 1));
    return pe.toString().length > 1 && (pe = parseInt(pe.toString().replace(/\d$/, "0"))), pe === 0 && (pe = 1), typeof Y == "number" && pe < Y ? Y : typeof re == "number" && pe > re ? re : pe;
  }
  function U(s) {
    var x = s.filter(function(R) {
      var Y = R.axis;
      return Y === "x";
    }), w = s.filter(function(R) {
      var Y = R.axis;
      return Y === "y";
    });
    return x[0] && !x[0].position && (x[0].position = l.xAxisConfig.position), x[1] && !x[1].position && (x[1].position = x[0].position === "bottom" ? "top" : "bottom"), w[0] && !w[0].position && (w[0].position = l.yAxisConfig.position), w[1] && !w[1].position && (w[1].position = w[0].position === "left" ? "right" : "left"), [].concat((0, a.default)(x), (0, a.default)(w));
  }
  function Z(s, x) {
    var w = x.gridArea, R = w.x, Y = w.y, re = w.w, ue = w.h;
    return s = s.map(function(de) {
      var he = de.position, pe = [];
      return he === "left" ? pe = [[R, Y], [R, Y + ue]].reverse() : he === "right" ? pe = [[R + re, Y], [R + re, Y + ue]].reverse() : he === "top" ? pe = [[R, Y], [R + re, Y]] : he === "bottom" && (pe = [[R, Y + ue], [R + re, Y + ue]]), N(N({}, de), {}, {
        linePosition: pe
      });
    }), s;
  }
  function u(s, x) {
    return s.map(function(w) {
      var R = w.axis, Y = w.linePosition, re = w.position, ue = w.label, de = w.boundaryGap;
      typeof de != "boolean" && (de = X[R + "AxisConfig"].boundaryGap);
      var he = ue.length, pe = (0, n.default)(Y, 2), ge = (0, n.default)(pe[0], 2), ye = ge[0], Oe = ge[1], Qe = (0, n.default)(pe[1], 2), Je = Qe[0], Ye = Qe[1], Da = R === "x" ? Je - ye : Ye - Oe, bt = Da / (de ? he : he - 1), cn = new Array(he).fill(0).map(function(Sf, xt) {
        return R === "x" ? [ye + bt * (de ? xt + 0.5 : xt), Oe] : [ye, Oe + bt * (de ? xt + 0.5 : xt)];
      }), Ba = y(R, de, re, cn, bt);
      return N(N({}, w), {}, {
        tickPosition: cn,
        tickLinePosition: Ba,
        tickGap: bt
      });
    });
  }
  function y(s, x, w, R, Y) {
    var re = s === "x" ? 1 : 0, ue = 5;
    s === "x" && w === "top" && (ue = -5), s === "y" && w === "left" && (ue = -5);
    var de = R.map(function(he) {
      var pe = (0, z.deepClone)(he);
      return pe[re] += ue, [(0, z.deepClone)(he), pe];
    });
    return x && (re = s === "x" ? 0 : 1, ue = Y / 2, de.forEach(function(he) {
      var pe = (0, n.default)(he, 2), ge = pe[0], ye = pe[1];
      ge[re] += ue, ye[re] += ue;
    })), de;
  }
  function h(s, x) {
    return s.map(function(w) {
      var R = w.nameGap, Y = w.nameLocation, re = w.position, ue = w.linePosition, de = (0, n.default)(ue, 2), he = de[0], pe = de[1], ge = (0, a.default)(he);
      Y === "end" && (ge = (0, a.default)(pe)), Y === "center" && (ge[0] = (he[0] + pe[0]) / 2, ge[1] = (he[1] + pe[1]) / 2);
      var ye = 0;
      re === "top" && Y === "center" && (ye = 1), re === "bottom" && Y === "center" && (ye = 1), re === "left" && Y !== "center" && (ye = 1), re === "right" && Y !== "center" && (ye = 1);
      var Oe = R;
      return re === "top" && Y !== "end" && (Oe *= -1), re === "left" && Y !== "start" && (Oe *= -1), re === "bottom" && Y === "start" && (Oe *= -1), re === "right" && Y === "end" && (Oe *= -1), ge[ye] += Oe, N(N({}, w), {}, {
        namePosition: ge
      });
    });
  }
  function P(s, x) {
    var w = x.gridArea, R = w.w, Y = w.h;
    return s.map(function(re) {
      var ue = re.tickLinePosition, de = re.position, he = re.boundaryGap, pe = 0, ge = R;
      (de === "top" || de === "bottom") && (pe = 1), (de === "top" || de === "bottom") && (ge = Y), (de === "right" || de === "bottom") && (ge *= -1);
      var ye = ue.map(function(Oe) {
        var Qe = (0, n.default)(Oe, 1), Je = Qe[0], Ye = (0, a.default)(Je);
        return Ye[pe] += ge, [(0, a.default)(Je), Ye];
      });
      return he || ye.shift(), N(N({}, re), {}, {
        splitLinePosition: ye
      });
    });
  }
  function E(s) {
    var x = s.animationCurve, w = s.animationFrame, R = s.rLevel;
    return [{
      name: "polyline",
      index: R,
      visible: s.axisLine.show,
      animationCurve: x,
      animationFrame: w,
      shape: K(s),
      style: ee(s)
    }];
  }
  function K(s) {
    var x = s.linePosition;
    return {
      points: x
    };
  }
  function ee(s) {
    return s.axisLine.style;
  }
  function ae(s) {
    var x = s.animationCurve, w = s.animationFrame, R = s.rLevel, Y = oe(s), re = ve(s);
    return Y.map(function(ue) {
      return {
        name: "polyline",
        index: R,
        visible: s.axisTick.show,
        animationCurve: x,
        animationFrame: w,
        shape: ue,
        style: re
      };
    });
  }
  function oe(s) {
    var x = s.tickLinePosition;
    return x.map(function(w) {
      return {
        points: w
      };
    });
  }
  function ve(s) {
    return s.axisTick.style;
  }
  function Q(s) {
    var x = s.animationCurve, w = s.animationFrame, R = s.rLevel, Y = ie(s), re = fe(s, Y);
    return Y.map(function(ue, de) {
      return {
        name: "text",
        index: R,
        visible: s.axisLabel.show,
        animationCurve: x,
        animationFrame: w,
        shape: ue,
        style: re[de],
        setGraphCenter: function() {
        }
      };
    });
  }
  function ie(s) {
    var x = s.label, w = s.tickPosition, R = s.position;
    return w.map(function(Y, re) {
      return {
        position: ce(Y, R),
        content: x[re].toString()
      };
    });
  }
  function ce(s, x) {
    var w = 0, R = 10;
    return (x === "top" || x === "bottom") && (w = 1), (x === "top" || x === "left") && (R = -10), s = (0, z.deepClone)(s), s[w] += R, s;
  }
  function fe(s, x) {
    var w = s.position, R = s.axisLabel.style, Y = T(w);
    R = (0, c.deepMerge)(Y, R);
    var re = x.map(function(ue) {
      var de = ue.position;
      return N(N({}, R), {}, {
        graphCenter: de
      });
    });
    return re;
  }
  function T(s) {
    if (s === "left")
      return {
        textAlign: "right",
        textBaseline: "middle"
      };
    if (s === "right")
      return {
        textAlign: "left",
        textBaseline: "middle"
      };
    if (s === "top")
      return {
        textAlign: "center",
        textBaseline: "bottom"
      };
    if (s === "bottom")
      return {
        textAlign: "center",
        textBaseline: "top"
      };
  }
  function k(s) {
    var x = s.animationCurve, w = s.animationFrame, R = s.rLevel;
    return [{
      name: "text",
      index: R,
      animationCurve: x,
      animationFrame: w,
      shape: S(s),
      style: D(s)
    }];
  }
  function S(s) {
    var x = s.name, w = s.namePosition;
    return {
      content: x,
      position: w
    };
  }
  function D(s) {
    var x = s.nameLocation, w = s.position, R = s.nameTextStyle, Y = H(w, x);
    return (0, c.deepMerge)(Y, R);
  }
  function H(s, x) {
    if (s === "top" && x === "start" || s === "bottom" && x === "start" || s === "left" && x === "center")
      return {
        textAlign: "right",
        textBaseline: "middle"
      };
    if (s === "top" && x === "end" || s === "bottom" && x === "end" || s === "right" && x === "center")
      return {
        textAlign: "left",
        textBaseline: "middle"
      };
    if (s === "top" && x === "center" || s === "left" && x === "end" || s === "right" && x === "end")
      return {
        textAlign: "center",
        textBaseline: "bottom"
      };
    if (s === "bottom" && x === "center" || s === "left" && x === "start" || s === "right" && x === "start")
      return {
        textAlign: "center",
        textBaseline: "top"
      };
  }
  function te(s) {
    var x = s.animationCurve, w = s.animationFrame, R = s.rLevel, Y = p(s), re = j(s);
    return Y.map(function(ue) {
      return {
        name: "polyline",
        index: R,
        visible: s.splitLine.show,
        animationCurve: x,
        animationFrame: w,
        shape: ue,
        style: re
      };
    });
  }
  function p(s) {
    var x = s.splitLinePosition;
    return x.map(function(w) {
      return {
        points: w
      };
    });
  }
  function j(s) {
    return s.splitLine.style;
  }
  return Pt;
}
var wt = {}, la;
function ws() {
  if (la)
    return wt;
  la = 1;
  var e = we;
  Object.defineProperty(wt, "__esModule", {
    value: !0
  }), wt.line = A;
  var r = e(Ee()), n = e(Fe()), t = e(Be()), a = e(Ve()), o = Xe(), l = Ue(), c = e(sn()), z = ze();
  function q(Q, ie) {
    var ce = Object.keys(Q);
    if (Object.getOwnPropertySymbols) {
      var fe = Object.getOwnPropertySymbols(Q);
      ie && (fe = fe.filter(function(T) {
        return Object.getOwnPropertyDescriptor(Q, T).enumerable;
      })), ce.push.apply(ce, fe);
    }
    return ce;
  }
  function N(Q) {
    for (var ie = 1; ie < arguments.length; ie++) {
      var ce = arguments[ie] != null ? arguments[ie] : {};
      ie % 2 ? q(Object(ce), !0).forEach(function(fe) {
        (0, a.default)(Q, fe, ce[fe]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(Q, Object.getOwnPropertyDescriptors(ce)) : q(Object(ce)).forEach(function(fe) {
        Object.defineProperty(Q, fe, Object.getOwnPropertyDescriptor(ce, fe));
      });
    }
    return Q;
  }
  var X = c.default.polylineToBezierCurve, F = c.default.getBezierCurveLength;
  function A(Q) {
    var ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, ce = ie.xAxis, fe = ie.yAxis, T = ie.series, k = [];
    ce && fe && T && (k = (0, z.initNeedSeries)(T, l.lineConfig, "line"), k = v(k, Q)), (0, o.doUpdate)({
      chart: Q,
      series: k,
      key: "lineArea",
      getGraphConfig: b,
      getStartGraphConfig: m,
      beforeUpdate: C,
      beforeChange: d
    }), (0, o.doUpdate)({
      chart: Q,
      series: k,
      key: "line",
      getGraphConfig: G,
      getStartGraphConfig: U,
      beforeUpdate: C,
      beforeChange: d
    }), (0, o.doUpdate)({
      chart: Q,
      series: k,
      key: "linePoint",
      getGraphConfig: Z,
      getStartGraphConfig: h
    }), (0, o.doUpdate)({
      chart: Q,
      series: k,
      key: "lineLabel",
      getGraphConfig: P
    });
  }
  function v(Q, ie) {
    var ce = ie.axisData;
    return Q.map(function(fe) {
      var T = (0, z.mergeSameStackData)(fe, Q);
      T = M(fe, T);
      var k = B(fe, ce), S = I(T, k), D = W(k);
      return N(N({}, fe), {}, {
        linePosition: S.filter(function(H) {
          return H;
        }),
        lineFillBottomPos: D
      });
    });
  }
  function M(Q, ie) {
    var ce = Q.data;
    return ie.map(function(fe, T) {
      return typeof ce[T] == "number" ? fe : null;
    });
  }
  function B(Q, ie) {
    var ce = Q.xAxisIndex, fe = Q.yAxisIndex, T = ie.find(function(S) {
      var D = S.axis, H = S.index;
      return D === "x" && H === ce;
    }), k = ie.find(function(S) {
      var D = S.axis, H = S.index;
      return D === "y" && H === fe;
    });
    return [T, k];
  }
  function I(Q, ie) {
    var ce = ie.findIndex(function(re) {
      var ue = re.data;
      return ue === "value";
    }), fe = ie[ce], T = ie[1 - ce], k = fe.linePosition, S = fe.axis, D = T.tickPosition, H = D.length, te = S === "x" ? 0 : 1, p = k[0][te], j = k[1][te], s = j - p, x = fe.maxValue, w = fe.minValue, R = x - w, Y = new Array(H).fill(0).map(function(re, ue) {
      var de = Q[ue];
      if (typeof de != "number")
        return null;
      var he = (de - w) / R;
      return R === 0 && (he = 0), he * s + p;
    });
    return Y.map(function(re, ue) {
      if (ue >= H || typeof re != "number")
        return null;
      var de = [re, D[ue][1 - te]];
      return te === 0 || de.reverse(), de;
    });
  }
  function W(Q) {
    var ie = Q.find(function(j) {
      var s = j.data;
      return s === "value";
    }), ce = ie.axis, fe = ie.linePosition, T = ie.minValue, k = ie.maxValue, S = ce === "x" ? 0 : 1, D = fe[0][S];
    if (T < 0 && k > 0) {
      var H = k - T, te = Math.abs(fe[0][S] - fe[1][S]), p = Math.abs(T) / H * te;
      ce === "y" && (p *= -1), D += p;
    }
    return {
      changeIndex: S,
      changeValue: D
    };
  }
  function b(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.lineFillBottomPos, T = Q.rLevel;
    return [{
      name: L(Q),
      index: T,
      animationCurve: ie,
      animationFrame: ce,
      visible: Q.lineArea.show,
      lineFillBottomPos: fe,
      shape: $(Q),
      style: f(Q),
      drawed: O
    }];
  }
  function $(Q) {
    var ie = Q.linePosition;
    return {
      points: ie
    };
  }
  function f(Q) {
    var ie = Q.lineArea, ce = Q.color, fe = ie.gradient, T = ie.style, k = [T.fill || ce], S = (0, z.deepMerge)(k, fe);
    S.length === 1 && S.push(S[0]);
    var D = _(Q);
    return T = N(N({}, T), {}, {
      stroke: "rgba(0, 0, 0, 0)"
    }), (0, z.deepMerge)({
      gradientColor: S,
      gradientParams: D,
      gradientType: "linear",
      gradientWith: "fill"
    }, T);
  }
  function _(Q) {
    var ie = Q.lineFillBottomPos, ce = Q.linePosition, fe = ie.changeIndex, T = ie.changeValue, k = ce.map(function(te) {
      return te[fe];
    }), S = Math.max.apply(Math, (0, t.default)(k)), D = Math.min.apply(Math, (0, t.default)(k)), H = S;
    return fe === 1 && (H = D), fe === 1 ? [0, H, 0, T] : [H, 0, T, 0];
  }
  function O(Q, ie) {
    var ce = Q.lineFillBottomPos, fe = Q.shape, T = ie.ctx, k = fe.points, S = ce.changeIndex, D = ce.changeValue, H = (0, t.default)(k[k.length - 1]), te = (0, t.default)(k[0]);
    H[S] = D, te[S] = D, T.lineTo.apply(T, (0, t.default)(H)), T.lineTo.apply(T, (0, t.default)(te)), T.closePath(), T.fill();
  }
  function m(Q) {
    var ie = b(Q)[0], ce = N({}, ie.style);
    return ce.opacity = 0, ie.style = ce, [ie];
  }
  function C(Q, ie, ce, fe) {
    var T = Q[ce];
    if (T) {
      var k = L(ie), S = fe.chart.render, D = T[0].name, H = k !== D;
      H && (T.forEach(function(te) {
        return S.delGraph(te);
      }), Q[ce] = null);
    }
  }
  function d(Q, ie) {
    var ce = ie.shape.points, fe = Q.shape.points, T = fe.length, k = ce.length;
    if (k > T) {
      var S = fe.slice(-1)[0], D = new Array(k - T).fill(0).map(function(H) {
        return (0, t.default)(S);
      });
      fe.push.apply(fe, (0, t.default)(D));
    } else
      k < T && fe.splice(k);
  }
  function G(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.rLevel;
    return [{
      name: L(Q),
      index: fe + 1,
      animationCurve: ie,
      animationFrame: ce,
      shape: $(Q),
      style: g(Q)
    }];
  }
  function L(Q) {
    var ie = Q.smooth;
    return ie ? "smoothline" : "polyline";
  }
  function g(Q) {
    var ie = Q.lineStyle, ce = Q.color, fe = Q.smooth, T = Q.linePosition, k = V(T, fe);
    return (0, z.deepMerge)({
      stroke: ce,
      lineDash: [k, 0]
    }, ie);
  }
  function V(Q) {
    var ie = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    if (!ie)
      return (0, z.getPolylineLength)(Q);
    var ce = X(Q);
    return F(ce);
  }
  function U(Q) {
    var ie = Q.lineStyle.lineDash, ce = G(Q)[0], fe = ce.style.lineDash;
    return ie ? fe = [0, 0] : fe = (0, t.default)(fe).reverse(), ce.style.lineDash = fe, [ce];
  }
  function Z(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.rLevel, T = u(Q), k = y(Q);
    return T.map(function(S) {
      return {
        name: "circle",
        index: fe + 2,
        visible: Q.linePoint.show,
        animationCurve: ie,
        animationFrame: ce,
        shape: S,
        style: k
      };
    });
  }
  function u(Q) {
    var ie = Q.linePosition, ce = Q.linePoint.radius;
    return ie.map(function(fe) {
      var T = (0, n.default)(fe, 2), k = T[0], S = T[1];
      return {
        r: ce,
        rx: k,
        ry: S
      };
    });
  }
  function y(Q) {
    var ie = Q.color, ce = Q.linePoint.style;
    return (0, z.deepMerge)({
      stroke: ie
    }, ce);
  }
  function h(Q) {
    var ie = Z(Q);
    return ie.forEach(function(ce) {
      ce.shape.r = 0.1;
    }), ie;
  }
  function P(Q) {
    var ie = Q.animationCurve, ce = Q.animationFrame, fe = Q.rLevel, T = E(Q), k = ve(Q);
    return T.map(function(S, D) {
      return {
        name: "text",
        index: fe + 3,
        visible: Q.label.show,
        animationCurve: ie,
        animationFrame: ce,
        shape: S,
        style: k
      };
    });
  }
  function E(Q) {
    var ie = oe(Q), ce = K(Q);
    return ie.map(function(fe, T) {
      return {
        content: fe,
        position: ce[T]
      };
    });
  }
  function K(Q) {
    var ie = Q.linePosition, ce = Q.lineFillBottomPos, fe = Q.label, T = fe.position, k = fe.offset, S = ce.changeIndex, D = ce.changeValue;
    return ie.map(function(H) {
      if (T === "bottom" && (H = (0, t.default)(H), H[S] = D), T === "center") {
        var te = (0, t.default)(H);
        te[S] = D, H = ae(H, te);
      }
      return ee(H, k);
    });
  }
  function ee(Q, ie) {
    var ce = (0, n.default)(Q, 2), fe = ce[0], T = ce[1], k = (0, n.default)(ie, 2), S = k[0], D = k[1];
    return [fe + S, T + D];
  }
  function ae(Q, ie) {
    var ce = (0, n.default)(Q, 2), fe = ce[0], T = ce[1], k = (0, n.default)(ie, 2), S = k[0], D = k[1];
    return [(fe + S) / 2, (T + D) / 2];
  }
  function oe(Q) {
    var ie = Q.data, ce = Q.label.formatter;
    if (ie = ie.filter(function(T) {
      return typeof T == "number";
    }).map(function(T) {
      return T.toString();
    }), !ce)
      return ie;
    var fe = (0, r.default)(ce);
    return fe === "string" ? ie.map(function(T) {
      return ce.replace("{value}", T);
    }) : fe === "function" ? ie.map(function(T, k) {
      return ce({
        value: T,
        index: k
      });
    }) : ie;
  }
  function ve(Q) {
    var ie = Q.color, ce = Q.label.style;
    return (0, z.deepMerge)({
      fill: ie
    }, ce);
  }
  return wt;
}
var kt = {}, sa;
function ks() {
  if (sa)
    return kt;
  sa = 1;
  var e = we;
  Object.defineProperty(kt, "__esModule", {
    value: !0
  }), kt.bar = X;
  var r = e(Ee()), n = e(Ve()), t = e(Fe()), a = e(Be()), o = Xe(), l = Ue(), c = Te(), z = ze();
  function q(p, j) {
    var s = Object.keys(p);
    if (Object.getOwnPropertySymbols) {
      var x = Object.getOwnPropertySymbols(p);
      j && (x = x.filter(function(w) {
        return Object.getOwnPropertyDescriptor(p, w).enumerable;
      })), s.push.apply(s, x);
    }
    return s;
  }
  function N(p) {
    for (var j = 1; j < arguments.length; j++) {
      var s = arguments[j] != null ? arguments[j] : {};
      j % 2 ? q(Object(s), !0).forEach(function(x) {
        (0, n.default)(p, x, s[x]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(p, Object.getOwnPropertyDescriptors(s)) : q(Object(s)).forEach(function(x) {
        Object.defineProperty(p, x, Object.getOwnPropertyDescriptor(s, x));
      });
    }
    return p;
  }
  function X(p) {
    var j = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = j.xAxis, x = j.yAxis, w = j.series, R = [];
    s && x && w && (R = (0, z.initNeedSeries)(w, l.barConfig, "bar"), R = F(R, p), R = A(R), R = O(R)), (0, o.doUpdate)({
      chart: p,
      series: R.slice(-1),
      key: "backgroundBar",
      getGraphConfig: V
    }), R.reverse(), (0, o.doUpdate)({
      chart: p,
      series: R,
      key: "bar",
      getGraphConfig: y,
      getStartGraphConfig: ve,
      beforeUpdate: fe
    }), (0, o.doUpdate)({
      chart: p,
      series: R,
      key: "barLabel",
      getGraphConfig: T
    });
  }
  function F(p, j) {
    var s = j.axisData;
    return p.forEach(function(x) {
      var w = x.xAxisIndex, R = x.yAxisIndex;
      typeof w != "number" && (w = 0), typeof R != "number" && (R = 0);
      var Y = s.find(function(he) {
        var pe = he.axis, ge = he.index;
        return "".concat(pe).concat(ge) === "x".concat(w);
      }), re = s.find(function(he) {
        var pe = he.axis, ge = he.index;
        return "".concat(pe).concat(ge) === "y".concat(R);
      }), ue = [Y, re], de = ue.findIndex(function(he) {
        var pe = he.data;
        return pe === "value";
      });
      x.valueAxis = ue[de], x.labelAxis = ue[1 - de];
    }), p;
  }
  function A(p, j) {
    var s = M(p);
    return s.forEach(function(x) {
      v(x), I(x), W(x), b(x), _(x);
    }), p;
  }
  function v(p) {
    var j = B(p);
    j = j.map(function(x) {
      return {
        stack: x,
        index: -1
      };
    });
    var s = 0;
    p.forEach(function(x) {
      var w = x.stack;
      if (!w)
        x.barIndex = s, s++;
      else {
        var R = j.find(function(Y) {
          var re = Y.stack;
          return re === w;
        });
        R.index === -1 && (R.index = s, s++), x.barIndex = R.index;
      }
    });
  }
  function M(p) {
    var j = p.map(function(s) {
      var x = s.labelAxis, w = x.axis, R = x.index;
      return w + R;
    });
    return j = (0, a.default)(new Set(j)), j.map(function(s) {
      return p.filter(function(x) {
        var w = x.labelAxis, R = w.axis, Y = w.index;
        return R + Y === s;
      });
    });
  }
  function B(p) {
    var j = [];
    return p.forEach(function(s) {
      var x = s.stack;
      x && j.push(x);
    }), (0, a.default)(new Set(j));
  }
  function I(p) {
    var j = (0, a.default)(new Set(p.map(function(s) {
      var x = s.barIndex;
      return x;
    }))).length;
    p.forEach(function(s) {
      return s.barNum = j;
    });
  }
  function W(p) {
    var j = p.slice(-1)[0], s = j.barCategoryGap, x = j.labelAxis.tickGap, w = 0;
    typeof s == "number" ? w = s : w = (1 - parseInt(s) / 100) * x, p.forEach(function(R) {
      return R.barCategoryWidth = w;
    });
  }
  function b(p) {
    var j = p.slice(-1)[0], s = j.barCategoryWidth, x = j.barWidth, w = j.barGap, R = j.barNum, Y = [];
    typeof x == "number" || x !== "auto" ? Y = $(s, x, w) : x === "auto" && (Y = f(s, x, w, R));
    var re = Y, ue = (0, t.default)(re, 2), de = ue[0], he = ue[1];
    p.forEach(function(pe) {
      pe.barWidth = de, pe.barGap = he;
    });
  }
  function $(p, j, s) {
    var x = 0, w = 0;
    return typeof j == "number" ? x = j : x = parseInt(j) / 100 * p, typeof s == "number" ? w = s : w = parseInt(s) / 100 * x, [x, w];
  }
  function f(p, j, s, x) {
    var w = 0, R = 0, Y = p / x;
    if (typeof s == "number")
      R = s, w = Y - R;
    else {
      var re = 10 + parseInt(s) / 10;
      re === 0 ? (w = Y * 2, R = -w) : (w = Y / re * 10, R = Y - w);
    }
    return [w, R];
  }
  function _(p) {
    var j = p.slice(-1)[0], s = j.barGap, x = j.barWidth, w = j.barNum, R = (s + x) * w - s;
    p.forEach(function(Y) {
      return Y.barAllWidthAndGap = R;
    });
  }
  function O(p, j) {
    return p = C(p), p = m(p), p = G(p), p = L(p), p;
  }
  function m(p) {
    return p.map(function(j) {
      var s = j.labelAxis, x = j.barAllWidthAndGap, w = j.barGap, R = j.barWidth, Y = j.barIndex, re = s.tickGap, ue = s.tickPosition, de = s.axis, he = de === "x" ? 0 : 1, pe = ue.map(function(ge, ye) {
        var Oe = ue[ye][he] - re / 2, Qe = Oe + (re - x) / 2;
        return Qe + (Y + 0.5) * R + Y * w;
      });
      return N(N({}, j), {}, {
        barLabelAxisPos: pe
      });
    });
  }
  function C(p) {
    return p.map(function(j) {
      var s = (0, z.mergeSameStackData)(j, p);
      s = d(j, s);
      var x = j.valueAxis, w = x.axis, R = x.minValue, Y = x.maxValue, re = x.linePosition, ue = g(R, Y, R < 0 ? 0 : R, re, w), de = s.map(function(pe) {
        return g(R, Y, pe, re, w);
      }), he = de.map(function(pe) {
        return [ue, pe];
      });
      return N(N({}, j), {}, {
        barValueAxisPos: he
      });
    });
  }
  function d(p, j) {
    var s = p.data;
    return j.map(function(x, w) {
      return typeof s[w] == "number" ? x : null;
    }).filter(function(x) {
      return x !== null;
    });
  }
  function G(p) {
    return p.map(function(j) {
      var s = j.barLabelAxisPos, x = j.data;
      return x.forEach(function(w, R) {
        typeof w != "number" && (s[R] = null);
      }), N(N({}, j), {}, {
        barLabelAxisPos: s.filter(function(w) {
          return w !== null;
        })
      });
    });
  }
  function L(p) {
    return p.forEach(function(j) {
      var s = j.data, x = j.barLabelAxisPos, w = j.barValueAxisPos, R = s.filter(function(re) {
        return typeof re == "number";
      }).length, Y = x.length;
      Y > R && (x.splice(R), w.splice(R));
    }), p;
  }
  function g(p, j, s, x, w) {
    if (typeof s != "number")
      return null;
    var R = j - p, Y = w === "x" ? 0 : 1, re = x[1][Y] - x[0][Y], ue = (s - p) / R;
    R === 0 && (ue = 0);
    var de = ue * re;
    return de + x[0][Y];
  }
  function V(p) {
    var j = p.animationCurve, s = p.animationFrame, x = p.rLevel, w = U(p), R = u(p);
    return w.map(function(Y) {
      return {
        name: "rect",
        index: x,
        visible: p.backgroundBar.show,
        animationCurve: j,
        animationFrame: s,
        shape: Y,
        style: R
      };
    });
  }
  function U(p) {
    var j = p.labelAxis, s = p.valueAxis, x = j.tickPosition, w = s.axis, R = s.linePosition, Y = Z(p), re = Y / 2, ue = w === "x" ? 0 : 1, de = x.map(function(ye) {
      return ye[1 - ue];
    }), he = [R[0][ue], R[1][ue]], pe = he[0], ge = he[1];
    return de.map(function(ye) {
      return w === "x" ? {
        x: pe,
        y: ye - re,
        w: ge - pe,
        h: Y
      } : {
        x: ye - re,
        y: ge,
        w: Y,
        h: pe - ge
      };
    });
  }
  function Z(p) {
    var j = p.barAllWidthAndGap, s = p.barCategoryWidth, x = p.backgroundBar, w = x.width;
    return typeof w == "number" ? w : w === "auto" ? j : parseInt(w) / 100 * s;
  }
  function u(p) {
    return p.backgroundBar.style;
  }
  function y(p) {
    var j = p.barLabelAxisPos, s = p.animationCurve, x = p.animationFrame, w = p.rLevel, R = h(p);
    return j.map(function(Y, re) {
      return {
        name: R,
        index: w,
        animationCurve: s,
        animationFrame: x,
        shape: P(p, re),
        style: ae(p, re)
      };
    });
  }
  function h(p) {
    var j = p.shapeType;
    return j === "leftEchelon" || j === "rightEchelon" ? "polyline" : "rect";
  }
  function P(p, j) {
    var s = p.shapeType;
    return s === "leftEchelon" ? E(p, j) : s === "rightEchelon" ? K(p, j) : ee(p, j);
  }
  function E(p, j) {
    var s = p.barValueAxisPos, x = p.barLabelAxisPos, w = p.barWidth, R = p.echelonOffset, Y = (0, t.default)(s[j], 2), re = Y[0], ue = Y[1], de = x[j], he = w / 2, pe = p.valueAxis.axis, ge = [];
    return pe === "x" ? (ge[0] = [ue, de - he], ge[1] = [ue, de + he], ge[2] = [re, de + he], ge[3] = [re + R, de - he], ue - re < R && ge.splice(3, 1)) : (ge[0] = [de - he, ue], ge[1] = [de + he, ue], ge[2] = [de + he, re], ge[3] = [de - he, re - R], re - ue < R && ge.splice(3, 1)), {
      points: ge,
      close: !0
    };
  }
  function K(p, j) {
    var s = p.barValueAxisPos, x = p.barLabelAxisPos, w = p.barWidth, R = p.echelonOffset, Y = (0, t.default)(s[j], 2), re = Y[0], ue = Y[1], de = x[j], he = w / 2, pe = p.valueAxis.axis, ge = [];
    return pe === "x" ? (ge[0] = [ue, de + he], ge[1] = [ue, de - he], ge[2] = [re, de - he], ge[3] = [re + R, de + he], ue - re < R && ge.splice(2, 1)) : (ge[0] = [de + he, ue], ge[1] = [de - he, ue], ge[2] = [de - he, re], ge[3] = [de + he, re - R], re - ue < R && ge.splice(2, 1)), {
      points: ge,
      close: !0
    };
  }
  function ee(p, j) {
    var s = p.barValueAxisPos, x = p.barLabelAxisPos, w = p.barWidth, R = (0, t.default)(s[j], 2), Y = R[0], re = R[1], ue = x[j], de = p.valueAxis.axis, he = {};
    return de === "x" ? (he.x = Y, he.y = ue - w / 2, he.w = re - Y, he.h = w) : (he.x = ue - w / 2, he.y = re, he.w = w, he.h = Y - re), he;
  }
  function ae(p, j) {
    var s = p.barStyle, x = p.gradient, w = p.color, R = p.independentColor, Y = p.independentColors, re = [s.fill || w], ue = (0, z.deepMerge)(re, x.color);
    if (R) {
      var de = Y[j % Y.length];
      ue = de instanceof Array ? de : [de];
    }
    ue.length === 1 && ue.push(ue[0]);
    var he = oe(p, j);
    return (0, z.deepMerge)({
      gradientColor: ue,
      gradientParams: he,
      gradientType: "linear",
      gradientWith: "fill"
    }, s);
  }
  function oe(p, j) {
    var s = p.barValueAxisPos, x = p.barLabelAxisPos, w = p.data, R = p.valueAxis, Y = R.linePosition, re = R.axis, ue = (0, t.default)(s[j], 2), de = ue[0], he = ue[1], pe = x[j], ge = w[j], ye = (0, t.default)(Y, 2), Oe = ye[0], Qe = ye[1], Je = re === "x" ? 0 : 1, Ye = he;
    return p.gradient.local || (Ye = ge < 0 ? Oe[Je] : Qe[Je]), re === "y" ? [pe, Ye, pe, de] : [Ye, pe, de, pe];
  }
  function ve(p) {
    var j = y(p), s = p.shapeType;
    return j.forEach(function(x) {
      var w = x.shape;
      s === "leftEchelon" ? w = Q(w, p) : s === "rightEchelon" ? w = ie(w, p) : w = ce(w, p), x.shape = w;
    }), j;
  }
  function Q(p, j) {
    var s = j.valueAxis.axis;
    p = (0, c.deepClone)(p);
    var x = p, w = x.points, R = s === "x" ? 0 : 1, Y = w[2][R];
    return w.forEach(function(re) {
      return re[R] = Y;
    }), p;
  }
  function ie(p, j) {
    var s = j.valueAxis.axis;
    p = (0, c.deepClone)(p);
    var x = p, w = x.points, R = s === "x" ? 0 : 1, Y = w[2][R];
    return w.forEach(function(re) {
      return re[R] = Y;
    }), p;
  }
  function ce(p, j) {
    var s = j.valueAxis.axis, x = p.x, w = p.y, R = p.w, Y = p.h;
    return s === "x" ? R = 0 : (w = w + Y, Y = 0), {
      x,
      y: w,
      w: R,
      h: Y
    };
  }
  function fe(p, j, s, x) {
    var w = x.chart.render, R = h(j);
    p[s] && p[s][0].name !== R && (p[s].forEach(function(Y) {
      return w.delGraph(Y);
    }), p[s] = null);
  }
  function T(p) {
    var j = p.animationCurve, s = p.animationFrame, x = p.rLevel, w = k(p), R = te(p);
    return w.map(function(Y) {
      return {
        name: "text",
        index: x,
        visible: p.label.show,
        animationCurve: j,
        animationFrame: s,
        shape: Y,
        style: R
      };
    });
  }
  function k(p) {
    var j = S(p), s = D(p);
    return s.map(function(x, w) {
      return {
        position: x,
        content: j[w]
      };
    });
  }
  function S(p) {
    var j = p.data, s = p.label, x = s.formatter;
    if (j = j.filter(function(R) {
      return typeof R == "number";
    }).map(function(R) {
      return R.toString();
    }), !x)
      return j;
    var w = (0, r.default)(x);
    return w === "string" ? j.map(function(R) {
      return x.replace("{value}", R);
    }) : w === "function" ? j.map(function(R, Y) {
      return x({
        value: R,
        index: Y
      });
    }) : j;
  }
  function D(p) {
    var j = p.label, s = p.barValueAxisPos, x = p.barLabelAxisPos, w = j.position, R = j.offset, Y = p.valueAxis.axis;
    return s.map(function(re, ue) {
      var de = (0, t.default)(re, 2), he = de[0], pe = de[1], ge = x[ue], ye = [pe, ge];
      return w === "bottom" && (ye = [he, ge]), w === "center" && (ye = [(he + pe) / 2, ge]), Y === "y" && ye.reverse(), H(ye, R);
    });
  }
  function H(p, j) {
    var s = (0, t.default)(p, 2), x = s[0], w = s[1], R = (0, t.default)(j, 2), Y = R[0], re = R[1];
    return [x + Y, w + re];
  }
  function te(p) {
    var j = p.color, s = p.label.style, x = p.gradient.color;
    return x.length && (j = x[0]), s = (0, z.deepMerge)({
      fill: j
    }, s), s;
  }
  return kt;
}
var At = {}, ua;
function As() {
  if (ua)
    return At;
  ua = 1;
  var e = we;
  Object.defineProperty(At, "__esModule", {
    value: !0
  }), At.pie = X;
  var r = e(Ve()), n = e(Ee()), t = e(Fe()), a = e(Be()), o = Xe(), l = Oa(), c = Te(), z = ze();
  function q(k, S) {
    var D = Object.keys(k);
    if (Object.getOwnPropertySymbols) {
      var H = Object.getOwnPropertySymbols(k);
      S && (H = H.filter(function(te) {
        return Object.getOwnPropertyDescriptor(k, te).enumerable;
      })), D.push.apply(D, H);
    }
    return D;
  }
  function N(k) {
    for (var S = 1; S < arguments.length; S++) {
      var D = arguments[S] != null ? arguments[S] : {};
      S % 2 ? q(Object(D), !0).forEach(function(H) {
        (0, r.default)(k, H, D[H]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(k, Object.getOwnPropertyDescriptors(D)) : q(Object(D)).forEach(function(H) {
        Object.defineProperty(k, H, Object.getOwnPropertyDescriptor(D, H));
      });
    }
    return k;
  }
  function X(k) {
    var S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, D = S.series;
    D || (D = []);
    var H = (0, z.initNeedSeries)(D, l.pieConfig, "pie");
    H = F(H, k), H = A(H, k), H = M(H), H = W(H), H = f(H), H = O(H), H = C(H), H = d(H), (0, o.doUpdate)({
      chart: k,
      series: H,
      key: "pie",
      getGraphConfig: Z,
      getStartGraphConfig: u,
      beforeChange: y
    }), (0, o.doUpdate)({
      chart: k,
      series: H,
      key: "pieInsideLabel",
      getGraphConfig: E
    }), (0, o.doUpdate)({
      chart: k,
      series: H,
      key: "pieOutsideLabelLine",
      getGraphConfig: ae,
      getStartGraphConfig: oe
    }), (0, o.doUpdate)({
      chart: k,
      series: H,
      key: "pieOutsideLabel",
      getGraphConfig: ie,
      getStartGraphConfig: ce
    });
  }
  function F(k, S) {
    var D = S.render.area;
    return k.forEach(function(H) {
      var te = H.center;
      te = te.map(function(p, j) {
        return typeof p == "number" ? p : parseInt(p) / 100 * D[j];
      }), H.center = te;
    }), k;
  }
  function A(k, S) {
    var D = Math.min.apply(Math, (0, a.default)(S.render.area)) / 2;
    return k.forEach(function(H) {
      var te = H.radius, p = H.data;
      te = v(te, D), p.forEach(function(j) {
        var s = j.radius;
        s || (s = te), s = v(s, D), j.radius = s;
      }), H.radius = te;
    }), k;
  }
  function v(k, S) {
    return k instanceof Array || (k = [0, k]), k = k.map(function(D) {
      return typeof D == "number" ? D : parseInt(D) / 100 * S;
    }), k;
  }
  function M(k, S) {
    var D = k.filter(function(H) {
      var te = H.roseType;
      return te;
    });
    return D.forEach(function(H) {
      var te = H.radius, p = H.data, j = H.roseSort, s = I(H), x = (0, a.default)(p);
      p = B(p), p.forEach(function(w, R) {
        w.radius[1] = te[1] - s * R;
      }), j ? p.reverse() : H.data = x, H.roseIncrement = s;
    }), k;
  }
  function B(k) {
    return k.sort(function(S, D) {
      var H = S.value, te = D.value;
      if (H === te)
        return 0;
      if (H > te)
        return -1;
      if (H < te)
        return 1;
    });
  }
  function I(k) {
    var S = k.radius, D = k.roseIncrement;
    if (typeof D == "number")
      return D;
    if (D === "auto") {
      var H = k.data, te = H.reduce(function(s, x) {
        var w = x.radius;
        return [].concat((0, a.default)(s), (0, a.default)(w));
      }, []), p = Math.min.apply(Math, (0, a.default)(te)), j = Math.max.apply(Math, (0, a.default)(te));
      return (j - p) * 0.6 / (H.length - 1 || 1);
    }
    return parseInt(D) / 100 * S[1];
  }
  function W(k) {
    return k.forEach(function(S) {
      var D = S.data, H = S.percentToFixed, te = $(D);
      D.forEach(function(j) {
        var s = j.value;
        j.percent = s / te * 100, j.percentForLabel = b(s / te * 100, H);
      });
      var p = (0, z.mulAdd)(D.slice(0, -1).map(function(j) {
        var s = j.percent;
        return s;
      }));
      D.slice(-1)[0].percent = 100 - p, D.slice(-1)[0].percentForLabel = b(100 - p, H);
    }), k;
  }
  function b(k) {
    var S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, D = k.toString(), H = D.split("."), te = H[1] || "0", p = te.slice(0, S);
    return H[1] = p, parseFloat(H.join("."));
  }
  function $(k) {
    return (0, z.mulAdd)(k.map(function(S) {
      var D = S.value;
      return D;
    }));
  }
  function f(k) {
    return k.forEach(function(S) {
      var D = S.startAngle, H = S.data;
      H.forEach(function(te, p) {
        var j = _(H, p), s = (0, t.default)(j, 2), x = s[0], w = s[1];
        te.startAngle = D + x, te.endAngle = D + w;
      });
    }), k;
  }
  function _(k, S) {
    var D = Math.PI * 2, H = k.slice(0, S + 1), te = (0, z.mulAdd)(H.map(function(s) {
      var x = s.percent;
      return x;
    })), p = k[S].percent, j = te - p;
    return [D * j / 100, D * te / 100];
  }
  function O(k) {
    return k.forEach(function(S) {
      var D = S.data;
      D.forEach(function(H) {
        H.insideLabelPos = m(S, H);
      });
    }), k;
  }
  function m(k, S) {
    var D = k.center, H = S.startAngle, te = S.endAngle, p = (0, t.default)(S.radius, 2), j = p[0], s = p[1], x = (j + s) / 2, w = (H + te) / 2;
    return c.getCircleRadianPoint.apply(void 0, (0, a.default)(D).concat([x, w]));
  }
  function C(k) {
    return k.forEach(function(S) {
      var D = S.data, H = S.center;
      D.forEach(function(te) {
        var p = te.startAngle, j = te.endAngle, s = te.radius, x = (p + j) / 2, w = c.getCircleRadianPoint.apply(void 0, (0, a.default)(H).concat([s[1], x]));
        te.edgeCenterPos = w;
      });
    }), k;
  }
  function d(k) {
    return k.forEach(function(S) {
      var D = g(S), H = g(S, !1);
      D = V(D), H = V(H), U(D, S), U(H, S, !1);
    }), k;
  }
  function G(k) {
    var S = k.outsideLabel.labelLineBendGap, D = L(k);
    return typeof S != "number" && (S = parseInt(S) / 100 * D), S + D;
  }
  function L(k) {
    var S = k.data, D = S.map(function(H) {
      var te = (0, t.default)(H.radius, 2);
      te[0];
      var p = te[1];
      return p;
    });
    return Math.max.apply(Math, (0, a.default)(D));
  }
  function g(k) {
    var S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, D = k.data, H = k.center, te = H[0];
    return D.filter(function(p) {
      var j = p.edgeCenterPos, s = j[0];
      return S ? s <= te : s > te;
    });
  }
  function V(k) {
    return k.sort(function(S, D) {
      var H = (0, t.default)(S.edgeCenterPos, 2);
      H[0];
      var te = H[1], p = (0, t.default)(D.edgeCenterPos, 2);
      p[0];
      var j = p[1];
      if (te > j)
        return 1;
      if (te < j)
        return -1;
      if (te === j)
        return 0;
    }), k;
  }
  function U(k, S) {
    var D = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, H = S.center, te = S.outsideLabel, p = G(S);
    k.forEach(function(j) {
      var s = j.edgeCenterPos, x = j.startAngle, w = j.endAngle, R = te.labelLineEndLength, Y = (x + w) / 2, re = c.getCircleRadianPoint.apply(void 0, (0, a.default)(H).concat([p, Y])), ue = (0, a.default)(re);
      ue[0] += R * (D ? -1 : 1), j.labelLine = [s, re, ue], j.labelLineLength = (0, z.getPolylineLength)(j.labelLine), j.align = {
        textAlign: "left",
        textBaseline: "middle"
      }, D && (j.align.textAlign = "right");
    });
  }
  function Z(k) {
    var S = k.data, D = k.animationCurve, H = k.animationFrame, te = k.rLevel;
    return S.map(function(p, j) {
      return {
        name: "pie",
        index: te,
        animationCurve: D,
        animationFrame: H,
        shape: h(k, j),
        style: P(k, j)
      };
    });
  }
  function u(k) {
    var S = k.animationDelayGap, D = k.startAnimationCurve, H = Z(k);
    return H.forEach(function(te, p) {
      te.animationCurve = D, te.animationDelay = p * S, te.shape.or = te.shape.ir;
    }), H;
  }
  function y(k) {
    k.animationDelay = 0;
  }
  function h(k, S) {
    var D = k.center, H = k.data, te = H[S], p = te.radius, j = te.startAngle, s = te.endAngle;
    return {
      startAngle: j,
      endAngle: s,
      ir: p[0],
      or: p[1],
      rx: D[0],
      ry: D[1]
    };
  }
  function P(k, S) {
    var D = k.pieStyle, H = k.data, te = H[S], p = te.color;
    return (0, z.deepMerge)({
      fill: p
    }, D);
  }
  function E(k) {
    var S = k.animationCurve, D = k.animationFrame, H = k.data, te = k.rLevel;
    return H.map(function(p, j) {
      return {
        name: "text",
        index: te,
        visible: k.insideLabel.show,
        animationCurve: S,
        animationFrame: D,
        shape: K(k, j),
        style: ee(k)
      };
    });
  }
  function K(k, S) {
    var D = k.insideLabel, H = k.data, te = D.formatter, p = H[S], j = (0, n.default)(te), s = "";
    return j === "string" && (s = te.replace("{name}", p.name), s = s.replace("{percent}", p.percentForLabel), s = s.replace("{value}", p.value)), j === "function" && (s = te(p)), {
      content: s,
      position: p.insideLabelPos
    };
  }
  function ee(k, S) {
    var D = k.insideLabel.style;
    return D;
  }
  function ae(k) {
    var S = k.animationCurve, D = k.animationFrame, H = k.data, te = k.rLevel;
    return H.map(function(p, j) {
      return {
        name: "polyline",
        index: te,
        visible: k.outsideLabel.show,
        animationCurve: S,
        animationFrame: D,
        shape: ve(k, j),
        style: Q(k, j)
      };
    });
  }
  function oe(k) {
    var S = k.data, D = ae(k);
    return D.forEach(function(H, te) {
      H.style.lineDash = [0, S[te].labelLineLength];
    }), D;
  }
  function ve(k, S) {
    var D = k.data, H = D[S];
    return {
      points: H.labelLine
    };
  }
  function Q(k, S) {
    var D = k.outsideLabel, H = k.data, te = D.labelLineStyle, p = H[S].color;
    return (0, z.deepMerge)({
      stroke: p,
      lineDash: [H[S].labelLineLength, 0]
    }, te);
  }
  function ie(k) {
    var S = k.animationCurve, D = k.animationFrame, H = k.data, te = k.rLevel;
    return H.map(function(p, j) {
      return {
        name: "text",
        index: te,
        visible: k.outsideLabel.show,
        animationCurve: S,
        animationFrame: D,
        shape: fe(k, j),
        style: T(k, j)
      };
    });
  }
  function ce(k) {
    var S = k.data, D = ie(k);
    return D.forEach(function(H, te) {
      H.shape.position = S[te].labelLine[1];
    }), D;
  }
  function fe(k, S) {
    var D = k.outsideLabel, H = k.data, te = D.formatter, p = H[S], j = p.labelLine, s = p.name, x = p.percentForLabel, w = p.value, R = (0, n.default)(te), Y = "";
    return R === "string" && (Y = te.replace("{name}", s), Y = Y.replace("{percent}", x), Y = Y.replace("{value}", w)), R === "function" && (Y = te(H[S])), {
      content: Y,
      position: j[2]
    };
  }
  function T(k, S) {
    var D = k.outsideLabel, H = k.data, te = H[S], p = te.color, j = te.align, s = D.style;
    return (0, z.deepMerge)(N({
      fill: p
    }, j), s);
  }
  return At;
}
var Lt = {}, ca;
function Ls() {
  if (ca)
    return Lt;
  ca = 1;
  var e = we;
  Object.defineProperty(Lt, "__esModule", {
    value: !0
  }), Lt.radarAxis = N;
  var r = e(Fe()), n = e(Ve()), t = e(Be()), a = Xe(), o = Ue(), l = Te(), c = ze();
  function z(u, y) {
    var h = Object.keys(u);
    if (Object.getOwnPropertySymbols) {
      var P = Object.getOwnPropertySymbols(u);
      y && (P = P.filter(function(E) {
        return Object.getOwnPropertyDescriptor(u, E).enumerable;
      })), h.push.apply(h, P);
    }
    return h;
  }
  function q(u) {
    for (var y = 1; y < arguments.length; y++) {
      var h = arguments[y] != null ? arguments[y] : {};
      y % 2 ? z(Object(h), !0).forEach(function(P) {
        (0, n.default)(u, P, h[P]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(u, Object.getOwnPropertyDescriptors(h)) : z(Object(h)).forEach(function(P) {
        Object.defineProperty(u, P, Object.getOwnPropertyDescriptor(h, P));
      });
    }
    return u;
  }
  function N(u) {
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, h = y.radar, P = [];
    h && (P = X(h), P = F(P, u), P = A(P, u), P = v(P), P = M(P), P = B(P), P = [P]);
    var E = P;
    P.length && !P[0].show && (E = []), (0, a.doUpdate)({
      chart: u,
      series: E,
      key: "radarAxisSplitArea",
      getGraphConfig: I,
      beforeUpdate: $,
      beforeChange: f
    }), (0, a.doUpdate)({
      chart: u,
      series: E,
      key: "radarAxisSplitLine",
      getGraphConfig: _,
      beforeUpdate: C,
      beforeChange: d
    }), (0, a.doUpdate)({
      chart: u,
      series: E,
      key: "radarAxisLine",
      getGraphConfig: G
    }), (0, a.doUpdate)({
      chart: u,
      series: E,
      key: "radarAxisLable",
      getGraphConfig: V
    }), u.radarAxis = P[0];
  }
  function X(u) {
    return (0, c.deepMerge)((0, l.deepClone)(o.radarAxisConfig), u);
  }
  function F(u, y) {
    var h = y.render.area, P = u.center;
    return u.centerPos = P.map(function(E, K) {
      return typeof E == "number" ? E : parseInt(E) / 100 * h[K];
    }), u;
  }
  function A(u, y) {
    var h = y.render.area, P = u.splitNum, E = u.radius, K = Math.min.apply(Math, (0, t.default)(h)) / 2;
    typeof E != "number" && (E = parseInt(E) / 100 * K);
    var ee = E / P;
    return u.ringRadius = new Array(P).fill(0).map(function(ae, oe) {
      return ee * (oe + 1);
    }), u.radius = E, u;
  }
  function v(u) {
    var y = u.indicator, h = u.centerPos, P = u.radius, E = u.startAngle, K = Math.PI * 2, ee = y.length, ae = K / ee, oe = new Array(ee).fill(0).map(function(ve, Q) {
      return ae * Q + E;
    });
    return u.axisLineAngles = oe, u.axisLinePosition = oe.map(function(ve) {
      return l.getCircleRadianPoint.apply(void 0, (0, t.default)(h).concat([P, ve]));
    }), u;
  }
  function M(u) {
    var y = u.ringRadius, h = y[0] / 2;
    return u.areaRadius = y.map(function(P) {
      return P - h;
    }), u;
  }
  function B(u) {
    var y = u.axisLineAngles, h = u.centerPos, P = u.radius, E = u.axisLabel;
    return P += E.labelGap, u.axisLabelPosition = y.map(function(K) {
      return l.getCircleRadianPoint.apply(void 0, (0, t.default)(h).concat([P, K]));
    }), u;
  }
  function I(u) {
    var y = u.areaRadius, h = u.polygon, P = u.animationCurve, E = u.animationFrame, K = u.rLevel, ee = h ? "regPolygon" : "ring";
    return y.map(function(ae, oe) {
      return {
        name: ee,
        index: K,
        visible: u.splitArea.show,
        animationCurve: P,
        animationFrame: E,
        shape: W(u, oe),
        style: b(u, oe)
      };
    });
  }
  function W(u, y) {
    var h = u.polygon, P = u.areaRadius, E = u.indicator, K = u.centerPos, ee = E.length, ae = {
      rx: K[0],
      ry: K[1],
      r: P[y]
    };
    return h && (ae.side = ee), ae;
  }
  function b(u, y) {
    var h = u.splitArea, P = u.ringRadius, E = u.axisLineAngles, K = u.polygon, ee = u.centerPos, ae = h.color, oe = h.style;
    oe = q({
      fill: "rgba(0, 0, 0, 0)"
    }, oe);
    var ve = P[0] - 0;
    if (K) {
      var Q = l.getCircleRadianPoint.apply(void 0, (0, t.default)(ee).concat([P[0], E[0]])), ie = l.getCircleRadianPoint.apply(void 0, (0, t.default)(ee).concat([P[0], E[1]]));
      ve = (0, c.getPointToLineDistance)(ee, Q, ie);
    }
    if (oe = (0, c.deepMerge)((0, l.deepClone)(oe, !0), {
      lineWidth: ve
    }), !ae.length)
      return oe;
    var ce = ae.length;
    return (0, c.deepMerge)(oe, {
      stroke: ae[y % ce]
    });
  }
  function $(u, y, h, P) {
    var E = u[h];
    if (E) {
      var K = P.chart.render, ee = y.polygon, ae = E[0].name, oe = ee ? "regPolygon" : "ring", ve = oe !== ae;
      ve && (E.forEach(function(Q) {
        return K.delGraph(Q);
      }), u[h] = null);
    }
  }
  function f(u, y) {
    var h = y.shape.side;
    typeof h == "number" && (u.shape.side = h);
  }
  function _(u) {
    var y = u.ringRadius, h = u.polygon, P = u.animationCurve, E = u.animationFrame, K = u.rLevel, ee = h ? "regPolygon" : "ring";
    return y.map(function(ae, oe) {
      return {
        name: ee,
        index: K,
        animationCurve: P,
        animationFrame: E,
        visible: u.splitLine.show,
        shape: O(u, oe),
        style: m(u, oe)
      };
    });
  }
  function O(u, y) {
    var h = u.ringRadius, P = u.centerPos, E = u.indicator, K = u.polygon, ee = {
      rx: P[0],
      ry: P[1],
      r: h[y]
    }, ae = E.length;
    return K && (ee.side = ae), ee;
  }
  function m(u, y) {
    var h = u.splitLine, P = h.color, E = h.style;
    if (E = q({
      fill: "rgba(0, 0, 0, 0)"
    }, E), !P.length)
      return E;
    var K = P.length;
    return (0, c.deepMerge)(E, {
      stroke: P[y % K]
    });
  }
  function C(u, y, h, P) {
    var E = u[h];
    if (E) {
      var K = P.chart.render, ee = y.polygon, ae = E[0].name, oe = ee ? "regPolygon" : "ring", ve = oe !== ae;
      ve && (E.forEach(function(Q) {
        return K.delGraph(Q);
      }), u[h] = null);
    }
  }
  function d(u, y) {
    var h = y.shape.side;
    typeof h == "number" && (u.shape.side = h);
  }
  function G(u) {
    var y = u.axisLinePosition, h = u.animationCurve, P = u.animationFrame, E = u.rLevel;
    return y.map(function(K, ee) {
      return {
        name: "polyline",
        index: E,
        visible: u.axisLine.show,
        animationCurve: h,
        animationFrame: P,
        shape: L(u, ee),
        style: g(u, ee)
      };
    });
  }
  function L(u, y) {
    var h = u.centerPos, P = u.axisLinePosition, E = [h, P[y]];
    return {
      points: E
    };
  }
  function g(u, y) {
    var h = u.axisLine, P = h.color, E = h.style;
    if (!P.length)
      return E;
    var K = P.length;
    return (0, c.deepMerge)(E, {
      stroke: P[y % K]
    });
  }
  function V(u) {
    var y = u.axisLabelPosition, h = u.animationCurve, P = u.animationFrame, E = u.rLevel;
    return y.map(function(K, ee) {
      return {
        name: "text",
        index: E,
        visible: u.axisLabel.show,
        animationCurve: h,
        animationFrame: P,
        shape: U(u, ee),
        style: Z(u, ee)
      };
    });
  }
  function U(u, y) {
    var h = u.axisLabelPosition, P = u.indicator;
    return {
      content: P[y].name,
      position: h[y]
    };
  }
  function Z(u, y) {
    var h = u.axisLabel, P = (0, r.default)(u.centerPos, 2), E = P[0], K = P[1], ee = u.axisLabelPosition, ae = h.color, oe = h.style, ve = (0, r.default)(ee[y], 2), Q = ve[0], ie = ve[1], ce = Q > E ? "left" : "right", fe = ie > K ? "top" : "bottom";
    if (oe = (0, c.deepMerge)({
      textAlign: ce,
      textBaseline: fe
    }, oe), !ae.length)
      return oe;
    var T = ae.length;
    return (0, c.deepMerge)(oe, {
      fill: ae[y % T]
    });
  }
  return Lt;
}
var St = {}, fa;
function Ss() {
  if (fa)
    return St;
  fa = 1;
  var e = we;
  Object.defineProperty(St, "__esModule", {
    value: !0
  }), St.radar = F;
  var r = e(Ve()), n = e(Ee()), t = e(Fe()), a = e(Be()), o = Xe(), l = Ue(), c = Te(), z = yt, q = ze();
  function N(g, V) {
    var U = Object.keys(g);
    if (Object.getOwnPropertySymbols) {
      var Z = Object.getOwnPropertySymbols(g);
      V && (Z = Z.filter(function(u) {
        return Object.getOwnPropertyDescriptor(g, u).enumerable;
      })), U.push.apply(U, Z);
    }
    return U;
  }
  function X(g) {
    for (var V = 1; V < arguments.length; V++) {
      var U = arguments[V] != null ? arguments[V] : {};
      V % 2 ? N(Object(U), !0).forEach(function(Z) {
        (0, r.default)(g, Z, U[Z]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(g, Object.getOwnPropertyDescriptors(U)) : N(Object(U)).forEach(function(Z) {
        Object.defineProperty(g, Z, Object.getOwnPropertyDescriptor(U, Z));
      });
    }
    return g;
  }
  function F(g) {
    var V = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, U = V.series;
    U || (U = []);
    var Z = (0, q.initNeedSeries)(U, l.radarConfig, "radar");
    Z = A(Z, g), Z = v(Z, g), Z = M(Z, g), (0, o.doUpdate)({
      chart: g,
      series: Z,
      key: "radar",
      getGraphConfig: B,
      getStartGraphConfig: I,
      beforeChange: $
    }), (0, o.doUpdate)({
      chart: g,
      series: Z,
      key: "radarPoint",
      getGraphConfig: f,
      getStartGraphConfig: _
    }), (0, o.doUpdate)({
      chart: g,
      series: Z,
      key: "radarLabel",
      getGraphConfig: C
    });
  }
  function A(g, V) {
    var U = V.radarAxis;
    if (!U)
      return [];
    var Z = U.indicator, u = U.axisLineAngles, y = U.radius, h = U.centerPos;
    return g.forEach(function(P) {
      var E = P.data;
      P.dataRadius = [], P.radarPosition = Z.map(function(K, ee) {
        var ae = K.max, oe = K.min, ve = E[ee];
        typeof ae != "number" && (ae = ve), typeof oe != "number" && (oe = 0), typeof ve != "number" && (ve = oe);
        var Q = (ve - oe) / (ae - oe) * y;
        return P.dataRadius[ee] = Q, c.getCircleRadianPoint.apply(void 0, (0, a.default)(h).concat([Q, u[ee]]));
      });
    }), g;
  }
  function v(g, V) {
    var U = V.radarAxis;
    if (!U)
      return [];
    var Z = U.centerPos, u = U.axisLineAngles;
    return g.forEach(function(y) {
      var h = y.dataRadius, P = y.label, E = P.labelGap;
      y.labelPosition = h.map(function(K, ee) {
        return c.getCircleRadianPoint.apply(void 0, (0, a.default)(Z).concat([K + E, u[ee]]));
      });
    }), g;
  }
  function M(g, V) {
    var U = V.radarAxis;
    if (!U)
      return [];
    var Z = (0, t.default)(U.centerPos, 2), u = Z[0], y = Z[1];
    return g.forEach(function(h) {
      var P = h.labelPosition, E = P.map(function(K) {
        var ee = (0, t.default)(K, 2), ae = ee[0], oe = ee[1], ve = ae > u ? "left" : "right", Q = oe > y ? "top" : "bottom";
        return {
          textAlign: ve,
          textBaseline: Q
        };
      });
      h.labelAlign = E;
    }), g;
  }
  function B(g) {
    var V = g.animationCurve, U = g.animationFrame, Z = g.rLevel;
    return [{
      name: "polyline",
      index: Z,
      animationCurve: V,
      animationFrame: U,
      shape: W(g),
      style: b(g)
    }];
  }
  function I(g, V) {
    var U = V.chart.radarAxis.centerPos, Z = B(g)[0], u = Z.shape.points.length, y = new Array(u).fill(0).map(function(h) {
      return (0, a.default)(U);
    });
    return Z.shape.points = y, [Z];
  }
  function W(g) {
    var V = g.radarPosition;
    return {
      points: V,
      close: !0
    };
  }
  function b(g) {
    var V = g.radarStyle, U = g.color, Z = (0, z.getRgbaValue)(U);
    Z[3] = 0.5;
    var u = {
      stroke: U,
      fill: (0, z.getColorFromRgbValue)(Z)
    };
    return (0, q.deepMerge)(u, V);
  }
  function $(g, V) {
    var U = V.shape, Z = g.shape.points, u = Z.length, y = U.points.length;
    if (y > u) {
      var h = Z.slice(-1)[0], P = new Array(y - u).fill(0).map(function(E) {
        return (0, a.default)(h);
      });
      Z.push.apply(Z, (0, a.default)(P));
    } else
      y < u && Z.splice(y);
  }
  function f(g) {
    var V = g.radarPosition, U = g.animationCurve, Z = g.animationFrame, u = g.rLevel;
    return V.map(function(y, h) {
      return {
        name: "circle",
        index: u,
        animationCurve: U,
        animationFrame: Z,
        visible: g.point.show,
        shape: O(g, h),
        style: m(g)
      };
    });
  }
  function _(g) {
    var V = f(g);
    return V.forEach(function(U) {
      return U.shape.r = 0.01;
    }), V;
  }
  function O(g, V) {
    var U = g.radarPosition, Z = g.point, u = Z.radius, y = U[V];
    return {
      rx: y[0],
      ry: y[1],
      r: u
    };
  }
  function m(g, V) {
    var U = g.point, Z = g.color, u = U.style;
    return (0, q.deepMerge)({
      stroke: Z
    }, u);
  }
  function C(g) {
    var V = g.labelPosition, U = g.animationCurve, Z = g.animationFrame, u = g.rLevel;
    return V.map(function(y, h) {
      return {
        name: "text",
        index: u,
        visible: g.label.show,
        animationCurve: U,
        animationFrame: Z,
        shape: d(g, h),
        style: L(g, h)
      };
    });
  }
  function d(g, V) {
    var U = g.labelPosition, Z = g.label, u = g.data, y = Z.offset, h = Z.formatter, P = G(U[V], y), E = u[V] ? u[V].toString() : "0", K = (0, n.default)(h);
    return K === "string" && (E = h.replace("{value}", E)), K === "function" && (E = h(E)), {
      content: E,
      position: P
    };
  }
  function G(g, V) {
    var U = (0, t.default)(g, 2), Z = U[0], u = U[1], y = (0, t.default)(V, 2), h = y[0], P = y[1];
    return [Z + h, u + P];
  }
  function L(g, V) {
    var U = g.label, Z = g.color, u = g.labelAlign, y = U.style, h = X({
      fill: Z
    }, u[V]);
    return (0, q.deepMerge)(h, y);
  }
  return St;
}
var Ot = {}, da;
function Os() {
  if (da)
    return Ot;
  da = 1;
  var e = we;
  Object.defineProperty(Ot, "__esModule", {
    value: !0
  }), Ot.gauge = F;
  var r = e(Ve()), n = e(Ee()), t = e(Fe()), a = e(Be()), o = Xe(), l = Ga(), c = Te(), z = ze(), q = yt;
  function N(T, k) {
    var S = Object.keys(T);
    if (Object.getOwnPropertySymbols) {
      var D = Object.getOwnPropertySymbols(T);
      k && (D = D.filter(function(H) {
        return Object.getOwnPropertyDescriptor(T, H).enumerable;
      })), S.push.apply(S, D);
    }
    return S;
  }
  function X(T) {
    for (var k = 1; k < arguments.length; k++) {
      var S = arguments[k] != null ? arguments[k] : {};
      k % 2 ? N(Object(S), !0).forEach(function(D) {
        (0, r.default)(T, D, S[D]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(T, Object.getOwnPropertyDescriptors(S)) : N(Object(S)).forEach(function(D) {
        Object.defineProperty(T, D, Object.getOwnPropertyDescriptor(S, D));
      });
    }
    return T;
  }
  function F(T) {
    var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, S = k.series;
    S || (S = []);
    var D = (0, z.initNeedSeries)(S, l.gaugeConfig, "gauge");
    D = A(D, T), D = v(D, T), D = M(D, T), D = B(D), D = I(D), D = W(D), D = b(D), D = $(D), D = f(D), D = _(D), (0, o.doUpdate)({
      chart: T,
      series: D,
      key: "gaugeAxisTick",
      getGraphConfig: m
    }), (0, o.doUpdate)({
      chart: T,
      series: D,
      key: "gaugeAxisLabel",
      getGraphConfig: G
    }), (0, o.doUpdate)({
      chart: T,
      series: D,
      key: "gaugeBackgroundArc",
      getGraphConfig: V,
      getStartGraphConfig: u
    }), (0, o.doUpdate)({
      chart: T,
      series: D,
      key: "gaugeArc",
      getGraphConfig: y,
      getStartGraphConfig: E,
      beforeChange: K
    }), (0, o.doUpdate)({
      chart: T,
      series: D,
      key: "gaugePointer",
      getGraphConfig: ee,
      getStartGraphConfig: Q
    }), (0, o.doUpdate)({
      chart: T,
      series: D,
      key: "gaugeDetails",
      getGraphConfig: ie
    });
  }
  function A(T, k) {
    var S = k.render.area;
    return T.forEach(function(D) {
      var H = D.center;
      H = H.map(function(te, p) {
        return typeof te == "number" ? te : parseInt(te) / 100 * S[p];
      }), D.center = H;
    }), T;
  }
  function v(T, k) {
    var S = k.render.area, D = Math.min.apply(Math, (0, a.default)(S)) / 2;
    return T.forEach(function(H) {
      var te = H.radius;
      typeof te != "number" && (te = parseInt(te) / 100 * D), H.radius = te;
    }), T;
  }
  function M(T, k) {
    var S = k.render.area, D = Math.min.apply(Math, (0, a.default)(S)) / 2;
    return T.forEach(function(H) {
      var te = H.radius, p = H.data, j = H.arcLineWidth;
      p.forEach(function(s) {
        var x = s.radius, w = s.lineWidth;
        x || (x = te), typeof x != "number" && (x = parseInt(x) / 100 * D), s.radius = x, w || (w = j), s.lineWidth = w;
      });
    }), T;
  }
  function B(T, k) {
    return T.forEach(function(S) {
      var D = S.startAngle, H = S.endAngle, te = S.data, p = S.min, j = S.max, s = H - D, x = j - p;
      te.forEach(function(w) {
        var R = w.value, Y = Math.abs((R - p) / x * s);
        w.startAngle = D, w.endAngle = D + Y;
      });
    }), T;
  }
  function I(T, k) {
    return T.forEach(function(S) {
      var D = S.data;
      D.forEach(function(H) {
        var te = H.color, p = H.gradient;
        (!p || !p.length) && (p = te), p instanceof Array || (p = [p]), H.gradient = p;
      });
    }), T;
  }
  function W(T, k) {
    return T.forEach(function(S) {
      var D = S.startAngle, H = S.endAngle, te = S.splitNum, p = S.center, j = S.radius, s = S.arcLineWidth, x = S.axisTick, w = x.tickLength, R = x.style.lineWidth, Y = H - D, re = j - s / 2, ue = re - w, de = Y / (te - 1), he = 2 * Math.PI * j * Y / (Math.PI * 2), pe = Math.ceil(R / 2) / he * Y;
      S.tickAngles = [], S.tickInnerRadius = [], S.tickPosition = new Array(te).fill(0).map(function(ge, ye) {
        var Oe = D + de * ye;
        return ye === 0 && (Oe += pe), ye === te - 1 && (Oe -= pe), S.tickAngles[ye] = Oe, S.tickInnerRadius[ye] = ue, [c.getCircleRadianPoint.apply(void 0, (0, a.default)(p).concat([re, Oe])), c.getCircleRadianPoint.apply(void 0, (0, a.default)(p).concat([ue, Oe]))];
      });
    }), T;
  }
  function b(T, k) {
    return T.forEach(function(S) {
      var D = S.center, H = S.tickInnerRadius, te = S.tickAngles, p = S.axisLabel.labelGap, j = te.map(function(x, w) {
        return c.getCircleRadianPoint.apply(void 0, (0, a.default)(D).concat([H[w] - p, te[w]]));
      }), s = j.map(function(x) {
        var w = (0, t.default)(x, 2), R = w[0], Y = w[1];
        return {
          textAlign: R > D[0] ? "right" : "left",
          textBaseline: Y > D[1] ? "bottom" : "top"
        };
      });
      S.labelPosition = j, S.labelAlign = s;
    }), T;
  }
  function $(T, k) {
    return T.forEach(function(S) {
      var D = S.axisLabel, H = S.min, te = S.max, p = S.splitNum, j = D.data, s = D.formatter, x = (te - H) / (p - 1), w = new Array(p).fill(0).map(function(Y, re) {
        return parseInt(H + x * re);
      }), R = (0, n.default)(s);
      j = (0, z.deepMerge)(w, j).map(function(Y, re) {
        var ue = Y;
        return R === "string" && (ue = s.replace("{value}", Y)), R === "function" && (ue = s({
          value: Y,
          index: re
        })), ue;
      }), D.data = j;
    }), T;
  }
  function f(T, k) {
    return T.forEach(function(S) {
      var D = S.data, H = S.details, te = S.center, p = H.position, j = H.offset, s = D.map(function(x) {
        var w = x.startAngle, R = x.endAngle, Y = x.radius, re = null;
        return p === "center" ? re = te : p === "start" ? re = c.getCircleRadianPoint.apply(void 0, (0, a.default)(te).concat([Y, w])) : p === "end" && (re = c.getCircleRadianPoint.apply(void 0, (0, a.default)(te).concat([Y, R]))), O(re, j);
      });
      S.detailsPosition = s;
    }), T;
  }
  function _(T, k) {
    return T.forEach(function(S) {
      var D = S.data, H = S.details, te = H.formatter, p = (0, n.default)(te), j = D.map(function(s) {
        var x = s.value;
        return p === "string" && (x = te.replace("{value}", "{nt}"), x = x.replace("{name}", s.name)), p === "function" && (x = te(s)), x.toString();
      });
      S.detailsContent = j;
    }), T;
  }
  function O(T, k) {
    var S = (0, t.default)(T, 2), D = S[0], H = S[1], te = (0, t.default)(k, 2), p = te[0], j = te[1];
    return [D + p, H + j];
  }
  function m(T) {
    var k = T.tickPosition, S = T.animationCurve, D = T.animationFrame, H = T.rLevel;
    return k.map(function(te, p) {
      return {
        name: "polyline",
        index: H,
        visible: T.axisTick.show,
        animationCurve: S,
        animationFrame: D,
        shape: C(T, p),
        style: d(T)
      };
    });
  }
  function C(T, k) {
    var S = T.tickPosition;
    return {
      points: S[k]
    };
  }
  function d(T, k) {
    var S = T.axisTick.style;
    return S;
  }
  function G(T) {
    var k = T.labelPosition, S = T.animationCurve, D = T.animationFrame, H = T.rLevel;
    return k.map(function(te, p) {
      return {
        name: "text",
        index: H,
        visible: T.axisLabel.show,
        animationCurve: S,
        animationFrame: D,
        shape: L(T, p),
        style: g(T, p)
      };
    });
  }
  function L(T, k) {
    var S = T.labelPosition, D = T.axisLabel.data;
    return {
      content: D[k].toString(),
      position: S[k]
    };
  }
  function g(T, k) {
    var S = T.labelAlign, D = T.axisLabel, H = D.style;
    return (0, z.deepMerge)(X({}, S[k]), H);
  }
  function V(T) {
    var k = T.animationCurve, S = T.animationFrame, D = T.rLevel;
    return [{
      name: "arc",
      index: D,
      visible: T.backgroundArc.show,
      animationCurve: k,
      animationFrame: S,
      shape: U(T),
      style: Z(T)
    }];
  }
  function U(T) {
    var k = T.startAngle, S = T.endAngle, D = T.center, H = T.radius;
    return {
      rx: D[0],
      ry: D[1],
      r: H,
      startAngle: k,
      endAngle: S
    };
  }
  function Z(T) {
    var k = T.backgroundArc, S = T.arcLineWidth, D = k.style;
    return (0, z.deepMerge)({
      lineWidth: S
    }, D);
  }
  function u(T) {
    var k = V(T)[0], S = X({}, k.shape);
    return S.endAngle = k.shape.startAngle, k.shape = S, [k];
  }
  function y(T) {
    var k = T.data, S = T.animationCurve, D = T.animationFrame, H = T.rLevel;
    return k.map(function(te, p) {
      return {
        name: "agArc",
        index: H,
        animationCurve: S,
        animationFrame: D,
        shape: h(T, p),
        style: P(T, p)
      };
    });
  }
  function h(T, k) {
    var S = T.data, D = T.center, H = T.endAngle, te = S[k], p = te.radius, j = te.startAngle, s = te.endAngle, x = te.localGradient;
    return x && (H = s), {
      rx: D[0],
      ry: D[1],
      r: p,
      startAngle: j,
      endAngle: s,
      gradientEndAngle: H
    };
  }
  function P(T, k) {
    var S = T.data, D = T.dataItemStyle, H = S[k], te = H.lineWidth, p = H.gradient;
    return p = p.map(function(j) {
      return (0, q.getRgbaValue)(j);
    }), (0, z.deepMerge)({
      lineWidth: te,
      gradient: p
    }, D);
  }
  function E(T) {
    var k = y(T);
    return k.map(function(S) {
      var D = X({}, S.shape);
      D.endAngle = S.shape.startAngle, S.shape = D;
    }), k;
  }
  function K(T, k) {
    var S = T.style.gradient, D = S.length, H = k.style.gradient.length;
    if (D > H)
      S.splice(H);
    else {
      var te = S.slice(-1)[0];
      S.push.apply(S, (0, a.default)(new Array(H - D).fill(0).map(function(p) {
        return (0, a.default)(te);
      })));
    }
  }
  function ee(T) {
    var k = T.animationCurve, S = T.animationFrame, D = T.center, H = T.rLevel;
    return [{
      name: "polyline",
      index: H,
      visible: T.pointer.show,
      animationCurve: k,
      animationFrame: S,
      shape: ae(T),
      style: oe(T),
      setGraphCenter: function(p, j) {
        j.style.graphCenter = D;
      }
    }];
  }
  function ae(T) {
    var k = T.center;
    return {
      points: ve(k),
      close: !0
    };
  }
  function oe(T) {
    var k = T.startAngle, S = T.endAngle, D = T.min, H = T.max, te = T.data, p = T.pointer, j = T.center, s = p.valueIndex, x = p.style, w = te[s] ? te[s].value : 0, R = (w - D) / (H - D) * (S - k) + k + Math.PI / 2;
    return (0, z.deepMerge)({
      rotate: (0, z.radianToAngle)(R),
      scale: [1, 1],
      graphCenter: j
    }, x);
  }
  function ve(T) {
    var k = (0, t.default)(T, 2), S = k[0], D = k[1], H = [S, D - 40], te = [S + 5, D], p = [S, D + 10], j = [S - 5, D];
    return [H, te, p, j];
  }
  function Q(T) {
    var k = T.startAngle, S = ee(T)[0];
    return S.style.rotate = (0, z.radianToAngle)(k + Math.PI / 2), [S];
  }
  function ie(T) {
    var k = T.detailsPosition, S = T.animationCurve, D = T.animationFrame, H = T.rLevel, te = T.details.show;
    return k.map(function(p, j) {
      return {
        name: "numberText",
        index: H,
        visible: te,
        animationCurve: S,
        animationFrame: D,
        shape: ce(T, j),
        style: fe(T, j)
      };
    });
  }
  function ce(T, k) {
    var S = T.detailsPosition, D = T.detailsContent, H = T.data, te = T.details, p = S[k], j = D[k], s = H[k].value, x = te.valueToFixed;
    return {
      number: [s],
      content: j,
      position: p,
      toFixed: x
    };
  }
  function fe(T, k) {
    var S = T.details, D = T.data, H = S.style, te = D[k].color;
    return (0, z.deepMerge)({
      fill: te
    }, H);
  }
  return Ot;
}
var Gt = {}, ha;
function Gs() {
  if (ha)
    return Gt;
  ha = 1;
  var e = we;
  Object.defineProperty(Gt, "__esModule", {
    value: !0
  }), Gt.legend = z;
  var r = e(Ve()), n = e(Fe()), t = e(Ee()), a = Xe(), o = Te(), l = Ue(), c = ze();
  function z(u) {
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, h = y.legend;
    h ? (h = (0, c.deepMerge)((0, o.deepClone)(l.legendConfig, !0), h), h = q(h), h = N(h, y, u), h = X(h, u), h = v(h, u), h = [h]) : h = [], (0, a.doUpdate)({
      chart: u,
      series: h,
      key: "legendIcon",
      getGraphConfig: C
    }), (0, a.doUpdate)({
      chart: u,
      series: h,
      key: "legendText",
      getGraphConfig: L
    });
  }
  function q(u) {
    var y = u.data;
    return u.data = y.map(function(h) {
      var P = (0, t.default)(h);
      return P === "string" ? {
        name: h
      } : P === "object" ? h : {
        name: ""
      };
    }), u;
  }
  function N(u, y, h) {
    var P = y.series, E = h.legendStatus, K = u.data.filter(function(ee) {
      var ae = ee.name, oe = P.find(function(ve) {
        var Q = ve.name;
        return ae === Q;
      });
      return oe ? (ee.color || (ee.color = oe.color), ee.icon || (ee.icon = oe.type), ee) : !1;
    });
    return (!E || E.length !== u.data.length) && (E = new Array(u.data.length).fill(!0)), K.forEach(function(ee, ae) {
      return ee.status = E[ae];
    }), u.data = K, h.legendStatus = E, u;
  }
  function X(u, y) {
    var h = y.render.ctx, P = u.data, E = u.textStyle, K = u.textUnselectedStyle;
    return P.forEach(function(ee) {
      var ae = ee.status, oe = ee.name;
      ee.textWidth = F(h, oe, ae ? E : K);
    }), u;
  }
  function F(u, y, h) {
    return u.font = A(h), u.measureText(y).width;
  }
  function A(u) {
    var y = u.fontFamily, h = u.fontSize;
    return "".concat(h, "px ").concat(y);
  }
  function v(u, y) {
    var h = u.orient;
    return h === "vertical" ? f(u, y) : M(u, y), u;
  }
  function M(u, y) {
    var h = u.iconHeight, P = u.itemGap, E = B(u, y), K = E.map(function(oe) {
      return W(oe, u, y);
    }), ee = b(u, y), ae = {
      textAlign: "left",
      textBaseline: "middle"
    };
    E.forEach(function(oe, ve) {
      return oe.forEach(function(Q) {
        var ie = Q.iconPosition, ce = Q.textPosition, fe = K[ve], T = ee + ve * (P + h);
        Q.iconPosition = $(ie, [fe, T]), Q.textPosition = $(ce, [fe, T]), Q.align = ae;
      });
    });
  }
  function B(u, y) {
    var h = u.data, P = u.iconWidth, E = y.render.area[0], K = 0, ee = [[]];
    return h.forEach(function(ae, oe) {
      var ve = I(K, oe, u), Q = ve + P + 5 + ae.textWidth;
      Q >= E && (K = oe, ve = I(K, oe, u), ee.push([])), ae.iconPosition = [ve, 0], ae.textPosition = [ve + P + 5, 0], ee.slice(-1)[0].push(ae);
    }), ee;
  }
  function I(u, y, h) {
    var P = h.data, E = h.iconWidth, K = h.itemGap, ee = P.slice(u, y);
    return (0, c.mulAdd)(ee.map(function(ae) {
      var oe = ae.textWidth;
      return oe;
    })) + (y - u) * (K + 5 + E);
  }
  function W(u, y, h) {
    var P = y.left, E = y.right, K = y.iconWidth, ee = y.itemGap, ae = h.render.area[0], oe = u.length, ve = (0, c.mulAdd)(u.map(function(ie) {
      var ce = ie.textWidth;
      return ce;
    })) + oe * (5 + K) + (oe - 1) * ee, Q = [P, E].findIndex(function(ie) {
      return ie !== "auto";
    });
    return Q === -1 ? (ae - ve) / 2 : Q === 0 ? typeof P == "number" ? P : parseInt(P) / 100 * ae : (typeof E != "number" && (E = parseInt(E) / 100 * ae), ae - (ve + E));
  }
  function b(u, y) {
    var h = u.top, P = u.bottom, E = u.iconHeight, K = y.render.area[1], ee = [h, P].findIndex(function(ie) {
      return ie !== "auto";
    }), ae = E / 2;
    if (ee === -1) {
      var oe = y.gridArea, ve = oe.y, Q = oe.h;
      return ve + Q + 45 - ae;
    } else
      return ee === 0 ? typeof h == "number" ? h - ae : parseInt(h) / 100 * K - ae : (typeof P != "number" && (P = parseInt(P) / 100 * K), K - P - ae);
  }
  function $(u, y) {
    var h = (0, n.default)(u, 2), P = h[0], E = h[1], K = (0, n.default)(y, 2), ee = K[0], ae = K[1];
    return [P + ee, E + ae];
  }
  function f(u, y) {
    var h = _(u, y), P = (0, n.default)(h, 2), E = P[0], K = P[1], ee = O(u, y);
    m(u, E);
    var ae = {
      textAlign: "left",
      textBaseline: "middle"
    };
    u.data.forEach(function(oe) {
      var ve = oe.textPosition, Q = oe.iconPosition;
      oe.textPosition = $(ve, [K, ee]), oe.iconPosition = $(Q, [K, ee]), oe.align = ae;
    });
  }
  function _(u, y) {
    var h = u.left, P = u.right, E = y.render.area[0], K = [h, P].findIndex(function(ae) {
      return ae !== "auto";
    });
    if (K === -1)
      return [!0, E - 10];
    var ee = [h, P][K];
    return typeof ee != "number" && (ee = parseInt(ee) / 100 * E), [!!K, ee];
  }
  function O(u, y) {
    var h = u.iconHeight, P = u.itemGap, E = u.data, K = u.top, ee = u.bottom, ae = y.render.area[1], oe = E.length, ve = oe * h + (oe - 1) * P, Q = [K, ee].findIndex(function(ce) {
      return ce !== "auto";
    });
    if (Q === -1)
      return (ae - ve) / 2;
    var ie = [K, ee][Q];
    return typeof ie != "number" && (ie = parseInt(ie) / 100 * ae), Q === 1 && (ie = ae - ie - ve), ie;
  }
  function m(u, y) {
    var h = u.data, P = u.iconWidth, E = u.iconHeight, K = u.itemGap, ee = E / 2;
    h.forEach(function(ae, oe) {
      var ve = ae.textWidth, Q = (E + K) * oe + ee, ie = y ? 0 - P : 0, ce = y ? ie - 5 - ve : P + 5;
      ae.iconPosition = [ie, Q], ae.textPosition = [ce, Q];
    });
  }
  function C(u, y) {
    var h = u.data, P = u.selectAble, E = u.animationCurve, K = u.animationFrame, ee = u.rLevel;
    return h.map(function(ae, oe) {
      return (0, r.default)({
        name: ae.icon === "line" ? "lineIcon" : "rect",
        index: ee,
        visible: u.show,
        hover: P,
        click: P,
        animationCurve: E,
        animationFrame: K,
        shape: d(u, oe),
        style: G(u, oe)
      }, "click", Z(u, oe, y));
    });
  }
  function d(u, y) {
    var h = u.data, P = u.iconWidth, E = u.iconHeight, K = (0, n.default)(h[y].iconPosition, 2), ee = K[0], ae = K[1], oe = E / 2;
    return {
      x: ee,
      y: ae - oe,
      w: P,
      h: E
    };
  }
  function G(u, y) {
    var h = u.data, P = u.iconStyle, E = u.iconUnselectedStyle, K = h[y], ee = K.status, ae = K.color, oe = ee ? P : E;
    return (0, c.deepMerge)({
      fill: ae
    }, oe);
  }
  function L(u, y) {
    var h = u.data, P = u.selectAble, E = u.animationCurve, K = u.animationFrame, ee = u.rLevel;
    return h.map(function(ae, oe) {
      return {
        name: "text",
        index: ee,
        visible: u.show,
        hover: P,
        animationCurve: E,
        animationFrame: K,
        hoverRect: U(u, oe),
        shape: g(u, oe),
        style: V(u, oe),
        click: Z(u, oe, y)
      };
    });
  }
  function g(u, y) {
    var h = u.data[y], P = h.textPosition, E = h.name;
    return {
      content: E,
      position: P
    };
  }
  function V(u, y) {
    var h = u.textStyle, P = u.textUnselectedStyle, E = u.data[y], K = E.status, ee = E.align, ae = K ? h : P;
    return (0, c.deepMerge)((0, o.deepClone)(ae, !0), ee);
  }
  function U(u, y) {
    var h = u.textStyle, P = u.textUnselectedStyle, E = u.data[y], K = E.status, ee = (0, n.default)(E.textPosition, 2), ae = ee[0], oe = ee[1], ve = E.textWidth, Q = K ? h : P, ie = Q.fontSize;
    return [ae, oe - ie / 2, ve, ie];
  }
  function Z(u, y, h) {
    var P = u.data[y].name;
    return function() {
      var E = h.chart, K = E.legendStatus, ee = E.option, ae = !K[y], oe = ee.series.find(function(ve) {
        var Q = ve.name;
        return Q === P;
      });
      oe.show = ae, K[y] = ae, h.chart.setOption(ee);
    };
  }
  return Gt;
}
var va;
function Ms() {
  return va || (va = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), Object.defineProperty(e, "mergeColor", {
      enumerable: !0,
      get: function() {
        return r.mergeColor;
      }
    }), Object.defineProperty(e, "title", {
      enumerable: !0,
      get: function() {
        return n.title;
      }
    }), Object.defineProperty(e, "grid", {
      enumerable: !0,
      get: function() {
        return t.grid;
      }
    }), Object.defineProperty(e, "axis", {
      enumerable: !0,
      get: function() {
        return a.axis;
      }
    }), Object.defineProperty(e, "line", {
      enumerable: !0,
      get: function() {
        return o.line;
      }
    }), Object.defineProperty(e, "bar", {
      enumerable: !0,
      get: function() {
        return l.bar;
      }
    }), Object.defineProperty(e, "pie", {
      enumerable: !0,
      get: function() {
        return c.pie;
      }
    }), Object.defineProperty(e, "radarAxis", {
      enumerable: !0,
      get: function() {
        return z.radarAxis;
      }
    }), Object.defineProperty(e, "radar", {
      enumerable: !0,
      get: function() {
        return q.radar;
      }
    }), Object.defineProperty(e, "gauge", {
      enumerable: !0,
      get: function() {
        return N.gauge;
      }
    }), Object.defineProperty(e, "legend", {
      enumerable: !0,
      get: function() {
        return X.legend;
      }
    });
    var r = Cs(), n = _s(), t = $s(), a = Ps(), o = ws(), l = ks(), c = As(), z = Ls(), q = Ss(), N = Os(), X = Gs();
  }(wr)), wr;
}
var pa;
function Rs() {
  return pa || (pa = 1, function(e) {
    var r = we;
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), e.default = void 0;
    var n = r(Ee()), t = r(mt()), a = r(jt), o = Te(), l = Ms(), c = function z(q) {
      if ((0, t.default)(this, z), !q)
        return console.error("Charts Missing parameters!"), !1;
      var N = q.clientWidth, X = q.clientHeight, F = document.createElement("canvas");
      F.setAttribute("width", N), F.setAttribute("height", X), q.appendChild(F);
      var A = {
        container: q,
        canvas: F,
        render: new a.default(F),
        option: null
      };
      Object.assign(this, A);
    };
    e.default = c, c.prototype.setOption = function(z) {
      var q = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      if (!z || (0, n.default)(z) !== "object")
        return console.error("setOption Missing parameters!"), !1;
      q && this.render.graphs.forEach(function(X) {
        return X.animationEnd();
      });
      var N = (0, o.deepClone)(z, !0);
      (0, l.mergeColor)(this, N), (0, l.grid)(this, N), (0, l.axis)(this, N), (0, l.radarAxis)(this, N), (0, l.title)(this, N), (0, l.bar)(this, N), (0, l.line)(this, N), (0, l.pie)(this, N), (0, l.radar)(this, N), (0, l.gauge)(this, N), (0, l.legend)(this, N), this.option = z, this.render.launchAnimation();
    }, c.prototype.resize = function() {
      var z = this.container, q = this.canvas, N = this.render, X = this.option, F = z.clientWidth, A = z.clientHeight;
      q.setAttribute("width", F), q.setAttribute("height", A), N.area = [F, A], this.setOption(X);
    };
  }(Pr)), Pr;
}
(function(e) {
  var r = we;
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "changeDefaultConfig", {
    enumerable: !0,
    get: function() {
      return t.changeDefaultConfig;
    }
  }), e.default = void 0;
  var n = r(Rs()), t = Ue(), a = n.default;
  e.default = a;
})(La);
const Ma = /* @__PURE__ */ $a(La);
const Ds = {
  __name: "index",
  props: {
    option: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e, n = me(null), t = me(null);
    let a = Pe({});
    xe(t, c, o), ke(() => r.option, () => {
      a && a.setOption(r.option, !0);
    }, { deep: !0 });
    function o() {
      l();
    }
    function l() {
      a = new Ma(t.value), r.option && a.setOption(r.option);
    }
    function c() {
      a && a.resize();
    }
    return (z, q) => (le(), se("div", {
      ref_key: "chartsContainerRef",
      ref: n,
      class: "dv-charts-container"
    }, [
      ne("div", {
        ref_key: "chartRef",
        ref: t,
        class: "charts-canvas-container"
      }, null, 512)
    ], 512));
  }
}, Ar = {
  install(e) {
    e.component("DvCharts", Ds);
  }
};
const Bs = { class: "dv-capsule-chart" }, Ts = { class: "label-column" }, Fs = /* @__PURE__ */ ne("div", null, " ", -1), Ns = { class: "capsule-container" }, Ws = {
  key: 0,
  class: "capsule-item-value"
}, js = { class: "unit-label" }, Es = {
  key: 0,
  class: "unit-text"
}, zs = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e;
    pt((z) => ({
      "6be2ab5a": i(a),
      "0accef4c": i(t)
    }));
    const n = Pe({
      defaultConfig: {
        /**
             * @description Capsule chart data
             * @type {Array<Object>}
             * @default data = []
             * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]
             */
        data: [],
        /**
             * @description Colors (hex|rgb|rgba|color keywords)
             * @type {Array<String>}
             * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']
             * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
             */
        colors: [
          "#37a2da",
          "#32c5e9",
          "#67e0e3",
          "#9fe6b8",
          "#ffdb5c",
          "#ff9f7f",
          "#fb7293"
        ],
        /**
             * @description Chart unit
             * @type {String}
             * @default unit = ''
             */
        unit: "",
        /**
             * @description Show item value
             * @type {Boolean}
             * @default showValue = false
             */
        showValue: !1,
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Chart font size
             * @type {Number}
             * @default fontSize = 12
             */
        fontSize: 12
      },
      mergedConfig: null,
      capsuleLength: [],
      capsuleValue: [],
      labelData: [],
      labelDataLength: []
    });
    ke(() => r.config, () => {
      o();
    }, {
      deep: !0
    });
    const t = be(() => `${r.config.fontSize ? r.config.fontSize : n.defaultConfig.fontSize}px`), a = be(() => r.config.textColor ? r.config.textColor : n.defaultConfig.textColor);
    function o() {
      l(), c();
    }
    function l() {
      n.mergedConfig = Ce(
        $e(n.defaultConfig, !0),
        r.config || {}
      );
    }
    function c() {
      const { data: z } = n.mergedConfig;
      if (!z.length || z.length === 0) {
        n.labelData = [], n.capsuleLength = [];
        return;
      }
      const q = z.map(({ value: A }) => A), N = Math.max(...q);
      n.capsuleValue = q, n.capsuleLength = q.map((A) => N ? A / N : 0);
      const X = N / 5, F = Array.from(
        new Set(new Array(6).fill(0).map((A, v) => Math.ceil(v * X)))
      );
      n.labelData = F, n.labelDataLength = Array.from(F).map(
        (A) => N ? A / N : 0
      );
    }
    return Re(() => {
      o();
    }), (z, q) => (le(), se("div", Bs, [
      i(n).mergedConfig ? (le(), se(Ae, { key: 0 }, [
        ne("div", Ts, [
          (le(!0), se(Ae, null, Se(i(n).mergedConfig.data, (N) => (le(), se("div", {
            key: N.name
          }, We(N.name), 1))), 128)),
          Fs
        ]),
        ne("div", Ns, [
          (le(!0), se(Ae, null, Se(i(n).capsuleLength, (N, X) => (le(), se("div", {
            key: X,
            class: "capsule-item"
          }, [
            ne("div", {
              class: "capsule-item-column",
              style: Me(`width: ${N * 100}%; background-color: ${i(n).mergedConfig.colors[X % i(n).mergedConfig.colors.length]};`)
            }, [
              i(n).mergedConfig.showValue ? (le(), se("div", Ws, We(i(n).capsuleValue[X]), 1)) : _e("", !0)
            ], 4)
          ]))), 128)),
          ne("div", js, [
            (le(!0), se(Ae, null, Se(i(n).labelData, (N, X) => (le(), se("div", {
              key: N + X
            }, We(N), 1))), 128))
          ])
        ]),
        i(n).mergedConfig.unit ? (le(), se("div", Es, We(i(n).mergedConfig.unit), 1)) : _e("", !0)
      ], 64)) : _e("", !0)
    ]));
  }
}, Lr = {
  install(e) {
    e.component("DvCapsuleChart", zs);
  }
};
const qs = { class: "dv-digital-flop" }, Ra = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => {
      }
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      renderer: null,
      defaultConfig: {
        /**
             * @description Number for digital flop
             * @type {Array<Number>}
             * @default number = []
             * @example number = [10]
             */
        number: [],
        /**
             * @description Content formatter
             * @type {String}
             * @default content = ''
             * @example content = '{nt}个'
             */
        content: "",
        /**
             * @description Number toFixed
             * @type {Number}
             * @default toFixed = 0
             */
        toFixed: 0,
        /**
             * @description Text align
             * @type {String}
             * @default textAlign = 'center'
             * @example textAlign = 'center' | 'left' | 'right'
             */
        textAlign: "center",
        /**
             * @description rowGap
             * @type {Number}
             @default rowGap = 0
             */
        rowGap: 0,
        /**
             * @description Text style configuration
             * @type {Object} {CRender Class Style}
             */
        style: {
          fontSize: 30,
          fill: "#3de7c9"
        },
        /**
             * @description Number formatter
             * @type {Null|Function}
             */
        formatter: void 0,
        /**
             * @description CRender animationCurve
             * @type {String}
             * @default animationCurve = 'easeOutCubic'
             */
        animationCurve: "easeOutCubic",
        /**
             * @description CRender animationFrame
             * @type {String}
             * @default animationFrame = 50
             */
        animationFrame: 50
      },
      mergedConfig: null,
      graph: null
    });
    ke(() => r.config, (F) => {
      N();
    }, { deep: !0 }), Re(() => {
      a();
    });
    function a() {
      o(), l(), c();
    }
    function o() {
      t.renderer = new Aa(n.value);
    }
    function l() {
      t.mergedConfig = Ce($e(t.defaultConfig, !0), r.config || {});
    }
    function c() {
      const F = z(), A = q();
      t.graph = t.renderer.add({
        name: "numberText",
        animationCurve: t.mergedConfig.animationCurve,
        animationFrame: t.mergedConfig.animationFrame,
        shape: F,
        style: A
      });
    }
    function z() {
      const { number: F, content: A, toFixed: v, textAlign: M, rowGap: B, formatter: I } = t.mergedConfig, [W, b] = t.renderer.area, $ = [W / 2, b / 2];
      return M === "left" && ($[0] = 0), M === "right" && ($[0] = W), {
        number: F,
        content: A,
        toFixed: v,
        position: $,
        rowGap: B,
        formatter: I
      };
    }
    function q() {
      const { style: F, textAlign: A } = t.mergedConfig;
      return Ce(F, {
        textAlign: A,
        textBaseline: "middle"
      });
    }
    function N() {
      if (t.graph.animationEnd(), l(), !t.graph)
        return;
      const { animationCurve: F, animationFrame: A } = t.mergedConfig, v = z(), M = q();
      X(t.graph, v), t.graph.animationCurve = F, t.graph.animationFrame = A, t.graph.animation("style", M, !0), t.graph.animation("shape", v);
    }
    function X(F, A) {
      const v = F.shape.number.length, M = A.number.length;
      v !== M && (F.shape.number = A.number);
    }
    return (F, A) => (le(), se("div", qs, [
      ne("canvas", {
        ref_key: "digitalFlop",
        ref: n
      }, null, 512)
    ]));
  }
};
const Is = { class: "dv-active-ring-chart" }, Hs = { class: "active-ring-info" }, Vs = {
  __name: "index",
  props: {
    config: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const r = e;
    pt((M) => ({
      "2c9ee932": i(c)
    }));
    const n = me(null), t = Pe({
      defaultConfig: {
        /**
             * @description Ring radius
             * @type {String|Number}
             * @default radius = '50%'
             * @example radius = '50%' | 100
             */
        radius: "50%",
        /**
             * @description Active ring radius
             * @type {String|Number}
             * @default activeRadius = '55%'
             * @example activeRadius = '55%' | 110
             */
        activeRadius: "55%",
        /**
             * @description Ring data
             * @type {Array<Object>}
             * @default data = [{ name: '', value: 0 }]
             */
        data: [{ name: "", value: 0 }],
        /**
             * @description Ring line width
             * @type {Number}
             * @default lineWidth = 20
             */
        lineWidth: 20,
        /**
             * @description Active time gap (ms)
             * @type {Number}
             * @default activeTimeGap = 3000
             */
        activeTimeGap: 3e3,
        /**
             * @description Ring color (hex|rgb|rgba|color keywords)
             * @type {Array<String>}
             * @default color = [Charts Default Color]
             * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']
             */
        color: [],
        /**
             * @description Text color
             * @type {String}
             * @default textColor = '#fff'
             */
        textColor: "#fff",
        /**
             * @description Digital flop style
             * @type {Object}
             */
        digitalFlopStyle: {
          fontSize: 25,
          fill: "#fff"
        },
        /**
             * @description Digital flop toFixed
             * @type {Number}
             */
        digitalFlopToFixed: 0,
        /**
             * @description Digital flop unit
             * @type {String}
             */
        digitalFlopUnit: "",
        /**
             * @description CRender animationCurve
             * @type {String}
             * @default animationCurve = 'easeOutCubic'
             */
        animationCurve: "easeOutCubic",
        /**
             * @description CRender animationFrame
             * @type {String}
             * @default animationFrame = 50
             */
        animationFrame: 50,
        /**
             * @description showOriginValue
             * @type {Boolean}
             * @default showOriginValue = false
             */
        showOriginValue: !1
      },
      mergedConfig: null,
      chart: null,
      activeIndex: 0,
      animationHandler: ""
    }), a = be(() => {
      if (!t.mergedConfig)
        return {};
      const {
        digitalFlopStyle: M,
        digitalFlopToFixed: B,
        data: I,
        showOriginValue: W,
        digitalFlopUnit: b
      } = t.mergedConfig, $ = I.map(({ value: _ }) => _);
      let f;
      if (W)
        f = $[t.activeIndex];
      else {
        const _ = $.reduce((m, C) => m + C, 0);
        f = parseFloat($[t.activeIndex] / _ * 100) || 0;
      }
      return {
        content: W ? `{nt}${b}` : `{nt}${b || "%"}`,
        number: [f],
        style: M,
        toFixed: B
      };
    }), o = be(() => t.mergedConfig ? t.mergedConfig.data[t.activeIndex].name : ""), l = be(() => t.mergedConfig ? `font-size: ${t.mergedConfig.digitalFlopStyle.fontSize}px;` : ""), c = be(() => r.config.textColor ? r.config.textColor : t.defaultConfig.textColor);
    ke(() => r.config, () => {
      clearTimeout(t.animationHandler), t.activeIndex = 0, N(), X();
    }, {
      deep: !0
    }), Re(() => {
      z();
    }), Tt(() => {
      clearTimeout(t.animationHandler);
    });
    function z() {
      q(), N(), X();
    }
    function q() {
      t.chart = new Ma(n.value);
    }
    function N() {
      t.mergedConfig = Ce(
        $e(t.defaultConfig, !0),
        r.config || {}
      );
    }
    function X() {
      const M = F();
      t.chart.setOption(M, !0), v();
    }
    function F() {
      const M = A();
      return t.mergedConfig.data.forEach((B) => {
        B.radius = M;
      }), {
        series: [
          {
            type: "pie",
            ...t.mergedConfig,
            outsideLabel: {
              show: !1
            }
          }
        ],
        color: t.mergedConfig.color
      };
    }
    function A(M = !1) {
      const { radius: B, activeRadius: I, lineWidth: W } = t.mergedConfig, b = Math.min(...t.chart.render.area) / 2, $ = W / 2;
      let f = M ? I : B;
      typeof f != "number" && (f = parseInt(f) / 100 * b);
      const _ = f - $, O = f + $;
      return [_, O];
    }
    function v() {
      const M = A(), B = A(!0), I = F(), { data: W } = I.series[0];
      W.forEach(($, f) => {
        f === t.activeIndex ? $.radius = B : $.radius = M;
      }), t.chart.setOption(I, !0);
      const { activeTimeGap: b } = I.series[0];
      t.animationHandler = setTimeout(($) => {
        t.activeIndex += 1, t.activeIndex >= W.length && (t.activeIndex = 0), v();
      }, b);
    }
    return (M, B) => (le(), se("div", Is, [
      ne("div", {
        ref_key: "activeRingChart",
        ref: n,
        class: "active-ring-chart-container"
      }, null, 512),
      ne("div", Hs, [
        J(Ra, { config: i(a) }, null, 8, ["config"]),
        ne("div", {
          class: "active-ring-name",
          style: Me(i(l))
        }, We(i(o)), 5)
      ])
    ]));
  }
}, Sr = {
  install(e) {
    e.component("DvActiveRingChart", Vs);
  }
}, Or = {
  install(e) {
    e.component("DvDigitalFlop", Ra);
  }
}, Us = /* @__PURE__ */ Le({
  __name: "index",
  setup(e) {
    const r = me(null), n = Pe({
      allWidth: 0,
      scale: 0,
      datavRoot: "",
      ready: !1
    }), t = () => {
      const { width: c, height: z } = screen;
      n.allWidth = c, r.value && (r.value.style.width = `${c}px`, r.value.style.height = `${z}px`);
    }, a = () => {
      const c = document.body.clientWidth;
      r.value && (r.value.style.transform = `scale(${c / n.allWidth})`);
    };
    return xe(r, () => {
      a();
    }, () => {
      t(), a(), n.ready = !0;
    }), (c, z) => (le(), se("div", {
      id: "dv-full-screen-container",
      ref_key: "fullScreenContainer",
      ref: r
    }, [
      i(n).ready ? Ge(c.$slots, "default", { key: 0 }) : _e("", !0)
    ], 512));
  }
});
const Gr = {
  install(e) {
    e.component("DvFullScreenContainer", Us);
  }
}, Xs = ["width", "height"], Qs = ["fill", "x", "y", "width", "height"], Ys = ["values", "begin"], Ks = ["fill", "x", "y", "width", "height"], Js = ["values"], Zs = ["values"], eu = ["values"], tu = ["values"], ru = ["fill", "x", "y", "height"], nu = /* @__PURE__ */ ne("animate", {
  attributeName: "width",
  values: "0;40;0",
  dur: "2s",
  repeatCount: "indefinite"
}, null, -1), au = ["values"], iu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe([200, 50]), a = me(4), o = me(20), l = me(2.5), c = me(l.value / 2), z = Pe(["#fff", "#0de7c2"]), q = Pe({
      mergedColor: [],
      rects: [],
      points: [],
      svgScale: [1, 1]
    }), N = () => {
      I();
    }, X = () => {
      I();
    }, { width: F, height: A } = xe(n, N, X), v = () => {
      const [b, $] = t, f = b / (o.value + 1), _ = $ / (a.value + 1), O = new Array(a.value).fill(0).map((m, C) => new Array(o.value).fill(0).map((d, G) => [
        f * (G + 1),
        _ * (C + 1)
      ]));
      q.points = O.reduce((m, C) => [...m, ...C], []);
    }, M = () => {
      const b = q.points[o.value * 2 - 1], $ = q.points[o.value * 2 - 3];
      q.rects = [b, $];
    }, B = () => {
      const [b, $] = t;
      q.svgScale = [F.value / b, A.value / $];
    }, I = () => {
      v(), M(), B();
    }, W = () => {
      q.mergedColor = Ce($e(z, !0), r.color || []);
    };
    return ke(() => r.color, () => {
      W();
    }), Re(() => {
      W();
    }), (b, $) => (le(), se("div", {
      ref_key: "dvDecoration1",
      ref: n,
      class: "dv-decoration-1"
    }, [
      (le(), se("svg", {
        width: `${i(t)[0]}px`,
        height: `${i(t)[1]}px`,
        style: Me(`transform:scale(${i(q).svgScale[0]}, ${i(q).svgScale[1]});`)
      }, [
        (le(!0), se(Ae, null, Se(i(q).points, (f) => (le(), se(Ae, { key: f }, [
          Math.random() > 0.6 ? (le(), se("rect", {
            key: 0,
            fill: i(q).mergedColor[0],
            x: f[0] - i(c),
            y: f[1] - i(c),
            width: i(l),
            height: i(l)
          }, [
            Math.random() > 0.6 ? (le(), se("animate", {
              key: 0,
              attributeName: "fill",
              values: `${i(q).mergedColor[0]};transparent`,
              dur: "1s",
              begin: Math.random() * 2,
              repeatCount: "indefinite"
            }, null, 8, Ys)) : _e("", !0)
          ], 8, Qs)) : _e("", !0)
        ], 64))), 128)),
        i(q).rects[0] ? (le(), se("rect", {
          key: 0,
          fill: i(q).mergedColor[1],
          x: i(q).rects[0][0] - i(l),
          y: i(q).rects[0][1] - i(l),
          width: i(l) * 2,
          height: i(l) * 2
        }, [
          ne("animate", {
            attributeName: "width",
            values: `0;${i(l) * 2}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Js),
          ne("animate", {
            attributeName: "height",
            values: `0;${i(l) * 2}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, Zs),
          ne("animate", {
            attributeName: "x",
            values: `${i(q).rects[0][0]};${i(q).rects[0][0] - i(l)}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, eu),
          ne("animate", {
            attributeName: "y",
            values: `${i(q).rects[0][1]};${i(q).rects[0][1] - i(l)}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, tu)
        ], 8, Ks)) : _e("", !0),
        i(q).rects[1] ? (le(), se("rect", {
          key: 1,
          fill: i(q).mergedColor[1],
          x: i(q).rects[1][0] - 40,
          y: i(q).rects[1][1] - i(l),
          width: 40,
          height: i(l) * 2
        }, [
          nu,
          ne("animate", {
            attributeName: "x",
            values: `${i(q).rects[1][0]};${i(q).rects[1][0] - 40};${i(q).rects[1][0]}`,
            dur: "2s",
            repeatCount: "indefinite"
          }, null, 8, au)
        ], 8, ru)) : _e("", !0)
      ], 12, Xs))
    ], 512));
  }
});
const Mr = {
  install(e) {
    e.component("DvDecoration1", iu);
  }
}, ou = ["width", "height"], lu = ["x", "y", "width", "height", "fill"], su = ["attributeName", "to", "dur"], uu = ["x", "y", "fill"], cu = ["attributeName", "to", "dur"], fu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: !1
    },
    dur: {
      type: Number,
      default: 6
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      x: 0,
      y: 0,
      w: 0,
      h: 0,
      defaultColor: ["#3faacb", "#fff"],
      mergedColor: []
    }), a = () => {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    }, o = () => {
      q();
    }, l = () => {
      q();
    }, { width: c, height: z } = xe(n, o, l), q = () => {
      r.reverse ? (t.w = 1, t.h = z.value, t.x = c.value / 2, t.y = 0) : (t.w = c.value, t.h = 1, t.x = 0, t.y = z.value / 2);
    };
    return ke(() => r.color, () => {
      a();
    }), ke(() => r.reverse, () => {
      q();
    }), Re(() => {
      a();
    }), (N, X) => (le(), se("div", {
      ref_key: "decoration2",
      ref: n,
      class: "dv-decoration-2"
    }, [
      (le(), se("svg", {
        width: `${i(c)}px`,
        height: `${i(z)}px`
      }, [
        ne("rect", {
          x: i(t).x,
          y: i(t).y,
          width: i(t).w,
          height: i(t).h,
          fill: i(t).mergedColor[0]
        }, [
          ne("animate", {
            attributeName: e.reverse ? "height" : "width",
            from: "0",
            to: e.reverse ? i(z) : i(c),
            dur: `${e.dur}s`,
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: ".42,0,.58,1",
            repeatCount: "indefinite"
          }, null, 8, su)
        ], 8, lu),
        ne("rect", {
          x: i(t).x,
          y: i(t).y,
          width: "1",
          height: "1",
          fill: i(t).mergedColor[1]
        }, [
          ne("animate", {
            attributeName: e.reverse ? "y" : "x",
            from: "0",
            to: e.reverse ? i(z) : i(c),
            dur: `${e.dur}s`,
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: "0.42,0,0.58,1",
            repeatCount: "indefinite"
          }, null, 8, cu)
        ], 8, uu)
      ], 8, ou))
    ], 512));
  }
});
const Rr = {
  install(e) {
    e.component("DvDecoration2", fu);
  }
}, du = ["width", "height"], hu = ["fill", "x", "y"], vu = ["values", "dur", "begin"], Mt = 7, pu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      svgWH: [300, 35],
      svgScale: [1, 1],
      rowNum: 2,
      rowPoints: 25,
      pointSideLength: Mt,
      halfPointSideLength: Mt / 2,
      points: [],
      defaultColor: ["#7acaec", "transparent"],
      mergedColor: []
    }), a = () => {
      const [F, A] = t.svgWH, v = F / (t.rowPoints + 1), M = A / (t.rowNum + 1), B = new Array(t.rowNum).fill(0).map((I, W) => new Array(t.rowPoints).fill(0).map((b, $) => [
        v * ($ + 1),
        M * (W + 1)
      ]));
      t.points = B.reduce((I, W) => [...I, ...W], []);
    }, o = () => {
      l();
    }, l = () => {
      a(), N();
    }, c = () => {
      l();
    }, { width: z, height: q } = xe(n, c, o), N = () => {
      const [F, A] = t.svgWH;
      t.svgScale = [z.value / F, q.value / A];
    }, X = () => {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    };
    return ke(() => r.color, () => {
      X();
    }), Re(() => {
      X();
    }), (F, A) => (le(), se("div", {
      ref_key: "decoration3",
      ref: n,
      class: "dv-decoration-3"
    }, [
      (le(), se("svg", {
        width: `${i(t).svgWH[0]}px`,
        height: `${i(t).svgWH[1]}px`,
        style: Me(`transform:scale(${i(t).svgScale[0]},${i(t).svgScale[1]});`)
      }, [
        (le(!0), se(Ae, null, Se(i(t).points, (v) => (le(), se("rect", {
          key: v,
          fill: i(t).mergedColor[0],
          x: v[0] - i(t).halfPointSideLength,
          y: v[1] - i(t).halfPointSideLength,
          width: Mt,
          height: Mt
        }, [
          Math.random() > 0.6 ? (le(), se("animate", {
            key: 0,
            attributeName: "fill",
            values: `${i(t).mergedColor.join(";")}`,
            dur: Math.random() + 1 + "s",
            begin: Math.random() * 2,
            repeatCount: "indefinite"
          }, null, 8, vu)) : _e("", !0)
        ], 8, hu))), 128))
      ], 12, du))
    ], 512));
  }
});
const Dr = {
  install(e) {
    e.component("DvDecoration3", pu);
  }
}, gu = ["width", "height"], mu = ["stroke", "points"], yu = ["stroke", "points"], bu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: !1
    },
    dur: {
      type: Number,
      default: 3
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      defaultColor: ["rgba(255, 255, 255, 0.3)", "rgba(255, 255, 255, 0.3)"],
      mergedColor: []
    }), a = () => {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    }, { width: o, height: l } = xe(n);
    return ke(() => r.color, () => {
      a();
    }), Re(() => {
      a();
    }), (c, z) => (le(), se("div", {
      ref_key: "decoration3",
      ref: n,
      class: "dv-decoration-4"
    }, [
      ne("div", {
        class: qa(`container ${e.reverse ? "reverse" : "normal"}`),
        style: Me(e.reverse ? `width:${i(o)}px;height:5px;animation-duration:${e.dur}s` : `width:5px;height:${i(l)}px;animation-duration:${e.dur}s`)
      }, [
        (le(), se("svg", {
          width: e.reverse ? i(o) : 5,
          height: e.reverse ? 5 : i(l)
        }, [
          ne("polyline", {
            stroke: i(t).mergedColor[0],
            points: e.reverse ? `0, 2.5 ${i(o)}, 2.5` : `2.5, 0 2.5, ${i(l)}`
          }, null, 8, mu),
          ne("polyline", {
            class: "bold-line",
            stroke: i(t).mergedColor[1],
            "stroke-width": "3",
            "stroke-dasharray": "20, 80",
            "stroke-dashoffset": "-30",
            points: e.reverse ? `0, 2.5 ${i(o)}, 2.5` : `2.5, 0 2.5, ${i(l)}`
          }, null, 8, yu)
        ], 8, gu))
      ], 6)
    ], 512));
  }
});
const Br = {
  install(e) {
    e.component("DvDecoration4", bu);
  }
}, xu = ["width", "height"], Cu = ["stroke", "points"], _u = ["from", "to", "dur"], $u = ["stroke", "points"], Pu = ["from", "to", "dur"], wu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    dur: {
      type: Number,
      default: 1.2
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      line1Points: "",
      line2Points: "",
      line1Length: 0,
      line2Length: 0,
      defaultColor: ["#3f96a5", "#3f96a5"],
      mergedColor: []
    }), a = () => {
      z();
    }, o = () => {
      z();
    }, { width: l, height: c } = xe(n, o, a), z = () => {
      const N = [
        { x: 0, y: c.value * 0.2 },
        { x: l.value * 0.18, y: c.value * 0.2 },
        { x: l.value * 0.2, y: c.value * 0.4 },
        { x: l.value * 0.25, y: c.value * 0.4 },
        { x: l.value * 0.27, y: c.value * 0.6 },
        { x: l.value * 0.72, y: c.value * 0.6 },
        { x: l.value * 0.75, y: c.value * 0.4 },
        { x: l.value * 0.8, y: c.value * 0.4 },
        { x: l.value * 0.82, y: c.value * 0.2 },
        { x: l.value, y: c.value * 0.2 }
      ], X = [
        { x: l.value * 0.3, y: c.value * 0.8 },
        { x: l.value * 0.7, y: c.value * 0.8 }
      ], F = fn(N), A = fn(X);
      t.line1Points = dn(N), t.line2Points = dn(X), t.line1Length = F, t.line2Length = A;
    }, q = () => {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    };
    return ke(() => r.color, () => {
      q();
    }), Re(() => {
      q();
    }), (N, X) => (le(), se("div", {
      ref_key: "decoration5",
      ref: n,
      class: "dv-decoration-5"
    }, [
      (le(), se("svg", {
        width: i(l),
        height: i(c)
      }, [
        ne("polyline", {
          fill: "transparent",
          stroke: i(t).mergedColor[0],
          "stroke-width": "3",
          points: i(t).line1Points
        }, [
          ne("animate", {
            attributeName: "stroke-dasharray",
            attributeType: "XML",
            from: `0, ${i(t).line1Length / 2}, 0, ${i(t).line1Length / 2}`,
            to: `0, 0, ${i(t).line1Length}, 0`,
            dur: `${e.dur}s`,
            begin: "0s",
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: "0.4,1,0.49,0.98",
            repeatCount: "indefinite"
          }, null, 8, _u)
        ], 8, Cu),
        ne("polyline", {
          fill: "transparent",
          stroke: i(t).mergedColor[1],
          "stroke-width": "2",
          points: i(t).line2Points
        }, [
          ne("animate", {
            attributeName: "stroke-dasharray",
            attributeType: "XML",
            from: `0, ${i(t).line2Length / 2}, 0, ${i(t).line2Length / 2}`,
            to: `0, 0, ${i(t).line2Length}, 0`,
            dur: `${e.dur}s`,
            begin: "0s",
            calcMode: "spline",
            keyTimes: "0;1",
            keySplines: ".4,1,.49,.98",
            repeatCount: "indefinite"
          }, null, 8, Pu)
        ], 8, $u)
      ], 8, xu))
    ], 512));
  }
});
const Tr = {
  install(e) {
    e.component("DvDecoration5", wu);
  }
}, ku = ["width", "height"], Au = ["fill", "x", "y", "height"], Lu = ["values", "dur"], Su = ["values", "dur"], Fr = 7, Ou = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      svgWH: [300, 35],
      svgScale: [1, 1],
      rowNum: 1,
      rowPoints: 40,
      rectWidth: Fr,
      halfRectWidth: Fr / 2,
      points: [],
      heights: [],
      minHeights: [],
      randoms: [],
      defaultColor: ["#7acaec", "#7acaec"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      X();
    }), Re(() => {
      X();
    });
    const { width: a, height: o } = xe(n, N, l);
    function l() {
      c();
    }
    function c() {
      z(), q();
    }
    function z() {
      const [F, A] = t.svgWH, v = F / (t.rowPoints + 1), M = A / (t.rowNum + 1), B = new Array(t.rowNum).fill(0).map((W, b) => new Array(t.rowPoints).fill(0).map(($, f) => [
        v * (f + 1),
        M * (b + 1)
      ]));
      t.points = B.reduce((W, b) => [...W, ...b], []);
      const I = t.heights = new Array(t.rowNum * t.rowPoints).fill(0).map((W) => Math.random() > 0.8 ? ht(0.7 * A, A) : ht(0.2 * A, 0.5 * A));
      t.minHeights = new Array(t.rowNum * t.rowPoints).fill(0).map((W, b) => I[b] * Math.random()), t.randoms = new Array(t.rowNum * t.rowPoints).fill(0).map((W) => Math.random() + 1.5);
    }
    function q() {
      const [F, A] = t.svgWH;
      t.svgScale = [a.value / F, o.value / A];
    }
    function N() {
      c();
    }
    function X() {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    }
    return (F, A) => (le(), se("div", {
      ref_key: "decoration6",
      ref: n,
      class: "dv-decoration-6"
    }, [
      (le(), se("svg", {
        width: `${i(t).svgWH[0]}px`,
        height: `${i(t).svgWH[1]}px`,
        style: Me(`transform:scale(${i(t).svgScale[0]},${i(t).svgScale[1]});`)
      }, [
        (le(!0), se(Ae, null, Se(i(t).points, (v, M) => (le(), se("rect", {
          key: M,
          fill: i(t).mergedColor[Math.random() > 0.5 ? 0 : 1],
          x: v[0] - i(t).halfRectWidth,
          y: v[1] - i(t).heights[M] / 2,
          width: Fr,
          height: i(t).heights[M]
        }, [
          ne("animate", {
            attributeName: "y",
            values: `${v[1] - i(t).minHeights[M] / 2};${v[1] - i(t).heights[M] / 2};${v[1] - i(t).minHeights[M] / 2}`,
            dur: `${i(t).randoms[M]}s`,
            keyTimes: "0;0.5;1",
            calcMode: "spline",
            keySplines: "0.42,0,0.58,1;0.42,0,0.58,1",
            begin: "0s",
            repeatCount: "indefinite"
          }, null, 8, Lu),
          ne("animate", {
            attributeName: "height",
            values: `${i(t).minHeights[M]};${i(t).heights[M]};${i(t).minHeights[M]}`,
            dur: `${i(t).randoms[M]}s`,
            keyTimes: "0;0.5;1",
            calcMode: "spline",
            keySplines: "0.42,0,0.58,1;0.42,0,0.58,1",
            begin: "0s",
            repeatCount: "indefinite"
          }, null, 8, Su)
        ], 8, Au))), 128))
      ], 12, ku))
    ], 512));
  }
});
const Nr = {
  install(e) {
    e.component("DvDecoration6", Ou);
  }
}, Gu = { class: "dv-decoration-7" }, Mu = {
  width: "21px",
  height: "20px"
}, Ru = ["stroke"], Du = ["stroke"], Bu = {
  width: "21px",
  height: "20px"
}, Tu = ["stroke"], Fu = ["stroke"], Nu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = Pe({
      defaultColor: ["#1dc1f5", "#1dc1f5"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      t();
    }), Re(() => {
      t();
    });
    function t() {
      n.mergedColor = Ce($e(n.defaultColor, !0), r.color || []);
    }
    return (a, o) => (le(), se("div", Gu, [
      (le(), se("svg", Mu, [
        ne("polyline", {
          "stroke-width": "4",
          fill: "transparent",
          stroke: i(n).mergedColor[0],
          points: "10, 0 19, 10 10, 20"
        }, null, 8, Ru),
        ne("polyline", {
          "stroke-width": "2",
          fill: "transparent",
          stroke: i(n).mergedColor[1],
          points: "2, 0 11, 10 2, 20"
        }, null, 8, Du)
      ])),
      Ge(a.$slots, "default"),
      (le(), se("svg", Bu, [
        ne("polyline", {
          "stroke-width": "4",
          fill: "transparent",
          stroke: i(n).mergedColor[0],
          points: "11, 0 2, 10 11, 20"
        }, null, 8, Tu),
        ne("polyline", {
          "stroke-width": "2",
          fill: "transparent",
          stroke: i(n).mergedColor[1],
          points: "19, 0 10, 10 19, 20"
        }, null, 8, Fu)
      ]))
    ]));
  }
});
const Wr = {
  install(e) {
    e.component("DvDecoration7", Nu);
  }
}, Wu = ["width", "height"], ju = ["stroke", "points"], Eu = ["stroke", "points"], zu = ["stroke", "points"], qu = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    reverse: {
      type: Boolean,
      default: !1
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      defaultColor: ["#3f96a5", "#3f96a5"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      c();
    }), Re(() => {
      c();
    });
    const { width: a, height: o } = xe(n);
    function l(z) {
      return r.reverse ? a.value - z : z;
    }
    function c() {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    }
    return (z, q) => (le(), se("div", {
      ref_key: "decoration8",
      ref: n,
      class: "dv-decoration-8"
    }, [
      (le(), se("svg", {
        width: i(a),
        height: i(o)
      }, [
        ne("polyline", {
          stroke: i(t).mergedColor[0],
          "stroke-width": "2",
          fill: "transparent",
          points: `${l(0)}, 0 ${l(30)}, ${i(o) / 2}`
        }, null, 8, ju),
        ne("polyline", {
          stroke: i(t).mergedColor[0],
          "stroke-width": "2",
          fill: "transparent",
          points: `${l(20)}, 0 ${l(50)}, ${i(o) / 2} ${l(i(a))}, ${i(o) / 2}`
        }, null, 8, Eu),
        ne("polyline", {
          stroke: i(t).mergedColor[1],
          fill: "transparent",
          "stroke-width": "3",
          points: `${l(0)}, ${i(o) - 3}, ${l(200)}, ${i(o) - 3}`
        }, null, 8, zu)
      ], 8, Wu))
    ], 512));
  }
});
const jr = {
  install(e) {
    e.component("DvDecoration8", qu);
  }
};
const Iu = ["width", "height"], Hu = ["id"], Vu = ["stroke"], Uu = ["dur"], Xu = ["stroke"], Qu = ["dur"], Yu = ["stroke"], Ku = ["xlink:href", "stroke", "fill"], Ju = ["dur", "begin"], Zu = ["stroke"], ec = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    dur: {
      type: Number,
      default: 3
    }
  },
  setup(e) {
    const r = e, n = He(), t = me(null), a = Pe({
      polygonId: `decoration-9-polygon-${n}`,
      svgWH: [100, 100],
      svgScale: [1, 1],
      defaultColor: ["rgba(3, 166, 224, 0.8)", "rgba(3, 166, 224, 0.5)"],
      mergedColor: []
    });
    ke(() => r.color, () => {
      N();
    }), Re(() => {
      N();
    });
    const { width: o, height: l } = xe(t, q, c);
    function c() {
      z();
    }
    function z() {
      const [X, F] = a.svgWH;
      a.svgScale = [o.value / X, l.value / F];
    }
    function q() {
      z();
    }
    function N() {
      a.mergedColor = Ce($e(a.defaultColor, !0), r.color || []);
    }
    return (X, F) => (le(), se("div", {
      ref_key: "decoration9",
      ref: t,
      class: "dv-decoration-9"
    }, [
      (le(), se("svg", {
        width: `${i(a).svgWH[0]}px`,
        height: `${i(a).svgWH[1]}px`,
        style: Me(`transform:scale(${i(a).svgScale[0]},${i(a).svgScale[1]});`)
      }, [
        ne("defs", null, [
          ne("polygon", {
            id: i(a).polygonId,
            points: "15, 46.5, 21, 47.5, 21, 52.5, 15, 53.5"
          }, null, 8, Hu)
        ]),
        ne("circle", {
          cx: "50",
          cy: "50",
          r: "45",
          fill: "transparent",
          stroke: i(a).mergedColor[1],
          "stroke-width": "10",
          "stroke-dasharray": "80, 100, 30, 100"
        }, [
          ne("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;360 50 50",
            dur: `${e.dur}s`,
            repeatCount: "indefinite"
          }, null, 8, Uu)
        ], 8, Vu),
        ne("circle", {
          cx: "50",
          cy: "50",
          r: "45",
          fill: "transparent",
          stroke: i(a).mergedColor[0],
          "stroke-width": "6",
          "stroke-dasharray": "50, 66, 100, 66"
        }, [
          ne("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;-360 50 50",
            dur: `${e.dur}s`,
            repeatCount: "indefinite"
          }, null, 8, Qu)
        ], 8, Xu),
        ne("circle", {
          cx: "50",
          cy: "50",
          r: "38",
          fill: "transparent",
          stroke: i(De)(i(a).mergedColor[1] || i(a).defaultColor[1], 30),
          "stroke-width": "1",
          "stroke-dasharray": "5, 1"
        }, null, 8, Yu),
        (le(!0), se(Ae, null, Se(new Array(20).fill(0), (A, v) => (le(), se("use", {
          key: v,
          "xlink:href": `#${i(a).polygonId}`,
          stroke: i(a).mergedColor[1],
          fill: Math.random() > 0.4 ? "transparent" : i(a).mergedColor[0]
        }, [
          ne("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: "0 50 50;360 50 50",
            dur: `${e.dur}s`,
            begin: `${v * e.dur / 20}s`,
            repeatCount: "indefinite"
          }, null, 8, Ju)
        ], 8, Ku))), 128)),
        ne("circle", {
          cx: "50",
          cy: "50",
          r: "26",
          fill: "transparent",
          stroke: i(De)(i(a).mergedColor[1] || i(a).defaultColor[1], 30),
          "stroke-width": "1",
          "stroke-dasharray": "5, 1"
        }, null, 8, Zu)
      ], 12, Iu)),
      Ge(X.$slots, "default")
    ], 512));
  }
}, Er = {
  install(e) {
    e.component("DvDecoration9", ec);
  }
}, tc = ["width", "height"], rc = ["stroke", "points"], nc = ["stroke", "points", "stroke-dasharray"], ac = ["id", "values", "begin"], ic = ["values", "begin"], oc = ["stroke", "points", "stroke-dasharray"], lc = ["id", "values", "begin"], sc = ["values", "begin"], uc = ["stroke", "points", "stroke-dasharray"], cc = ["id", "values", "begin"], fc = ["values", "begin"], dc = ["cy", "fill"], hc = ["id", "values", "begin"], vc = ["cx", "cy", "fill"], pc = ["id", "values", "begin"], gc = ["values", "begin"], mc = ["cx", "cy", "fill"], yc = ["id", "values", "begin"], bc = ["values", "begin"], xc = ["cx", "cy", "fill"], Cc = ["id", "values", "begin"], _c = ["values", "begin"], $c = /* @__PURE__ */ Le({
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = He(), t = me(null), a = Pe({
      animationId1: `d10ani1${n}`,
      animationId2: `d10ani2${n}`,
      animationId3: `d10ani3${n}`,
      animationId4: `d10ani4${n}`,
      animationId5: `d10ani5${n}`,
      animationId6: `d10ani6${n}`,
      animationId7: `d10ani7${n}`,
      defaultColor: ["#00c2ff", "rgba(0, 194, 255, 0.3)"],
      mergedColor: []
    }), { width: o, height: l } = xe(t);
    ke(() => r.color, () => {
      c();
    }), Re(() => {
      c();
    });
    function c() {
      a.mergedColor = Ce($e(a.defaultColor, !0), r.color || []);
    }
    return (z, q) => (le(), se("div", {
      ref_key: "decoration10",
      ref: t,
      class: "dv-decoration-10"
    }, [
      (le(), se("svg", {
        width: i(o),
        height: i(l)
      }, [
        ne("polyline", {
          stroke: i(a).mergedColor[1],
          "stroke-width": "2",
          points: `0, ${i(l) / 2} ${i(o)}, ${i(l) / 2}`
        }, null, 8, rc),
        ne("polyline", {
          stroke: i(a).mergedColor[0],
          "stroke-width": "2",
          points: `5, ${i(l) / 2} ${i(o) * 0.2 - 3}, ${i(l) / 2}`,
          "stroke-dasharray": `0, ${i(o) * 0.2}`,
          fill: "freeze"
        }, [
          ne("animate", {
            id: i(a).animationId2,
            attributeName: "stroke-dasharray",
            values: `0, ${i(o) * 0.2};${i(o) * 0.2}, 0;`,
            dur: "3s",
            begin: `${i(a).animationId1}.end`,
            fill: "freeze"
          }, null, 8, ac),
          ne("animate", {
            attributeName: "stroke-dasharray",
            values: `${i(o) * 0.2}, 0;0, ${i(o) * 0.2}`,
            dur: "0.01s",
            begin: `${i(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, ic)
        ], 8, nc),
        ne("polyline", {
          stroke: i(a).mergedColor[0],
          "stroke-width": "2",
          points: `${i(o) * 0.2 + 3}, ${i(l) / 2} ${i(o) * 0.8 - 3}, ${i(l) / 2}`,
          "stroke-dasharray": `0, ${i(o) * 0.6}`
        }, [
          ne("animate", {
            id: i(a).animationId4,
            attributeName: "stroke-dasharray",
            values: `0, ${i(o) * 0.6};${i(o) * 0.6}, 0`,
            dur: "3s",
            begin: `${i(a).animationId3}.end + 1s`,
            fill: "freeze"
          }, null, 8, lc),
          ne("animate", {
            attributeName: "stroke-dasharray",
            values: `${i(o) * 0.6}, 0;0, ${i(o) * 0.6}`,
            dur: "0.01s",
            begin: `${i(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, sc)
        ], 8, oc),
        ne("polyline", {
          stroke: i(a).mergedColor[0],
          "stroke-width": "2",
          points: `${i(o) * 0.8 + 3}, ${i(l) / 2} ${i(o) - 5}, ${i(l) / 2}`,
          "stroke-dasharray": `0, ${i(o) * 0.2}`
        }, [
          ne("animate", {
            id: i(a).animationId6,
            attributeName: "stroke-dasharray",
            values: `0, ${i(o) * 0.2};${i(o) * 0.2}, 0`,
            dur: "3s",
            begin: `${i(a).animationId5}.end + 1s`,
            fill: "freeze"
          }, null, 8, cc),
          ne("animate", {
            attributeName: "stroke-dasharray",
            values: `${i(o) * 0.2}, 0;0, ${i(o) * 0.3}`,
            dur: "0.01s",
            begin: `${i(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, fc)
        ], 8, uc),
        ne("circle", {
          cx: "2",
          cy: i(l) / 2,
          r: "2",
          fill: i(a).mergedColor[1]
        }, [
          ne("animate", {
            id: i(a).animationId1,
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[0]}`,
            begin: `0s;${i(a).animationId7}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, hc)
        ], 8, dc),
        ne("circle", {
          cx: i(o) * 0.2,
          cy: i(l) / 2,
          r: "2",
          fill: i(a).mergedColor[1]
        }, [
          ne("animate", {
            id: i(a).animationId3,
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[0]}`,
            begin: `${i(a).animationId2}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, pc),
          ne("animate", {
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${i(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, gc)
        ], 8, vc),
        ne("circle", {
          cx: i(o) * 0.8,
          cy: i(l) / 2,
          r: "2",
          fill: i(a).mergedColor[1]
        }, [
          ne("animate", {
            id: i(a).animationId5,
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[0]}`,
            begin: `${i(a).animationId4}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, yc),
          ne("animate", {
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${i(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, bc)
        ], 8, mc),
        ne("circle", {
          cx: i(o) - 2,
          cy: i(l) / 2,
          r: "2",
          fill: i(a).mergedColor[1]
        }, [
          ne("animate", {
            id: i(a).animationId7,
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[0]}`,
            begin: `${i(a).animationId6}.end`,
            dur: "0.3s",
            fill: "freeze"
          }, null, 8, Cc),
          ne("animate", {
            attributeName: "fill",
            values: `${i(a).mergedColor[1]};${i(a).mergedColor[1]}`,
            dur: "0.01s",
            begin: `${i(a).animationId7}.end`,
            fill: "freeze"
          }, null, 8, _c)
        ], 8, xc)
      ], 8, tc))
    ], 512));
  }
});
const zr = {
  install(e) {
    e.component("DvDecoration10", $c);
  }
};
const Pc = ["width", "height"], wc = ["fill", "stroke"], kc = ["fill", "stroke", "points"], Ac = ["fill", "stroke", "points"], Lc = ["fill", "stroke", "points"], Sc = ["fill", "stroke", "points"], Oc = ["stroke", "points"], Gc = ["stroke", "points"], Mc = { class: "decoration-content" }, Rc = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const r = e, n = me(null), t = Pe({
      defaultColor: ["#1a98fc", "#2cf7fe"],
      mergedColor: []
    }), { width: a, height: o } = xe(n);
    ke(() => r.color, () => {
      l();
    }), Re(() => {
      l();
    });
    function l() {
      t.mergedColor = Ce($e(t.defaultColor, !0), r.color || []);
    }
    return (c, z) => (le(), se("div", {
      ref_key: "decoration11",
      ref: n,
      class: "dv-decoration-11"
    }, [
      (le(), se("svg", {
        width: i(a),
        height: i(o)
      }, [
        ne("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: "20 10, 25 4, 55 4 60 10"
        }, null, 8, wc),
        ne("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: `20 ${i(o) - 10}, 25 ${i(o) - 4}, 55 ${i(o) - 4} 60 ${i(o) - 10}`
        }, null, 8, kc),
        ne("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: `${i(a) - 20} 10, ${i(a) - 25} 4, ${i(a) - 55} 4 ${i(a) - 60} 10`
        }, null, 8, Ac),
        ne("polygon", {
          fill: i(De)(i(t).mergedColor[1] || i(t).defaultColor[1], 10),
          stroke: i(t).mergedColor[1],
          points: `${i(a) - 20} ${i(o) - 10}, ${i(a) - 25} ${i(o) - 4}, ${i(a) - 55} ${i(o) - 4} ${i(a) - 60} ${i(o) - 10}`
        }, null, 8, Lc),
        ne("polygon", {
          fill: i(De)(i(t).mergedColor[0] || i(t).defaultColor[0], 20),
          stroke: i(t).mergedColor[0],
          points: `
          20 10, 5 ${i(o) / 2} 20 ${i(o) - 10}
          ${i(a) - 20} ${i(o) - 10} ${i(a) - 5} ${i(o) / 2} ${i(a) - 20} 10
        `
        }, null, 8, Sc),
        ne("polyline", {
          fill: "transparent",
          stroke: i(De)(i(t).mergedColor[0] || i(t).defaultColor[0], 70),
          points: `25 18, 15 ${i(o) / 2} 25 ${i(o) - 18}`
        }, null, 8, Oc),
        ne("polyline", {
          fill: "transparent",
          stroke: i(De)(i(t).mergedColor[0] || i(t).defaultColor[0], 70),
          points: `${i(a) - 25} 18, ${i(a) - 15} ${i(o) / 2} ${i(a) - 25} ${i(o) - 18}`
        }, null, 8, Gc)
      ], 8, Pc)),
      ne("div", Mc, [
        Ge(c.$slots, "default")
      ])
    ], 512));
  }
}, qr = {
  install(e) {
    e.component("DvDecoration11", Rc);
  }
};
const Dc = ["width", "height"], Bc = ["id"], Tc = ["stroke", "stroke-width", "d"], Fc = ["id"], Nc = /* @__PURE__ */ ne("stop", {
  offset: "0%",
  "stop-color": "transparent",
  "stop-opacity": "1"
}, null, -1), Wc = ["stop-color"], jc = ["r", "cx", "cy", "stroke"], Ec = ["cx", "cy", "fill"], zc = ["values", "dur"], qc = ["dur"], Ic = ["cx", "cy", "fill"], Hc = { key: 0 }, Vc = ["points", "stroke"], Uc = ["d", "stroke"], Xc = ["xlink:href"], Qc = ["values", "dur"], Yc = { class: "decoration-content" }, Kc = {
  __name: "index",
  props: {
    color: {
      type: Array,
      default: () => []
    },
    /**
       * @description Scan animation dur
       */
    scanDur: {
      type: Number,
      default: 3
    },
    /**
       * @description Halo animation dur
       */
    haloDur: {
      type: Number,
      default: 2
    }
  },
  setup(e) {
    const r = e, n = He(), t = me(null), { width: a, height: o } = xe(t, () => {
    }, B), l = Pe({
      gId: `decoration-12-g-${n}`,
      gradientId: `decoration-12-gradient-${n}`,
      defaultColor: ["#2783ce", "#2cf7fe"],
      mergedColor: [],
      pathD: [],
      pathColor: [],
      circleR: [],
      splitLinePoints: [],
      arcD: [],
      segment: 30,
      sectorAngle: Math.PI / 3,
      ringNum: 3,
      ringWidth: 1,
      showSplitLine: !0
    }), c = be(() => a.value / 2), z = be(() => o.value / 2);
    ke(() => r.color, () => {
      N(), F();
    });
    function q() {
      N(), X(), F(), A(), v(), M();
    }
    function N() {
      l.mergedColor = Ce($e(l.defaultColor, !0), r.color || []);
    }
    function X() {
      const I = -Math.PI / 2, W = l.sectorAngle / l.segment, b = a.value / 4;
      let $ = et(c.value, z.value, b, I);
      l.pathD = new Array(l.segment).fill("").map((f, _) => {
        const O = et(c.value, z.value, b, I - (_ + 1) * W).map((C) => parseFloat(C.toFixed(5))), m = `M${$.join(",")} A${b}, ${b} 0 0 0 ${O.join(",")}`;
        return $ = O, m;
      });
    }
    function F() {
      const I = 100 / (l.segment - 1);
      l.pathColor = new Array(l.segment).fill(l.mergedColor[0]).map((W, b) => De(l.mergedColor[0], 100 - b * I));
    }
    function A() {
      const I = (a.value / 2 - l.ringWidth / 2) / l.ringNum;
      l.circleR = new Array(l.ringNum).fill(0).map((W, b) => I * (b + 1));
    }
    function v() {
      const I = Math.PI / 6, W = a.value / 2;
      l.splitLinePoints = new Array(6).fill("").map((b, $) => {
        const f = I * ($ + 1), _ = f + Math.PI, O = et(c.value, z.value, W, f), m = et(c.value, z.value, W, _);
        return `${O.join(",")} ${m.join(",")}`;
      });
    }
    function M() {
      const I = Math.PI / 6, W = a.value / 2 - 1;
      l.arcD = new Array(4).fill("").map((b, $) => {
        const f = I * (3 * $ + 1), _ = f + I, O = et(c.value, z.value, W, f), m = et(c.value, z.value, W, _);
        return `M${O.join(",")} A${c.value}, ${z.value} 0 0 1 ${m.join(",")}`;
      });
    }
    function B() {
      q();
    }
    return (I, W) => (le(), se("div", {
      ref_key: "decoration12",
      ref: t,
      class: "dv-decoration-12"
    }, [
      (le(), se("svg", {
        width: i(a),
        height: i(o)
      }, [
        ne("defs", null, [
          ne("g", {
            id: i(l).gId
          }, [
            (le(!0), se(Ae, null, Se(i(l).pathD, (b, $) => (le(), se("path", {
              key: b,
              stroke: i(l).pathColor[$],
              "stroke-width": i(a) / 2,
              fill: "transparent",
              d: b
            }, null, 8, Tc))), 128))
          ], 8, Bc),
          ne("radialGradient", {
            id: i(l).gradientId,
            cx: "50%",
            cy: "50%",
            r: "50%"
          }, [
            Nc,
            ne("stop", {
              offset: "100%",
              "stop-color": i(De)(i(l).mergedColor[1] || i(l).defaultColor[1], 30),
              "stop-opacity": "1"
            }, null, 8, Wc)
          ], 8, Fc)
        ]),
        (le(!0), se(Ae, null, Se(i(l).circleR, (b) => (le(), se("circle", {
          key: b,
          r: b,
          cx: i(c),
          cy: i(z),
          stroke: i(l).mergedColor[1],
          "stroke-width": 0.8,
          fill: "transparent"
        }, null, 8, jc))), 128)),
        ne("circle", {
          r: "1",
          cx: i(c),
          cy: i(z),
          stroke: "transparent",
          fill: `url(#${i(l).gradientId})`
        }, [
          ne("animate", {
            attributeName: "r",
            values: `1;${i(a) / 2}`,
            dur: `${e.haloDur}s`,
            repeatCount: "indefinite"
          }, null, 8, zc),
          ne("animate", {
            attributeName: "opacity",
            values: "1;0",
            dur: `${e.haloDur}s`,
            repeatCount: "indefinite"
          }, null, 8, qc)
        ], 8, Ec),
        ne("circle", {
          r: "2",
          cx: i(c),
          cy: i(z),
          fill: i(l).mergedColor[1]
        }, null, 8, Ic),
        i(l).showSplitLine ? (le(), se("g", Hc, [
          (le(!0), se(Ae, null, Se(i(l).splitLinePoints, (b) => (le(), se("polyline", {
            key: b,
            points: b,
            stroke: i(l).mergedColor[1],
            "stroke-width": 0.5,
            opacity: "50"
          }, null, 8, Vc))), 128))
        ])) : _e("", !0),
        (le(!0), se(Ae, null, Se(i(l).arcD, (b) => (le(), se("path", {
          key: b,
          d: b,
          stroke: i(l).mergedColor[1],
          "stroke-width": "2.3",
          fill: "transparent"
        }, null, 8, Uc))), 128)),
        ne("use", {
          "xlink:href": `#${i(l).gId}`
        }, [
          ne("animateTransform", {
            attributeName: "transform",
            type: "rotate",
            values: `0, ${i(c)} ${i(z)};360, ${i(c)} ${i(z)}`,
            dur: `${e.scanDur}s`,
            repeatCount: "indefinite"
          }, null, 8, Qc)
        ], 8, Xc)
      ], 8, Dc)),
      ne("div", Yc, [
        Ge(I.$slots, "default")
      ])
    ], 512));
  }
}, Ir = {
  install(e) {
    e.component("DvDecoration12", Kc);
  }
}, qe = {
  color: {
    type: Array,
    default: () => []
  },
  backgroundColor: {
    type: String,
    default: "transparent"
  }
};
function Ie(e, r) {
  return be(() => r.value.length === 0 ? e : r.value);
}
const Jc = ["left-top", "right-top", "left-bottom", "right-bottom"], Zc = ["#4fd2dd", "#235fa7"], ef = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), n = Ie(Zc, je(e, "color")), {
      width: t,
      height: a,
      initWH: o
    } = xe(r);
    return {
      width: t,
      height: a,
      initWH: o,
      mergedColor: n,
      borderBox1: r
    };
  },
  render() {
    const {
      backgroundColor: e,
      width: r,
      height: n,
      mergedColor: t,
      $slots: a
    } = this;
    return J("div", {
      ref: "borderBox1",
      class: "dv-border-box-1"
    }, [J("svg", {
      class: "dv-border",
      width: r,
      height: n
    }, [J("polygon", {
      fill: e,
      points: `10, 27 10, ${n - 27} 13, ${n - 24} 13, ${n - 21} 24, ${n - 11}
      38, ${n - 11} 41, ${n - 8} 73, ${n - 8} 75, ${n - 10} 81, ${n - 10}
      85, ${n - 6} ${r - 85}, ${n - 6} ${r - 81}, ${n - 10} ${r - 75}, ${n - 10}
      ${r - 73}, ${n - 8} ${r - 41}, ${n - 8} ${r - 38}, ${n - 11}
      ${r - 10}, ${n - 27} ${r - 10}, 27 ${r - 13}, 25 ${r - 13}, 21
      ${r - 24}, 11 ${r - 38}, 11 ${r - 41}, 8 ${r - 73}, 8 ${r - 75}, 10
      ${r - 81}, 10 ${r - 85}, 6 85, 6 81, 10 75, 10 73, 8 41, 8 38, 11 24, 11 13, 21 13, 24`
    }, null)]), Jc.map((o) => J("svg", {
      key: o,
      width: "150px",
      height: "150px",
      class: `${o} dv-border`
    }, [J("polygon", {
      fill: t[0],
      points: "6,66 6,18 12,12 18,12 24,6 27,6 30,9 36,9 39,6 84,6 81,9 75,9 73.2,7 40.8,7 37.8,10.2 24,10.2 12,21 12,24 9,27 9,51 7.8,54 7.8,63"
    }, [J("animate", {
      attributeName: "fill",
      values: `${t[0]};${t[1]};${t[0]}`,
      dur: "0.5s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      fill: t[1],
      points: "27.599999999999998,4.8 38.4,4.8 35.4,7.8 30.599999999999998,7.8"
    }, [J("animate", {
      attributeName: "fill",
      values: `${t[1]};${t[0]};${t[1]}`,
      dur: "0.5s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      fill: t[0],
      points: "9,54 9,63 7.199999999999999,66 7.199999999999999,75 7.8,78 7.8,110 8.4,110 8.4,66 9.6,66 9.6,54"
    }, [J("animate", {
      attributeName: "fill",
      values: `${t[0]};${t[1]};transparent`,
      dur: "1s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)])])), J("div", {
      class: "border-box-content"
    }, [Ge(a, "default")])]);
  }
}), Hr = {
  install(e) {
    e.component("DvBorderBox1", ef);
  }
};
const tf = ["#fff", "rgba(255, 255, 255, 0.6)"], rf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), n = Ie(tf, je(e, "color")), {
      width: t,
      height: a,
      initWH: o
    } = xe(r);
    return {
      width: t,
      height: a,
      initWH: o,
      mergedColor: n,
      borderBox2: r
    };
  },
  render() {
    const {
      $slots: e,
      backgroundColor: r,
      width: n,
      height: t,
      mergedColor: a
    } = this;
    return J("div", {
      ref: "borderBox2",
      class: "dv-border-box-2"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: n,
      height: t
    }, [J("polygon", {
      fill: r,
      points: `
        7, 7 ${n - 7}, 7 ${n - 7}, ${t - 7} 7, ${t - 7}
      `
    }, null), J("polyline", {
      stroke: a[0],
      points: `2, 2 ${n - 2} ,2 ${n - 2}, ${t - 2} 2, ${t - 2} 2, 2`
    }, null), J("polyline", {
      stroke: a[1],
      points: `6, 6 ${n - 6}, 6 ${n - 6}, ${t - 6} 6, ${t - 6} 6, 6`
    }, null), J("circle", {
      fill: a[0],
      cx: "11",
      cy: "11",
      r: "1"
    }, null), J("circle", {
      fill: a[0],
      cx: n - 11,
      cy: "11",
      r: "1"
    }, null), J("circle", {
      fill: a[0],
      cx: n - 11,
      cy: t - 11,
      r: "1"
    }, null), J("circle", {
      fill: a[0],
      cx: "11",
      cy: t - 11,
      r: "1"
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Vr = {
  install(e) {
    e.component("DvBorderBox2", rf);
  }
};
const nf = ["#2862b7", "#2862b7"], af = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(nf, je(e, "color"));
    return {
      width: n,
      height: t,
      mergedColor: o,
      initWH: a,
      borderBox3: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      backgroundColor: t,
      mergedColor: a
    } = this;
    return J("div", {
      ref: "borderBox3",
      class: "dv-border-box-3"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("polygon", {
      fill: t,
      points: `
              23, 23 ${r - 24}, 23 ${r - 24}, ${n - 24} 23, ${n - 24}
            `
    }, null), J("polyline", {
      class: "dv-bb3-line1",
      stroke: a[0],
      points: `4, 4 ${r - 22} ,4 ${r - 22}, ${n - 22} 4, ${n - 22} 4, 4`
    }, null), J("polyline", {
      class: "dv-bb3-line2",
      stroke: a[1],
      points: `10, 10 ${r - 16}, 10 ${r - 16}, ${n - 16} 10, ${n - 16} 10, 10`
    }, null), J("polyline", {
      class: "dv-bb3-line2",
      stroke: a[1],
      points: `16, 16 ${r - 10}, 16 ${r - 10}, ${n - 10} 16, ${n - 10} 16, 16`
    }, null), J("polyline", {
      class: "dv-bb3-line2",
      stroke: a[1],
      points: `22, 22 ${r - 4}, 22 ${r - 4}, ${n - 4} 22, ${n - 4} 22, 22`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Ur = {
  install(e) {
    e.component("DvBorderBox3", af);
  }
};
const of = {
  ...qe,
  reverse: {
    type: Boolean,
    default: !1
  }
}, lf = ["red", "rgba(0,0,255,0.8)"], sf = /* @__PURE__ */ Le({
  props: of,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(lf, je(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox4: r
    };
  },
  render() {
    const {
      $slots: e,
      backgroundColor: r,
      reverse: n,
      width: t,
      height: a,
      mergedColor: o
    } = this;
    return J("div", {
      ref: "borderBox4",
      class: "dv-border-box-4"
    }, [J("svg", {
      class: `dv-border-svg-container ${n && "dv-reverse"}`,
      width: t,
      height: a
    }, [J("polygon", {
      fill: r,
      points: `
        ${t - 15}, 22 170, 22 150, 7 40, 7 28, 21 32, 24
        16, 42 16, ${a - 32} 41, ${a - 7} ${t - 15}, ${a - 7}
      `
    }, null), J("polyline", {
      class: "dv-bb4-line-1",
      stroke: o[0],
      points: `145, ${a - 5} 40, ${a - 5} 10, ${a - 35}
          10, 40 40, 5 150, 5 170, 20 ${t - 15}, 20`
    }, null), J("polyline", {
      stroke: o[1],
      class: "dv-bb4-line-2",
      points: `245, ${a - 1} 36, ${a - 1} 14, ${a - 23}
          14, ${a - 100}`
    }, null), J("polyline", {
      class: "dv-bb4-line-3",
      stroke: o[0],
      points: `7, ${a - 40} 7, ${a - 75}`
    }, null), J("polyline", {
      class: "dv-bb4-line-4",
      stroke: o[0],
      points: "28, 24 13, 41 13, 64"
    }, null), J("polyline", {
      class: "dv-bb4-line-5",
      stroke: o[0],
      points: "5, 45 5, 140"
    }, null), J("polyline", {
      class: "dv-bb4-line-6",
      stroke: o[1],
      points: "14, 75 14, 180"
    }, null), J("polyline", {
      class: "dv-bb4-line-7",
      stroke: o[1],
      points: "55, 11 147, 11 167, 26 250, 26"
    }, null), J("polyline", {
      class: "dv-bb4-line-8",
      stroke: o[1],
      points: "158, 5 173, 16"
    }, null), J("polyline", {
      class: "dv-bb4-line-9",
      stroke: o[0],
      points: `200, 17 ${t - 10}, 17`
    }, null), J("polyline", {
      class: "dv-bb4-line-10",
      stroke: o[1],
      points: `385, 17 ${t - 10}, 17`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Xr = {
  install(e) {
    e.component("DvBorderBox4", sf);
  }
};
const uf = {
  ...qe,
  reverse: {
    type: Boolean,
    default: !1
  }
}, cf = ["rgba(255, 255, 255, 0.35)", "rgba(255, 255, 255, 0.20)"], ff = /* @__PURE__ */ Le({
  props: uf,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(cf, je(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox5: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a,
      reverse: o
    } = this;
    return J("div", {
      ref: "borderBox5",
      class: "dv-border-box-5"
    }, [J("svg", {
      class: `dv-border-svg-container  ${o && "dv-reverse"}`,
      width: r,
      height: n
    }, [J("polygon", {
      fill: a,
      points: `
            10, 22 ${r - 22}, 22 ${r - 22}, ${n - 86} ${r - 84}, ${n - 24} 10, ${n - 24}
          `
    }, null), J("polyline", {
      class: "dv-bb5-line-1",
      stroke: t[0],
      points: `8, 5 ${r - 5}, 5 ${r - 5}, ${n - 100}
          ${r - 100}, ${n - 5} 8, ${n - 5} 8, 5`
    }, null), J("polyline", {
      class: "dv-bb5-line-2",
      stroke: t[1],
      points: `3, 5 ${r - 20}, 5 ${r - 20}, ${n - 60}
          ${r - 74}, ${n - 5} 3, ${n - 5} 3, 5`
    }, null), J("polyline", {
      class: "dv-bb5-line-3",
      stroke: t[1],
      points: `50, 13 ${r - 35}, 13`
    }, null), J("polyline", {
      class: "dv-bb5-line-4",
      stroke: t[1],
      points: `15, 20 ${r - 35}, 20`
    }, null), J("polyline", {
      class: "dv-bb5-line-5",
      stroke: t[1],
      points: `15, ${n - 20} ${r - 110}, ${n - 20}`
    }, null), J("polyline", {
      class: "dv-bb5-line-6",
      stroke: t[1],
      points: `15, ${n - 13} ${r - 110}, ${n - 13}`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Qr = {
  install(e) {
    e.component("DvBorderBox5", ff);
  }
};
const df = ["rgba(255, 255, 255, 0.35)", "gray"], hf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(df, je(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox6: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return J("div", {
      ref: "borderBox6",
      class: "dv-border-box-6"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("polygon", {
      fill: a,
      points: `
            9, 7 ${r - 9}, 7 ${r - 9}, ${n - 7} 9, ${n - 7}
            `
    }, null), J("circle", {
      fill: t[1],
      cx: "5",
      cy: "5",
      r: "2"
    }, null), J("circle", {
      fill: t[1],
      cx: r - 5,
      cy: "5",
      r: "2"
    }, null), J("circle", {
      fill: t[1],
      cx: r - 5,
      cy: n - 5,
      r: "2"
    }, null), J("circle", {
      fill: t[1],
      cx: "5",
      cy: n - 5,
      r: "2"
    }, null), J("polyline", {
      stroke: t[0],
      points: `10, 4 ${r - 10}, 4`
    }, null), J("polyline", {
      stroke: t[0],
      points: `10, ${n - 4} ${r - 10}, ${n - 4}`
    }, null), J("polyline", {
      stroke: t[0],
      points: `5, 70 5, ${n - 70}`
    }, null), J("polyline", {
      stroke: t[0],
      points: `${r - 5}, 70 ${r - 5}, ${n - 70}`
    }, null), J("polyline", {
      stroke: t[0],
      points: "3, 10, 3, 50"
    }, null), J("polyline", {
      stroke: t[0],
      points: "7, 30 7, 80"
    }, null), J("polyline", {
      stroke: t[0],
      points: `${r - 3}, 10 ${r - 3}, 50`
    }, null), J("polyline", {
      stroke: t[0],
      points: `${r - 7}, 30 ${r - 7}, 80`
    }, null), J("polyline", {
      stroke: t[0],
      points: `3, ${n - 10} 3, ${n - 50}`
    }, null), J("polyline", {
      stroke: t[0],
      points: `7, ${n - 30} 7, ${n - 80}`
    }, null), J("polyline", {
      stroke: t[0],
      points: `${r - 3}, ${n - 10} ${r - 3}, ${n - 50}`
    }, null), J("polyline", {
      stroke: t[0],
      points: `${r - 7}, ${n - 30} ${r - 7}, ${n - 80}`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Yr = {
  install(e) {
    e.component("DvBorderBox6", hf);
  }
};
const vf = ["rgba(128,128,128,0.3)", "rgba(128,128,128,0.5)"], pf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(vf, je(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox7: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return J("div", {
      ref: "borderBox7",
      class: "dv-border-box-7",
      style: `box-shadow: inset 0 0 40px ${t[0]}; border: 1px solid ${t[0]}; background-color: ${a}`
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: "0, 25 0, 0 25, 0"
    }, null), J("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `${r - 25}, 0 ${r}, 0 ${r}, 25`
    }, null), J("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `${r - 25}, ${n} ${r}, ${n} ${r}, ${n - 25}`
    }, null), J("polyline", {
      class: "dv-bb7-line-width-2",
      stroke: t[0],
      points: `0, ${n - 25} 0, ${n} 25, ${n}`
    }, null), J("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: "0, 10 0, 0 10, 0"
    }, null), J("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `${r - 10}, 0 ${r}, 0 ${r}, 10`
    }, null), J("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `${r - 10}, ${n} ${r}, ${n} ${r}, ${n - 10}`
    }, null), J("polyline", {
      class: "dv-bb7-line-width-5",
      stroke: t[1],
      points: `0, ${n - 10} 0, ${n} 10, ${n}`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Kr = {
  install(e) {
    e.component("DvBorderBox7", pf);
  }
};
const gf = {
  ...qe,
  reverse: {
    type: Boolean,
    default: !1
  },
  dur: {
    type: Number,
    default: 3
  }
}, mf = ["#235fa7", "#4fd2dd"], yf = /* @__PURE__ */ Le({
  props: gf,
  setup(e) {
    const r = He(), n = me(null), t = Pe({
      path: `border-box-8-path-${r}`,
      gradient: `border-box-8-gradient-${r}`,
      mask: `border-box-8-mask-${r}`
    }), {
      width: a,
      height: o,
      initWH: l
    } = xe(n), c = be(() => (a.value + o.value - 5) * 2), z = be(() => e.reverse ? `M 2.5, 2.5 L 2.5, ${o.value - 2.5} L ${a.value - 2.5}, ${o.value - 2.5} L ${a.value - 2.5}, 2.5 L 2.5, 2.5` : `M2.5, 2.5 L${a.value - 2.5}, 2.5 L${a.value - 2.5}, ${o.value - 2.5} L2.5, ${o.value - 2.5} L2.5, 2.5`), q = Ie(mf, je(e, "color"));
    return {
      width: a,
      height: o,
      initWH: l,
      state: t,
      mergedColor: q,
      pathD: z,
      length: c,
      borderBox8: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      state: t,
      mergedColor: a,
      pathD: o,
      length: l,
      backgroundColor: c,
      dur: z
    } = this;
    return J("div", {
      ref: "borderBox8",
      class: "dv-border-box-8"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("defs", null, [J("path", {
      id: t.path,
      d: o,
      fill: "transparent"
    }, null), J("radialGradient", {
      id: t.gradient,
      cx: "50%",
      cy: "50%",
      r: "50%"
    }, [J("stop", {
      offset: "0%",
      "stop-color": "#fff",
      "stop-opacity": "1"
    }, null), J("stop", {
      offset: "100%",
      "stop-color": "#fff",
      "stop-opacity": "0"
    }, null)]), J("mask", {
      id: t.mask
    }, [J("circle", {
      cx: "0",
      cy: "0",
      r: "150",
      fill: `url(#${t.gradient})`
    }, [Ia("animateMotion", {
      dur: `${z}s`,
      path: o,
      rotate: "auto",
      repeatCount: "indefinite"
    })])])]), J("polygon", {
      fill: c,
      points: `5, 5 ${r - 5}, 5 ${r - 5} ${n - 5} 5, ${n - 5}`
    }, null), J("use", {
      stroke: a[0],
      "stroke-width": "1",
      "xlink:href": `#${t.path}`
    }, null), J("use", {
      stroke: a[1],
      "stroke-width": "3",
      "xlink:href": `#${t.path}`,
      mask: `url(#${t.mask})`
    }, [J("animate", {
      attributeName: "stroke-dasharray",
      from: `0, ${l}`,
      to: `${l}, 0`,
      dur: `${z}s`,
      repeatCount: "indefinite"
    }, null)])]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Jr = {
  install(e) {
    e.component("DvBorderBox8", yf);
  }
};
const bf = ["#11eefd", "#0078d2"], xf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = He(), n = me(null), {
      width: t,
      height: a,
      initWH: o
    } = xe(n), l = Pe({
      gradientId: `border-box-9-gradient-${r}`,
      maskId: `border-box-9-mask-${r}`
    }), c = Ie(bf, je(e, "color"));
    return {
      width: t,
      height: a,
      initWH: o,
      state: l,
      mergedColor: c,
      borderBox9: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      state: t,
      mergedColor: a,
      backgroundColor: o
    } = this;
    return J("div", {
      ref: "borderBox9",
      class: "dv-border-box-9"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("defs", null, [J("linearGradient", {
      id: t.gradientId,
      x1: "0%",
      y1: "0%",
      x2: "100%",
      y2: "100%"
    }, [J("animate", {
      attributeName: "x1",
      values: "0%;100%;0%",
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null), J("animate", {
      attributeName: "x2",
      values: "100%;0%;100%",
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null), J("stop", {
      offset: "0%",
      "stop-color": a[0]
    }, [J("animate", {
      attributeName: "stop-color",
      values: `${a[0]};${a[1]};${a[0]}`,
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("stop", {
      offset: "100%",
      "stop-color": a[1]
    }, [J("animate", {
      attributeName: "stop-color",
      values: `${a[1]};${a[0]};${a[1]}`,
      dur: "10s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)])]), J("mask", {
      id: t.maskId
    }, [J("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `8, ${n * 0.4} 8, 3, ${r * 0.4 + 7}, 3`
    }, null), J("polyline", {
      fill: "#fff",
      points: `8, ${n * 0.15} 8, 3, ${r * 0.1 + 7}, 3
              ${r * 0.1}, 8 14, 8 14, ${n * 0.15 - 7}
            `
    }, null), J("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `${r * 0.5}, 3 ${r - 3}, 3, ${r - 3}, ${n * 0.25}`
    }, null), J("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.52}, 3 ${r * 0.58}, 3
              ${r * 0.58 - 7}, 9 ${r * 0.52 + 7}, 9
            `
    }, null), J("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.9}, 3 ${r - 3}, 3 ${r - 3}, ${n * 0.1}
              ${r - 9}, ${n * 0.1 - 7} ${r - 9}, 9 ${r * 0.9 + 7}, 9
            `
    }, null), J("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `8, ${n * 0.5} 8, ${n - 3} ${r * 0.3 + 7}, ${n - 3}`
    }, null), J("polyline", {
      fill: "#fff",
      points: `
              8, ${n * 0.55} 8, ${n * 0.7}
              2, ${n * 0.7 - 7} 2, ${n * 0.55 + 7}
            `
    }, null), J("polyline", {
      stroke: "#fff",
      "stroke-width": "3",
      fill: "transparent",
      points: `${r * 0.35}, ${n - 3} ${r - 3}, ${n - 3} ${r - 3}, ${n * 0.35}`
    }, null), J("polyline", {
      fill: "#fff",
      points: `
              ${r * 0.92}, ${n - 3} ${r - 3}, ${n - 3} ${r - 3}, ${n * 0.8}
              ${r - 9}, ${n * 0.8 + 7} ${r - 9}, ${n - 9} ${r * 0.92 + 7}, ${n - 9}
            `
    }, null)])]), J("polygon", {
      fill: o,
      points: `
              15, 9 ${r * 0.1 + 1}, 9 ${r * 0.1 + 4}, 6 ${r * 0.52 + 2}, 6
              ${r * 0.52 + 6}, 10 ${r * 0.58 - 7}, 10 ${r * 0.58 - 2}, 6
              ${r * 0.9 + 2}, 6 ${r * 0.9 + 6}, 10 ${r - 10}, 10 ${r - 10}, ${n * 0.1 - 6}
              ${r - 6}, ${n * 0.1 - 1} ${r - 6}, ${n * 0.8 + 1} ${r - 10}, ${n * 0.8 + 6}
              ${r - 10}, ${n - 10} ${r * 0.92 + 7}, ${n - 10}  ${r * 0.92 + 2}, ${n - 6}
              11, ${n - 6} 11, ${n * 0.15 - 2} 15, ${n * 0.15 - 7}
            `
    }, null), J("rect", {
      x: "0",
      y: "0",
      width: r,
      height: n,
      fill: `url(#${t.gradientId})`,
      mask: `url(#${t.maskId})`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), Zr = {
  install(e) {
    e.component("DvBorderBox9", xf);
  }
};
const Cf = ["left-top", "right-top", "left-bottom", "right-bottom"], _f = ["#1d48c4", "#d3e1f8"], $f = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(_f, je(e, "color"));
    return {
      width: n,
      height: t,
      initWH: a,
      mergedColor: o,
      borderBox10: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return J("div", {
      ref: "borderBox10",
      class: "dv-border-box-10",
      style: `box-shadow: inset 0 0 25px 3px ${t[0]}`
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("polygon", {
      fill: a,
      points: `
              4, 0 ${r - 4}, 0 ${r}, 4 ${r}, ${n - 4} ${r - 4}, ${n}
              4, ${n} 0, ${n - 4} 0, 4
            `
    }, null)]), Cf.map((o) => J("svg", {
      width: "150px",
      height: "150px",
      class: `${o} dv-border-svg-container`
    }, [J("polygon", {
      fill: t[1],
      points: "40, 0 5, 0 0, 5 0, 16 3, 19 3, 7 7, 3 35, 3"
    }, null)])), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), en = {
  install(e) {
    e.component("DvBorderBox10", $f);
  }
};
const Pf = {
  ...qe,
  title: {
    type: String,
    default: ""
  },
  titleWidth: {
    type: Number,
    default: 250
  },
  animate: {
    type: Boolean,
    default: !0
  }
}, ga = ["#8aaafb", "#1f33a2"], wf = /* @__PURE__ */ Le({
  props: Pf,
  setup(e) {
    const r = He(), n = me(null), {
      width: t,
      height: a,
      initWH: o
    } = xe(n), l = me(`border-box-11-filterId-${r}`), c = Ie(ga, je(e, "color"));
    return {
      width: t,
      height: a,
      initWH: o,
      filterId: l,
      mergedColor: c,
      borderBox11: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      filterId: t,
      mergedColor: a,
      backgroundColor: o,
      title: l,
      titleWidth: c,
      animate: z
    } = this;
    return J("div", {
      ref: "borderBox11",
      class: "dv-border-box-11"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("defs", null, [J("filter", {
      id: t,
      height: "150%",
      width: "150%",
      x: "-25%",
      y: "-25%"
    }, [J("feMorphology", {
      operator: "dilate",
      radius: "2",
      in: "SourceAlpha",
      result: "thicken"
    }, null), J("feGaussianBlur", {
      in: "thicken",
      stdDeviation: "3",
      result: "blurred"
    }, null), J("feFlood", {
      "flood-color": a[1],
      result: "glowColor"
    }, null), J("feComposite", {
      in: "glowColor",
      in2: "blurred",
      operator: "in",
      result: "softGlowColored"
    }, null), J("feMerge", null, [J("feMergeNode", {
      in: "softGlowColored"
    }, null), J("feMergeNode", {
      in: "SourceGraphic"
    }, null)])])]), J("polygon", {
      fill: o,
      points: `
        20, 32 ${r * 0.5 - c / 2}, 32 ${r * 0.5 - c / 2 + 20}, 53
        ${r * 0.5 + c / 2 - 20}, 53 ${r * 0.5 + c / 2}, 32
        ${r - 20}, 32 ${r - 8}, 48 ${r - 8}, ${n - 25} ${r - 20}, ${n - 8}
        20, ${n - 8} 8, ${n - 25} 8, 50
      `
    }, null), J("polyline", {
      stroke: a[0],
      filter: `url(#${t})`,
      points: `
          ${(r - c) / 2}, 30
          20, 30 7, 50 7, ${50 + (n - 167) / 2}
          13, ${55 + (n - 167) / 2} 13, ${135 + (n - 167) / 2}
          7, ${140 + (n - 167) / 2} 7, ${n - 27}
          20, ${n - 7} ${r - 20}, ${n - 7} ${r - 7}, ${n - 27}
          ${r - 7}, ${140 + (n - 167) / 2} ${r - 13}, ${135 + (n - 167) / 2}
          ${r - 13}, ${55 + (n - 167) / 2} ${r - 7}, ${50 + (n - 167) / 2}
          ${r - 7}, 50 ${r - 20}, 30 ${(r + c) / 2}, 30
          ${(r + c) / 2 - 20}, 7 ${(r - c) / 2 + 20}, 7
          ${(r - c) / 2}, 30 ${(r - c) / 2 + 20}, 52
          ${(r + c) / 2 - 20}, 52 ${(r + c) / 2}, 30
        `
    }, null), J("polygon", {
      stroke: a[0],
      fill: "transparent",
      points: `
          ${(r + c) / 2 - 5}, 30 ${(r + c) / 2 - 21}, 11
          ${(r + c) / 2 - 27}, 11 ${(r + c) / 2 - 8}, 34
        `
    }, null), J("polygon", {
      stroke: a[0],
      fill: "transparent",
      points: `
          ${(r - c) / 2 + 5}, 30 ${(r - c) / 2 + 22}, 49
          ${(r - c) / 2 + 28}, 49 ${(r - c) / 2 + 8}, 26
        `
    }, null), J("polygon", {
      stroke: a[0],
      fill: De(a[1] || ga[1], 30),
      filter: `url(#${t})`,
      points: `
          ${(r + c) / 2 - 11}, 37 ${(r + c) / 2 - 32}, 11
          ${(r - c) / 2 + 23}, 11 ${(r - c) / 2 + 11}, 23
          ${(r - c) / 2 + 33}, 49 ${(r + c) / 2 - 22}, 49
        `
    }, null), J("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "1",
      points: `
          ${(r - c) / 2 - 10}, 37 ${(r - c) / 2 - 31}, 37
          ${(r - c) / 2 - 25}, 46 ${(r - c) / 2 - 4}, 46
        `
    }, [z && J("animate", {
      attributeName: "opacity",
      values: "1;0.7;1",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.7",
      points: `
          ${(r - c) / 2 - 40}, 37 ${(r - c) / 2 - 61}, 37
          ${(r - c) / 2 - 55}, 46 ${(r - c) / 2 - 34}, 46
        `
    }, [z && J("animate", {
      attributeName: "opacity",
      values: "0.7;0.4;0.7",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.5",
      points: `
          ${(r - c) / 2 - 70}, 37 ${(r - c) / 2 - 91}, 37
          ${(r - c) / 2 - 85}, 46 ${(r - c) / 2 - 64}, 46
        `
    }, [z && J("animate", {
      attributeName: "opacity",
      values: "0.5;0.2;0.5",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "1",
      points: `
          ${(r + c) / 2 + 30}, 37 ${(r + c) / 2 + 9}, 37
          ${(r + c) / 2 + 3}, 46 ${(r + c) / 2 + 24}, 46
        `
    }, [z && J("animate", {
      attributeName: "opacity",
      values: "1;0.7;1",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.7",
      points: `
          ${(r + c) / 2 + 60}, 37 ${(r + c) / 2 + 39}, 37
          ${(r + c) / 2 + 33}, 46 ${(r + c) / 2 + 54}, 46
        `
    }, [z && J("animate", {
      attributeName: "opacity",
      values: "0.7;0.4;0.7",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("polygon", {
      filter: `url(#${t})`,
      fill: a[0],
      opacity: "0.5",
      points: `
          ${(r + c) / 2 + 90}, 37 ${(r + c) / 2 + 69}, 37
          ${(r + c) / 2 + 63}, 46 ${(r + c) / 2 + 84}, 46
        `
    }, [z && J("animate", {
      attributeName: "opacity",
      values: "0.5;0.2;0.5",
      dur: "2s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("text", {
      class: "dv-border-box-11-title",
      x: `${r / 2}`,
      y: "32",
      fill: "#fff",
      "font-size": "18",
      "text-anchor": "middle",
      "dominant-baseline": "middle"
    }, [l]), J("polygon", {
      fill: a[0],
      filter: `url(#${t})`,
      points: `
          7, ${53 + (n - 167) / 2} 11, ${57 + (n - 167) / 2}
          11, ${133 + (n - 167) / 2} 7, ${137 + (n - 167) / 2}
        `
    }, null), J("polygon", {
      fill: a[0],
      filter: `url(#${t})`,
      points: `
          ${r - 7}, ${53 + (n - 167) / 2} ${r - 11}, ${57 + (n - 167) / 2}
          ${r - 11}, ${133 + (n - 167) / 2} ${r - 7}, ${137 + (n - 167) / 2}
        `
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), tn = {
  install(e) {
    e.component("DvBorderBox11", wf);
  }
};
const dt = ["#2e6099", "#7ce7fd"], kf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = He(), n = me(null), {
      width: t,
      height: a,
      initWH: o
    } = xe(n), l = me(`borderr-box-12-filterId-${r}`), c = Ie(dt, je(e, "color"));
    return {
      width: t,
      height: a,
      filterId: l,
      mergedColor: c,
      initWH: o,
      borderBox12: n
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      filterId: t,
      mergedColor: a,
      backgroundColor: o
    } = this;
    return J("div", {
      ref: "borderBox12",
      class: "dv-border-box-12"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("defs", null, [J("filter", {
      id: t,
      height: "150%",
      width: "150%",
      x: "-25%",
      y: "-25%"
    }, [J("feMorphology", {
      operator: "dilate",
      radius: "1",
      in: "SourceAlpha",
      result: "thicken"
    }, null), J("feGaussianBlur", {
      in: "thicken",
      stdDeviation: "2",
      result: "blurred"
    }, null), J("feFlood", {
      "flood-color": De(a[1] || dt[1], 70),
      result: "glowColor"
    }, [J("animate", {
      attributeName: "flood-color",
      values: `
                ${De(a[1] || dt[1], 70)};
                ${De(a[1] || dt[1], 30)};
                ${De(a[1] || dt[1], 70)};
              `,
      dur: "3s",
      begin: "0s",
      repeatCount: "indefinite"
    }, null)]), J("feComposite", {
      in: "glowColor",
      in2: "blurred",
      operator: "in",
      result: "softGlowColored"
    }, null), J("feMerge", null, [J("feMergeNode", {
      in: "softGlowColored"
    }, null), J("feMergeNode", {
      in: "SourceGraphic"
    }, null)])])]), r && n && J("path", {
      fill: o,
      "stroke-width": "2",
      stroke: a[0],
      d: `
          M15 5 L ${r - 15} 5 Q ${r - 5} 5, ${r - 5} 15
          L ${r - 5} ${n - 15} Q ${r - 5} ${n - 5}, ${r - 15} ${n - 5}
          L 15, ${n - 5} Q 5 ${n - 5} 5 ${n - 15} L 5 15
          Q 5 5 15 5
        `
    }, null), J("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: "M 20 5 L 15 5 Q 5 5 5 15 L 5 20"
    }, null), J("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: `M ${r - 20} 5 L ${r - 15} 5 Q ${r - 5} 5 ${r - 5} 15 L ${r - 5} 20`
    }, null), J("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: `
          M ${r - 20} ${n - 5} L ${r - 15} ${n - 5}
          Q ${r - 5} ${n - 5} ${r - 5} ${n - 15}
          L ${r - 5} ${n - 20}
          `
    }, null), J("path", {
      "stroke-width": "2",
      fill: "transparent",
      "stroke-linecap": "round",
      filter: `url(#${t})`,
      stroke: a[1],
      d: `
          M 20 ${n - 5} L 15 ${n - 5}
          Q 5 ${n - 5} 5 ${n - 15}
          L 5 ${n - 20}
          `
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), rn = {
  install(e) {
    e.component("DvBorderBox12", kf);
  }
};
const Af = ["#6586ec", "#2cf7fe"], Lf = /* @__PURE__ */ Le({
  props: qe,
  setup(e) {
    const r = me(null), {
      width: n,
      height: t,
      initWH: a
    } = xe(r), o = Ie(Af, je(e, "color"));
    return {
      width: n,
      height: t,
      mergedColor: o,
      initWH: a,
      borderBox13: r
    };
  },
  render() {
    const {
      $slots: e,
      width: r,
      height: n,
      mergedColor: t,
      backgroundColor: a
    } = this;
    return J("div", {
      ref: "borderBox13",
      class: "dv-border-box-13"
    }, [J("svg", {
      class: "dv-border-svg-container",
      width: r,
      height: n
    }, [J("path", {
      fill: a,
      stroke: t[0],
      d: `
          M 5 20 L 5 10 L 12 3  L 60 3 L 68 10
          L ${r - 20} 10 L ${r - 5} 25
          L ${r - 5} ${n - 5} L 20 ${n - 5}
          L 5 ${n - 20} L 5 20
        `
    }, null), J("path", {
      fill: "transparent",
      "stroke-width": "3",
      "stroke-linecap": "round",
      "stroke-dasharray": "10, 5",
      stroke: t[0],
      d: "M 16 9 L 61 9"
    }, null), J("path", {
      fill: "transparent",
      stroke: t[1],
      d: "M 5 20 L 5 10 L 12 3  L 60 3 L 68 10"
    }, null), J("path", {
      fill: "transparent",
      stroke: t[1],
      d: `M ${r - 5} ${n - 30} L ${r - 5} ${n - 5} L ${r - 30} ${n - 5}`
    }, null)]), J("div", {
      class: "border-box-content"
    }, [Ge(e, "default")])]);
  }
}), nn = {
  install(e) {
    e.component("DvBorderBox13", Lf);
  }
}, Gf = {
  install(e) {
    var r, n, t, a, o, l, c, z, q, N, X, F, A, v, M, B, I, W, b, $, f, _, O, m, C, d, G, L, g, V, U, Z, u, y, h, P, E, K, ee;
    (r = zt.install) == null || r.call(zt, e), (n = qt.install) == null || n.call(qt, e), (t = It.install) == null || t.call(It, e), (a = yr.install) == null || a.call(yr, e), (o = br.install) == null || o.call(br, e), (l = xr.install) == null || l.call(xr, e), (c = Cr.install) == null || c.call(Cr, e), (z = _r.install) == null || z.call(_r, e), (q = $r.install) == null || q.call($r, e), (N = Ar.install) == null || N.call(Ar, e), (X = Lr.install) == null || X.call(Lr, e), (F = Sr.install) == null || F.call(Sr, e), (A = Or.install) == null || A.call(Or, e), (v = Gr.install) == null || v.call(Gr, e), (M = Mr.install) == null || M.call(Mr, e), (B = Rr.install) == null || B.call(Rr, e), (I = Dr.install) == null || I.call(Dr, e), (W = Br.install) == null || W.call(Br, e), (b = Tr.install) == null || b.call(Tr, e), ($ = Nr.install) == null || $.call(Nr, e), (f = Wr.install) == null || f.call(Wr, e), (_ = jr.install) == null || _.call(jr, e), (O = Er.install) == null || O.call(Er, e), (m = zr.install) == null || m.call(zr, e), (C = qr.install) == null || C.call(qr, e), (d = Ir.install) == null || d.call(Ir, e), (G = Hr.install) == null || G.call(Hr, e), (L = Vr.install) == null || L.call(Vr, e), (g = Ur.install) == null || g.call(Ur, e), (V = Xr.install) == null || V.call(Xr, e), (U = Qr.install) == null || U.call(Qr, e), (Z = Yr.install) == null || Z.call(Yr, e), (u = Kr.install) == null || u.call(Kr, e), (y = Jr.install) == null || y.call(Jr, e), (h = Zr.install) == null || h.call(Zr, e), (P = en.install) == null || P.call(en, e), (E = tn.install) == null || E.call(tn, e), (K = rn.install) == null || K.call(rn, e), (ee = nn.install) == null || ee.call(nn, e);
  }
};
export {
  Vs as ActiveRingChart,
  Sr as ActiveRingChartPlugin,
  ef as BorderBox1,
  $f as BorderBox10,
  en as BorderBox10Plugin,
  wf as BorderBox11,
  tn as BorderBox11Plugin,
  kf as BorderBox12,
  rn as BorderBox12Plugin,
  Lf as BorderBox13,
  nn as BorderBox13Plugin,
  Hr as BorderBox1Plugin,
  rf as BorderBox2,
  Vr as BorderBox2Plugin,
  af as BorderBox3,
  Ur as BorderBox3Plugin,
  sf as BorderBox4,
  Xr as BorderBox4Plugin,
  ff as BorderBox5,
  Qr as BorderBox5Plugin,
  hf as BorderBox6,
  Yr as BorderBox6Plugin,
  pf as BorderBox7,
  Kr as BorderBox7Plugin,
  yf as BorderBox8,
  Jr as BorderBox8Plugin,
  xf as BorderBox9,
  Zr as BorderBox9Plugin,
  Wi as Button,
  zt as ButtonPlugin,
  zs as CapsuleChart,
  Lr as CapsuleChartPlugin,
  Ds as Charts,
  Ar as ChartsPlugin,
  oo as ConicalColumnChart,
  qt as ConicalColumnChartPlugin,
  iu as Decoration1,
  $c as Decoration10,
  zr as Decoration10Plugin,
  Rc as Decoration11,
  qr as Decoration11Plugin,
  Kc as Decoration12,
  Ir as Decoration12Plugin,
  Mr as Decoration1Plugin,
  fu as Decoration2,
  Rr as Decoration2Plugin,
  pu as Decoration3,
  Dr as Decoration3Plugin,
  bu as Decoration4,
  Br as Decoration4Plugin,
  wu as Decoration5,
  Tr as Decoration5Plugin,
  Ou as Decoration6,
  Nr as Decoration6Plugin,
  Nu as Decoration7,
  Wr as Decoration7Plugin,
  qu as Decoration8,
  jr as Decoration8Plugin,
  ec as Decoration9,
  Er as Decoration9Plugin,
  Ra as DigitalFlop,
  Or as DigitalFlopPlugin,
  Il as FlylineChart,
  yl as FlylineChartEnhanced,
  xr as FlylineChartEnhancedPlugin,
  Cr as FlylineChartPlugin,
  Us as FullScreenContainer,
  Gr as FullScreenContainerPlugin,
  Uo as Loading,
  br as LoadingPlugin,
  po as PercentPond,
  It as PercentPondPlugin,
  ns as ScrollBoard,
  $r as ScrollBoardPlugin,
  es as ScrollRankingBoard,
  _r as ScrollRankingBoardPlugin,
  Eo as WaterLevelPond,
  yr as WaterLevelPondPlugin,
  Gf as default
};
